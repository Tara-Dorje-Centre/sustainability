<?php 


class materialFields extends _entityFields{

 public $dateReported;
 public $doneBy;
 public $paidTo;
 public $updated;
 public $quantity = 1;	
 public $quantityUnitMeasureId = 0;
 public $quantityUnitMeasureName = '';
 public $costUnit = 0;	
 public $costEstimated = 0;
 public $costActual = 0;
 public $notes;
 public $linkUrl;
 public $linkText;

public function __construct(){

	$this->hasProject = true;
$this->hasTask = true;
$this->hasType = false;
$this->hasLocation = true;
	$this->hasUpdated = true;

}


public function setRow($row){
	parent::setRow();

 $this->dateReported = $row["date_reported"];
 $this->doneBy = stripslashes($row["done_by"]);
 $this->paidTo = stripslashes($row["paid_to"]);

 $this->quantity = $row["quantity"];	
 $this->quantityUnitMeasureId = $row["qty_unit_measure_id"];
 $this->quantityUnitMeasureName = stripslashes($row["qty_unit_measure_name"]);
 $this->costEstimated = $row["cost_estimated"];						
 $this->costActual = $row["cost_actual"];
 $this->costUnit = $row["cost_unit"];
 $this->notes = ($row["notes"]);
 $this->linkText = ($row["link_text"]);
 $this->linkUrl = ($row["link_url"]);
	
}

public function defaults(){
	parent::defaults();
	
 $this->quantity = 1;
 $this->quantityUnitMeasureId = 0;
 $this->costUnit = 0;
 $this->costEstimated = 0;
 $this->costActual = 0;		
 
}

public function format(){
	parent::format();

 $this->notes = formatText($this->notes);
 $this->dateReported = formatDate($this->dateReported);

}

public function display(){
	$this->addContent(parent::display(),true);
	$this->detailPara('Reported',$this->dateReported);
	$this->detailPara('Done By', $this->doneBy);
	$this->detailPara('Paid To', $this->paidTo);
	$this->detailPara('Quantity Units',$this->quantityUnitMeasureName);	
	$this->detailPara('Quantity',$this->quantity);
	$this->detailPara('Cost Unit',$this->costUnit);
	$this->detailPara('Cost Estimated',$this->costEstimated);
	$this->detailPara('Cost Actual',$this->costActual);
	$this->detailPara('Notes',$this->notes);
	return $this->getContent();
}

public function listHeading(){
	$this->addContent(parent::listHeading(),true);
	$this->listTh('caption');
	
	/*
		$heading .=  wrapTh('Material');
		$heading .= wrapTh('Type');
		$heading .=  wrapTh('Date Reported');
		$heading .=  wrapTh('Done By');
		$heading .= wrapTh('Qty Units');
		$heading .=  wrapTh('Qty');
		$heading .=  wrapTh('Unit Cost');
		$heading .=  wrapTh('Cost Est');
		$heading .= wrapTh('Paid To');
		//$heading .=  wrapTh('Cost Actual');
		$heading .=  wrapTh('Links');		*/
	
	return $this->getContent();
}

public function listDetail(){
	$this->addContent(parent::listDetail(),true);
	
	$this->listTd($this->field);
	
	/*	$detail .= wrapTd($m->typeName);			
			$detail .= wrapTd($m->dateReported);
			$detail .= wrapTd($m->doneBy);
			$detail .= wrapTd($m->quantityUnitMeasureName);
			$detail .= wrapTd($m->quantity);
			$detail .= wrapTd($m->costUnit);
			$detail .= wrapTd($m->costEstimated);
			$detail .= wrapTd($m->paidTo);
			//$detail .= wrapTd($m->costActual);*/
	
	return $this->getContent();
}

public function getPostVars(){
	parent::getPostVars();

 $this->notes = $this->postString('notes'); 
 $this->dateReported = $this->postDate('dateReported');
 $this->doneBy = $this->postString('doneBy');
 $this->paidTo = $this->postString('paidTo');

 $this->quantity = $this->postVar('quantity'); 
 $this->quantityUnitMeasureId = $this->postVar('quantityUnitMeasureId');
 $this->costUnit = $this->postVar('costUnit'); 
 //$this->costEstimated = $this->postVar('costEstimated'); 
 //$this->costActual = $this->postVar('costActual'); 
 $this->linkText = $this->postString('linkText');
 $this->linkUrl = $this->postString('linkUrl');
 
	
}

}


class material extends _entity{
protected $__MyClassName = 'Material';
	protected $_titleEntity = 'Material';
  	protected $pageSave = 'pr_Material_Save.php';
  	
	protected function setHelperClasses(){
	
		
		//$this->task = new Task($this->pageMode, $this->idParent);
		$this->f = new materialFields();
		$this->links = new materialLinks();
		$this->sql = new MaterialSQL();
		
	}

	protected function afterSetDetails(){

		$this->setParentTask();
	}
	protected function beforeSetDetails(){
	
	}
	
	protected function afterSetDefaults(){
	
	}
	public function setParentTask(){
		$this->task->setDetails();
	}
		
	protected function setPageTitle(){	
		$title = openDiv('section-heading-title','none');
		$title .= $this->task->project->name.br();
		$title .= 'Task: '.$this->task->name;		
		$title .= closeDiv();
		$this->_pageTitle = $title;
	}
	
	
	protected function setPageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';
		
		$projects = new ProjectLinks($menuType,$menuStyle);
		$tasks = new TaskLinks($menuType,$menuStyle);
		$materials = new MaterialLinks($menuType,$menuStyle);
					
		$menu = $projects->openMenu('section-heading-links');

		$menu .= $projects->detailViewHref($this->task->project->id);
		if ($this->task->project->materialsCount > 0){
//			$menu .= $projects->resetMenu();
			$menu .= $materials->listingHref(0,'ProjectMaterials',$this->task->project->id,'PROJECT','YES');
		}
		
		$menu .= $projects->resetMenu();
		$menu .= $tasks->detailViewHref($this->task->id);
		if ($this->task->materialCount > 0){
			$menu .= $materials->listingHref($this->task->id,'TaskMaterials',0,'TASK','NO');
		}
		$menu .= $projects->resetMenu();
		
		if ($this->pageMode == 'VIEW'){
			$menu .= $materials->detailEditHref($this->id);
		} elseif ($this->pageMode == 'EDIT'){
			
			$menu .= $materials->detailViewHref($this->id);
		}
		
		$menu .= $projects->closeMenu();
		$this->_pageMenu = $menu;
	}

	public function afterDisplay(){
	
		
		if ($this->linkText != '' && $this->linkUrl != ''){
			$l = new MaterialLinks('DIV','menu');
			$link = $l->formatHref($this->linkText,$this->linkUrl,'_blank');
			$detail .= captionedParagraph('a-weblink','Web Link',$link);
		}		

		
		return $detail;
	}	
	
	protected function setDefaults(){
	
	
		if ($this->pageMode == 'ADD'){		
			
	
			if (isset($_SESSION['last-material-date'])){
			 $this->dateReported = $_SESSION['last-material-date'];
			} else {
			global $sessionTime;
			$this->dateReported = $sessionTime;				
			}

			if (isset($_SESSION['last-material-paid-to'])){
			 $this->paidTo = $_SESSION['last-material-paid-to'];
			}
		
			if (isset($_SESSION['last-material-done-by'])){
			 $this->doneBy = $_SESSION['last-material-done-by'];
			} else {
			$this->doneBy = $_SESSION['login-name'];
			}
		}
	}
	
	public function editForm(){
		$this->setAddDefaults();
		
		$this->echoState(true, 'editForm');
		
		if ($this->pageMode == 'ADD'){
			$legendText = 'Add Material';
		} else if ($this->pageMode == 'EDIT'){
			$legendText =  'Edit Material';
		} else {
			$legendText = 'Material Details';
		}
		
		$entity = 'material';
		$c = new MaterialLinks;
		$contextMenu = $c->formatToggleLink('formOptional','+Options');
		$form = openEditForm($entity,$legendText,'pr_Material_Save.php',$contextMenu);

		$fields = inputFieldName($entity,$this->f->name,'name','Material');

		//done by user
		$fields .= inputFieldUser($entity,$this->f->doneBy,'doneBy','Done By');

		//paid to
		$fields .= inputFieldUser($entity,$this->f->paidTo,'paidTo','Paid To');

		

		
		//quantity
		$fields .= inputFieldNumber($entity,$this->f->quantity,'quantity','Quantity');
		
		//unit cost
		$fields .= inputFieldNumber($entity,$this->f->costUnit,'costUnit','Unit Cost');

		//quantity unit type
		$u = new UnitOfMeasure;
		$select = $u->options($this->f->quantityUnitMeasureId,'quantityUnitMeasureId','false',false);
		$fields .= captionedInput('Quantity Units',$select);

		$m = new MaterialType;
		$select = $m->options($this->f->idType,'idType','false',false);
		$fields .= captionedInput('Material Type',$select);


		//date of materials purchase
		$fields .= inputFieldTimestamp($entity, 'dateReported', $this->f->dateReported, 'Reported'); 		
		
		
		$formRequired = $fields;
		
		//estimated cost
		$tooltip = 'Based on unit cost and quantity';
		$fields = inputFieldNumber($entity,$this->f->costEstimated,'costEstimated','Estimate',$tooltip,'true');

		//estimated cost
		$tooltip = 'Set when task costs are approved';
		$fields .= inputFieldNumber($entity,$this->f->costActual,'costActual','Actual',$tooltip,'true');

		$fields .= inputGroupWebLink($entity,$this->f->linkText,$this->linkUrl);
		
		$fields .= inputFieldDescription($entity,$this->f->description,'description');
		
		$fields .= inputFieldNotes($entity,$this->f->notes,'notes');

		$formOptional = $fields;

		//hidden fields and submit,reset buttons
		$hidden = getHiddenInput('mode', $this->pageMode);
		$hidden .= getHiddenInput('idTask', $this->f->idTask);
		$hidden .= getHiddenInput('id', $this->f->id);
		$hidden .= getHiddenInput('idLocation', $this->f->idLocation);

		$input = getSaveChangesResetButtons();
		$formSubmit = $hidden.$input;
			
		$form .= closeEditForm($entity,$formRequired,$formOptional,$formSubmit);	

		return $form;
	}
	
	private function setEstimatedCost(){
			$this->costEstimated = $this->f->costUnit * $this->f->quantity;
	}
	
	public function aftercollectPostValues(){
		 $_SESSION['last-material-paid-to'] = $this->paidTo;
 $_SESSION['last-material-done-by'] = $this->doneBy;
 $_SESSION['last-material-date'] = $this->dateReported;
		$this->setEstimatedCost();

		$this->setParentTask();
	}

	protected function saveUpdate(){
	

			
			$sql = " UPDATE materials m ";
			$sql .= " SET ";
			$sql .= " m.name = '".$this->f->name."', ";
			$sql .= " m.description = '".$this->f->description."', ";
			$sql .= " m.notes = '".$this->f->notes."', ";
			$sql .= " m.updated = CURRENT_TIMESTAMP, ";
			$sql .= " m.date_reported = '".$this->f->dateReported."', ";
			$sql .= " m.done_by = '".$this->f->doneBy."', ";
			$sql .= " m.paid_to = '".$this->f->paidTo."', ";			
			$sql .= " m.link_text = '".$this->f->linkText."', ";
			$sql .= " m.link_url = '".$this->f->linkUrl."', ";
			$sql .= " m.type_id = ".$this->f->idType.", ";
			$sql .= " m.location_id = ".$this->f->idLocation.", ";
			$sql .= " m.quantity = ".$this->f->quantity.", ";
			$sql .= " m.qty_unit_measure_id = ".$this->f->quantityUnitMeasureId.", ";
			$sql .= " m.cost_unit = ".$this->f->costUnit.", ";
			$sql .= " m.cost_estimated = ".$this->f->costEstimated." ";
			//$sql .= " m.cost_actual = ".$this->f->costActual." ";
			$sql .= " WHERE m.id = ".$this->f-oid." ";

			$result = dbRunSQL($sql);
			
			$this->task->resetMaterialsAuthorization();
			
		}
			
	protected function saveInsert(){
	
			$sql = " INSERT INTO materials ";
			$sql .= " (name, ";
			$sql .= " description, ";
			$sql .= " task_id, ";
			$sql .= " location_id, ";
			$sql .= " date_reported, ";
			$sql .= " done_by, ";
			$sql .= " paid_to, ";
			$sql .= " updated, ";
			$sql .= " link_url, ";
			$sql .= " link_text, ";			
			$sql .= " quantity, ";
			$sql .= " cost_unit, ";
			$sql .= " cost_estimated, ";
			//$sql .= " cost_actual, ";
			$sql .= " type_id, ";
			$sql .= " qty_unit_measure_id, ";
			$sql .= " notes) ";
			$sql .= " VALUES (";
			$sql .= "'".$this->f->name."', ";
			$sql .= "'".$this->f->description."', ";
			$sql .= "".$this->f->task->f->id.", ";
			$sql .= "".$this->f->locationId.", ";
			$sql .= " '".$this->f->dateReported."', ";
			$sql .= " '".$this->f->doneBy."', ";
			$sql .= " '".$this->f->paidTo."', ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= " '".$this->f->linkUrl."', ";
			$sql .= " '".$this->f->linkText."', ";						
			$sql .= "".$this->f->quantity.", ";
			$sql .= "".$this->f->costUnit.", ";
			$sql .= "".$this->f->costEstimated.", ";
			//$sql .= "".$this->f->costActual.", ";
			$sql .= " ".$this->f->typeId.", ";
			$sql .= " ".$this->f->quantityUnitMeasureId.", ";
			$sql .= "'".$this->f->notes."') ";
			
			$result = dbRunSQL($sql);
			
			$this->f->id = dbInsertedId();
			$this->f->task->f->resetMaterialsAuthorization();
		
	
	}
	
} 
?>
