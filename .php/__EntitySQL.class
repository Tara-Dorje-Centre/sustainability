<?php

interface IentitySQL{
	public function info($id);
	public function count();
	public function list($page = 1, $rows = 10);
	public function summary();
	public function options($selectedId = 0, $disabled = 'false');

}

class __entitySQL implements IentitySQL{
protected $baseTable = 'entitySQL.entityTable';
protected $fieldDate = 'date_reported';
protected $fieldApproved = 'approved';
protected $fieldDoneBy = 'done_by';
protected $fieldId = 'id';
protected $fieldCount = 'count_all';
protected $fieldOptionCaption = 'caption';
protected $fieldOptionValue = 'value';

protected function _select($first = true){
if ($first == true){
$c = " SELECT ";	
} else {
	$c = " , ";
}
return $c;
}

protected function cols(){
$c = $this->select();
$c .= " * ";
return $c;
}

protected function colsCount($first = true){
$c = $this->select($first);
$c .= " COUNT(*) as ".$this->fieldCount." ";
return $c;
}

protected function colsSummary($first = true){
$c = $this->colsCount($first);
return $c;
}

protected function colsDoneBy($first = true){
$c = $this->select($first);
	$c .= " IF(m.done_by='', 'Unspecified', m.done_by) done_by, ";
  return $c;
  }
protected function colsCalendarLinks($first = true){
$c = $this->select($first);
  $c .= " MONTH(".$this->fieldDate.") month, ";
  $c .= " YEAR(".$this->fieldDate.") year ";
  return $c;
  }

protected function groupByCalendarLinks(){
  $q .= " GROUP BY  ";
  $q .= " YEAR(".$this->fieldDate."), ";
  $q .= " MONTH(".$this->fieldDate.") ";
  return $q;
}


protected function colsOption($first = true){
	$c = $this->select($first);
	$c .= " id as value, ";
	$c .= " concat_ws(display_order, name) as caption, ";
	$c .= " display_order ";
  	return $c;
}



protected function tables($joinTypes = false){
	$f = " FROM ".$this->baseTable." as e ";
	return $f;
}

protected function _where($first = true){
if ($first == true){
$c = " WHERE ";	
} else {
	$c = " AND ";
}
return $c;
}


protected function _equalNumber($id, $field, $first = false){
	$q = $this->_where(true);

$q .= $field." = ".$id." ";
return $q;
}

protected function _equalString($value, $field, $useUpper = false, $first = false){
	$w = $this->_where($first);
	if ($useUpper == false){
		$w .= $field." = '".$value."' ";
	} else {
		$w .= " UPPER(".$field.") = UPPER('".$value."') ";
	}
	return $w;
}


protected function _equalYearMonth($year = 0, $month = 0, $first = false){
	if ($year > 0){
		$w = $this->_where($first);
		$w .= " YEAR(".$this->$fieldDate.")  = ".$year." ";	
		
		if ($month > 0){
			$w .= $this->_where(false);
			$w .= " MONTH(".$this->$fieldDate.")  = ".$month." ";	
		}
	}
	return $w;
}

protected function _equalApproved($approved = 'no', $first = false){
	if ($approved == 'yes'){

		$w = $this->_equalString($approved, $this->fieldApproved, true, $first);
	}
	return $w;
}

protected function _equalDoneBy($doneBy = 'EVERYONE', $first = false){
	if ($doneBy != 'EVERYONE'){
		$w = $this->_equalString($doneBy, $this->fieldDoneBy, true, $first);
		$w .= " AND p.show_always != 'no' ";
	} else {
		$w = '';
	}
	return $w;
}
	
protected function where($id, $first = true){
	$w = $this->_equalNumber($id, $this->fieldId, $first);
	return $w;
}
	
public function count($id = 0){
	$q = $this->colsCount();
	$q .= $this->tables(false);
	$q .= $this->where($id);
	return $q;	
}
	
public function countDoneBy($doneBy = 'EVERYONE'){
$q = $this->colsCount();
$q .= $this->tables(false);
$q .= $this->_equalDoneBy($doneBy, true);
return $q;
}


public function info($id = 0){
$q = $this->cols();
$q .= $this->tables();
$q .= $this->where($id);
return $q;
}

public function list($page = 1, $rows = 10){
	$q = $this->cols();
	$q .= $this->tables();
	$q .= sqlLimitClause($page, $rows);
	return $q;
}
	
public function listDoneBy($doneBy, $page = 1, $rows = 10){
$q = $this->cols();
$q .= $this->tables();
$q .= $this->_equalDoneBy($doneBy, true);
$q .= sqlLimitClause($page, $rows);
return $q;
}

public function summary(){
	$q = $this->colsSummary();
	$q .= $this->tables(false);
	return $q;
}


public function options($selectedId = 0, $disabled = 'false'){
	$q = $this->colsOption(true);
	$q .= $this->tables(true);
	if ($disabled == 'true'){
		$q .= $this->where($selectedId);
	}
	$q .= " ORDER BY caption ";
	return $q;	
}


}

?>
