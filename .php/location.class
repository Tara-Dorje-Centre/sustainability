<?php 

class Location extends __Entity{
	protected $__MyClassName = '#Location';

	public $typeId = 0;
    public $name;	
	public $parentSortKey;
	public $sortKey;
    public $description;
    public $created;
    public $updated;
	public $childLocations = 0;
	
  
	private $sql;
	private $links;
	
	public function __construct($mode = 'VIEW', $id = 0, $idParent = 0){
		parent::__construct($mode, $id, $idParent);
		$this->sql = new LocationSQL;
		$this->links = new LocationLinks();
	}
	
	
	public function setRowValues($row){
		$this->id = $row["id"];
		$this->idParent = $row["parent_id"];
		$this->typeId = $row["type_id"];
		$this->name = ($row["name"]);
		$this->sortKey = ($row["sort_key"]);
		$this->description = ($row["description"]);
		$this->created = ($row["created"]);	
		$this->updated = ($row["updated"]);		
	}
	
	public function listingHeading(){
		$heading = wrapTh('Location');
		$heading .= wrapTh('Description');
		$list .= wrapTr($heading);
		return $list;
	}
	
	protected listingRowLink(){
		$link = $this->links->detailViewEditHref($this->id,$this->sortKey);
		return $link;
	}
	
	public listingRowFormat(){
	
		$this->formatForDisplay();
		$detail .= wrapTd($this->listingRowLink());
		$detail .=  wrapTd($this->description);			
		$listRow =  wrapTr($detail);
		return $listRow;
	}
	
    public function setDetails(){
		$this->echoState(true, 'setDetails');
		if ($this->id != 0){
			
			$sql = $this->sql->info($this->id);
			
			$result = dbGetResult($sql);
			if($result){
	  			while ($row = $result->fetch_assoc())
	  			{
	  			$this->setRowValues($row);
			
				}
			$result->close();
			}
			
		}
			
		$this->setChildCount();
		
	}	
	
	private function setChildCount(){
		$this->echoState(true,'setChildCount');
		if ($this->id > 0){
		$sql = $this->sql->countChildren($this->id);
		$this->childLocations = dbGetCount($sql, 'total_locations');
		} else {
		$this->childLocations = 0;
		}

		
	}
	
	protected function setPageTitle(){
		if ($this->pageMode != 'ADD'){
			$heading = $this->sortKey;
		} else {
			if ($this->idParent == 0){
				$heading = 'Add New Location';
			} else {
				$heading = $this->getSortKey($this->idParent).' Add Sub Location';	
			}
		}

		$this->_pageTitle = $heading;
	}
	
	protected function setPageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';
		
		$locationL = new LocationLinks($menuType,$menuStyle);
		$menuL = new MenuLinks($menuType,$menuStyle);
		
		$menu = $locationL->openMenu('section-heading-links');		
		$menu .= $menuL->linkReference();
		$menu .= $locationL->resetMenu();
		
		if ($this->idParent > 0){
			$menu .= $locationL->detailViewHref($this->idParent,'Up');
		}
		if ($this->pageMode == 'VIEW'){
			$menu .= $locationL->detailEditHref($this->id);
		} elseif ($this->pageMode == 'EDIT'){
			$menu .= $locationL->detailViewHref($this->id);
		}
		$menu .= $locationL->listingHref(-1);	

		if ($this->pageMode != 'ADD'){
			$menu .= $locationL->resetMenu();
			
			$i = $this->childLocations;
			if ($i != 0){
				$menu .= $locationL->listingHref($this->id,'Sublocations('.$i.')');
			} else {
				$menu .= 'No Sublocations';	
			}
			$menu .= $locationL->detailAddHref($this->id);
		}
	
		$menu .= $locationL->closeMenu();
		$this->_pageMenu = $menu;
	}
	
	public function formatForDisplay(){
		$this->name = displayLines($this->name);
		$this->description = displayLines($this->description);
	}

	
	public function display(){
		$this->formatForDisplay();
		
		$detail = openDisplayDetails('location','Location Details');		



		$detail .= captionedParagraph('name', 'Name', $this->name);

		$lt = new LocationType('SELECT');
		$select = $lt->selectList($this->typeId,'typeId','true');
		$detail .= captionedParagraph('type', 'Location Type', $select);
		$detail .= captionedParagraph('desc', 'Description', $this->description);		
		$detail .= captionedParagraph('created', 'Created', $this->created);
		$detail .= captionedParagraph('updated', 'Updated', $this->updated);

		$detail .= closeDisplayDetails();
		return $detail;
	}
	/*
	CONST $html_false = 'false';
	CONST $html_true = 'true';
	*/
	public function options(
		$selected = 0, 
		$idName = 'locationId', 
		$disabled = 'false',
		$showLink = true,
		$onChangeJS = NULL){

		$this->echoState(true, 'options');
		
		
		$sql = $this->sql->options($selected, $disabled);
		
		$default = 0;
		$defaultCaption = '-No Location';
		$allOptions = getSelectOptionsSQL($sql,$selected,$disabled,$default,$defaultCaption);		
		
		$select = getSelectList($idName,$allOptions,'none',$disabled );	

		if ($showLink == true){
			$ll = new LocationLinks;	
			$links =$ll->detailViewEditHref($selectedValue);
			$select .= $links;	
		}
		return $select;

	}
	
	protected function setDefaults(){
	
		if ($this->pageMode == 'ADD'){
			//if add came from all locations default, reset to 0 for no parent
			if ($this->idParent == -1){
				$this->idParent = 0;
			}
			
		}
		
					$this->echoState(true,'setAddDefaults');
		
		
	}  

	public function editForm(){
	
	$this->echoState(true,'editForm');
	
		$this->setDefaults();
		if ($this->pageMode == 'ADD'){
			$legend = 'Add Location';
		} else {
			$legend = 'Edit Location';
		}
		//$entity = 'location';
		$c = new LocationLinks;
		$contextMenu = $c->formatToggleLink('formOptional','+Location Options');		
		$form = openEditForm($entity,$legend,'pr_Location_Save.php', $contentMenu);
		
		//formRequired fields	
		$formRequired = inputFieldName($entity,$this->name,'locationName','Location');

		$type = new LocationType('SELECT');
		$select = $type->options($this->typeId,'typeId','false',false);
		$formOptional = captionedInput('Location Type',$select);
					
		$formOptional .= inputFieldText($entity,$this->description,'locationDescription','Description');

						
		$hidden = getHiddenInput('mode', $this->pageMode);
		$hidden .= getHiddenInput('parent-location-id', $this->idParent);
		$hidden .= getHiddenInput('locationId', $this->id);
		$input = getSaveChangesResetButtons();
		$formSubmit = $input.$hidden;
		
		$form .= closeEditForm($entity,$formRequired,$formOptional,$formSubmit);
		return $form;
	}
	
	public function collectPostValues(){
	
			$this->echoState(true, 'collectPostValues');
		$this->id = $_POST['locationId'];
		$this->typeId = $_POST['typeId'];
		$this->idParent = sessionVariablePOST('parent-location-id', $this->idParent);
		$this->name = dbEscapeString($_POST['locationName']); 
		$this->description = dbEscapeString($_POST['locationDescription']); 		
		$this->pageMode = $_POST['mode'];	
		$this->echoState(true, 'collectPostValues.leaving');
	}
 	
	public function getSortKey($id){
		$sql = $this->sql->sortKey($id);
		$sortKey = dbGetScalar($sql, 'sort_key');
		return $sortKey;		
	}

	private function updateSortKey(){

		if ($this->idParent == 0){
			$sortKey = $this->name;
		} else {
			$sortKey = $this->getSortKey($this->idParent).'.'.$this->name;
		}
		
		$sql = $this->sql->sortKeyUpdate($this->id, $sortKey);
		
		$result = dbRunSQL($sql);
	
	}

	protected function saveUpdate(){
	

			$sql = " UPDATE locations AS l ";
			$sql .= " SET ";
			$sql .= " l.name = '".$this->name."', ";
			$sql .= " l.type_id = ".$this->typeId.", ";
			$sql .= " l.updated = CURRENT_TIMESTAMP, ";
			$sql .= " l.description = '".$this->description."' ";
			$sql .= " WHERE l.id = ".$this->id."  ";			
			
			$result = dbRunSQL($sql);
			
			$this->updateSortKey();
	}
	
	protected function saveInsert(){
	
			$sql = " INSERT INTO locations ";
			$sql .= " (name, ";
			$sql .= " parent_id, ";
			$sql .= " type_id, ";
//			$sql .= " sort_key, ";
			$sql .= " created, ";
			$sql .= " updated, ";
			$sql .= " description) ";
			$sql .= " VALUES (";
			$sql .= "'".$this->name."', ";
			$sql .= " ".$this->idParent.", ";
			$sql .= " ".$this->typeId.", ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= "'".$this->description."') ";
			
			$result = dbRunSQL($sql);
			
			$this->id = dbInsertedId();
			
			$this->updateSortKey();
		
	
	}
	
} 
?>
