<?php 


 interface IentityFields {
 public function __construct();
 public function setRow($row);
 public function format();
 public function defaults();
 public function listHeading();
 public function listDetail();
 public function display();
 public function getPostVars();
 }
 
 class field{
 private $valueNumber = 0;
 private $valueText = '';
 private $valueDate = '';
 private $type = 'NUMBER';
 public $useRow = false;
 public $usePost = false;
 public $showList = false;
 public $showDisplay = false;
 
 public function __construct($type = 'NUMBER'){
 $this->type = $type;
 }
 public function set($value){
  	if ($this->type == 'NUMBER'){
 		$this->valueNumber = $value;
 	} else {
 		if ($this->type == 'DATE'){
 		 	$this->valueDate = $value;
 		} else {
 		 	$val = $this->valueText = $value;
 		}
 	} 
 
 }
 
 public function value(){
 return $this->get();
 }
 public function get(){
 	if ($this->type == 'NUMBER'){
 		$val = $this->valueNumber;
 	} else {
 		if ($this->type == 'DATE'){
 		 	$val = $this->valueDate;
 		} else {
 		 	$val = $this->valueText;
 		}
 	} 
 	return $val;
 }
 
 public function reset($default = NULL){
 if ($this->canSet == true){
 
 $this->set($default);
 
 }
 
 }
 
  public function show($list = true, $display = true){
	$this->showList = $list;
	$this->showDisplay = $display;
 }
 public function use($row = true, $post = true){
	$this->useRow = $row;
	$this->usePost = $post;
 }
 	private function canSet(){
 	if (($this->useRow == true) or ($this->usePost == true)){
   		$can = true;
   	} else {
   		$can = false;
   	}
   	return $can;
	}
 
	private function canShow(){
 	if (($this->showList == true) or ($this->showDisplay == true)){
   		$can = true;
   	} else {
   		$can = false;
   	}
   	return $can;
   	}
 
 public function fetch($row,$field){
 if ($this->useRow() == true){
 
 $this->set($row[$field]);
 
 }
 
 
 }
 public function post($varName){
  	  if ($this->usePost() == true){
  
  $val = $_POST[$varName];
  
  if ($this->type == 'DATE'){
  $this->valueDate = getTimestampPostValues($val);
  }
  
  if ($this->type == 'TEXT'){
        $this->valueText = dbEscapeString($val);
  }
  if ($this->type == 'NUMBER'){
      $this->valueNumber = $val;
  }
 

 }
 
 
 }
 /*
 protected function postVar($varName, $default = 0){
		return $_POST[$varName];
 	}
	protected function postDate(){
		return getTimestampPostValues($val);
	}
	protected function postString($name, $default = ''){
		return dbEscapeString($_POST[$name]);
	}*/
 	public function format(){
 	if ($this->canShow() == true){
  		if ($this->type == 'NUMBER'){
  			if ($this->valueNumber == ''){
  				$this->valueNumber = 0;
  			}
  		
  		
  		} else {
  		  	if ($this->type == 'DATE'){
  		  		$this->valueDate = getTimestampDate($this->valueDate);
  		  	} else {
  		  		$this->valueText = displayLines($this->valueText);
  		  	}
  		
  		}
 	}
 	
	}

 
}
 


abstract class _entityFields extends _baseEntityFields implements IentityFields{

	public $id = 0;
	public $name;		
public $displayOrder;
	public $description;
	// = new field('TEXT');
	   	public $notes = '';
	   	   	public $summary = '';
	   	   	public $comments = '';
	   	
	public $hasDisplayOrder = false;
    public $listDisplayOrder = false;
	//public $displayOrder = 0;

	//long text fields
	//public $hasDescription = false;
  //  public $listDescription = false;


	public $hasNotes = false;
   	public $listNotes = false;

	 
	public $hasSummary = false;
   	public $listSummary = false;

   	
   	public $hasComments = false;
   	public $listComments = false;

   	
   	//userid fields
   	public $hasDoneBy = false;
    public $listDoneBy = false;
	public $doneBy = '';
	
	public $hasReviewedBy = false;
    public $listReviewedBy = false;
	public $reviewedBy = '';
	
	public $hasApprovedBy = false;
    public $listApprovedBy = false;
	public $approvedBy = '';
	
	//date fields
	public $hasStarted = false;
   	public $listStarted = false;
   	public $started;
	 
	public $hasReported = false;
   	public $listReported = false;
   	public $reported;
	 
    public $hasCreated = false;
    public $listCreated = false;
	public $created;
	
    public $hasUpdated = false;
    public $listUpdated = false;
    public $updated;
    
    public $hasReviewed = false;
    public $listReviewed = false;
	public $reviewed;
	
    
    public $hasHighlight = false;
    public $listHighlight = false;
    public $highlight = 'none';
	public $highlightStyle = 'none';
    
    public $hasType = false;
    public $listType = false;
	public $idType = 0;
	public $nameType;
	
	public $hasQuantityEstimated = false;
    public $listQuantityEstimated = false;
	public $quantityEstimated = 0;
	
   	public $hasQuantityActual = false;
    public $listQuantityActual = false;
	public $quantityActual = 0;
	
	public $hasUnits = false;
    public $listUnits = false;
	public $idUnits = 0;
	public $nameUnits;
	
	
	public $hasLocation = false;
	public $listLocation = false;
	public $idLocation = 0;
	public $nameLocation;
	 
    public $hasParent = false;
    public $listParent = false;
   	public $idParent = 0;
   	public $nameParent;
   	
   	public $hasProject = false;
   	public $listProject = false;
   	public $idProject = 0;
   	public $nameProject;
	
	public $hasTask = false;
   	public $listTask = false;
   	public $idTask = 0;
   	public $nameTask;
   	
	public $hasActivity = false;
   	public $listActivity = false;
   	public $idActivity = 0;
   	public $nameActivity;
	 
	
    public function __construct(){
    
    $this->description = new field('TEXT');
    }
    
    protected function reset(){
    
    	$this->id = 0;
		$this->name = '';
		
	//	if ($this->description->set == true){
			$this->description->reset('');
			
	//	}
		
		if ($this->hasComments == true){
			$this->comments = '';
		}
		
		if ($this->hasSummary == true){
			$this->summary = '';
		}
		
		if ($this->hasNotes == true){
			$this->notes = '';
		}
		
		if ($this->hasHighlight == true){
			$this->highlightStyle = 'none';
		}
		
		if ($this->hasCreated == true){
			$this->created = '';	
		}
		
		if ($this->hasUpdated == true){
			$this->updated = '';
		}
		
		if ($this->hasStarted == true){
			$this->started = '';	
		}
		
		if ($this->hasReported == true){
			$this->reported = '';
		}
		
		if ($this->hasReviewed == true){
			$this->reviewed = 'no';	
		}
		if ($this->hasApproved == true){
			$this->approved = 'no';
		}
		
		if ($this->hasType == true){
			$this->idType = 0;
			$this->nameType = '';
		}
		
		if ($this->hasParent == true){
			$this->idParent = 0;
			$this->nameParent = '';
		}
		
		if ($this->hasLocation == true){
			$this->idLocation = 0;
			$this->nameLocation = '';
		}
    
    	if ($this->hasProject == true){
			$this->idProject = 0;
			$this->nameProject = '';
		}
		
    	if ($this->hasTask == true){
			$this->idTask = 0;
			$this->nameTask = '';
		}
		
		   if ($this->hasActivity == true){
			$this->idActivity = 0;
			$this->nameActivity = '';
		}
		
		
    }
    
	public function setRow($row){
		$this->reset;
		$this->id = $row["id"];
		$this->name = ($row["name"]);
		
		//if ($this->description->useRow == true){
			$this->description->fetch($row,"description");
		//}
		
		if ($this->hasNotes == true){
			$this->notes = ($row["notes"]);
		}
		
		if ($this->hasComments == true){
			$this->comments = ($row["comments"]);
		}
		
		if ($this->hasSummary == true){
			$this->summary = ($row["summary"]);
		}
		
		if ($this->hasHighlight == true){
			$this->highlightStyle = ($row["highlight_style"]);
		}
		
		if ($this->hasDisplayOrder == true){
			$this->displayOrder = ($row["display_order"]);
		}
		
		if ($this->hasStarted == true){
			$this->started = ($row["started"]);		
		}			
		if ($this->hasReported == true){
			$this->reported = ($row["reported"]);		
		}
		
		if ($this->hasReviewed == true){
			$this->reviewed = ($row["reviewed"]);		
		}			
		if ($this->hasApproved == true){
			$this->approved = ($row["approved"]);		
		}
		if ($this->hasCreated == true){
			$this->created = ($row["created"]);		
		}			
		if ($this->hasUpdated == true){
			$this->updated = ($row["updated"]);		
		}
		
		if ($this->hasType == true){
			$this->idType = ($row["type_id"]);
			$this->nameType = $row["type_name"];
		}
		if ($this->hasParent == true){
			$this->idParent = $row["parent_id"];
			$this->nameParent = $row["parent_name"];
		}
		if ($this->hasLocation == true){
			$this->idLocation = $row["location_id"];
			$this->nameLocation = ($row["location_name"]);
		}
		if ($this->hasProject == true){
			$this->idProject = $row["project_id"];
			$this->nameProject = $row["project_name"];
		}
		if ($this->hasTask == true){
			$this->idTask = $row["task_id"];
			$this->nameTask = $row["task_name"];
		}
		
		if ($this->hasActivity == true){
			$this->idActivity = $row["activity_id"];
			$this->nameActivity = $row["activity_name"];
		}
	}
	
	public function defaults(){
		$this->reset;
		//set doneby
		//set started or reported
		
	}
	
	
	public function format(){
		$this->name = $this->formatText($this->name,true);
		$this->description->format();
		// = $this->formatText($this->description->value,$this->description->useRow);
		$this->notes = $this->formatText($this->notes,$this->hasNotes);
		$this->summary = $this->formatText($this->summary,$this->hasSummary);
		$this->comments = $this->formatText($this->comments,$this->hasComments);
		$this->created = $this->formatDate($this->created,$this->hasCreated);
		$this->updated = $this->formatDate($this->updated,$this->hasUpdated);
		$this->started = $this->formatDate($this->started,$this->hasStarted);
		$this->reported = $this->formatDate($this->reported,$this->hasReported);
		$this->reviewed = $this->formatDate($this->reviewed,$this->hasReviewed);
		$this->approved = $this->formatDate($this->approved,$this->hasApproved);
	}
	
	public function listHeading(){
		//$this->resetContent(true);
		$this->listTh('Id',true,true);
		$this->listTh('Order', listDisplayOrder);
		$this->listTh('Name',true);
		
		$this->listTh('Description',$this->description->showList);
		$this->listTh('Notes',$this->listNotes);
		$this->listTh('Summary',$this->listSummary);
		$this->listTh('Comments',$this->listComments);
		
		$this->listTh('Type',$this->listType);
		$this->listTh('Location',$this->listLocation);
		
		$this->listTh('Project',$this->listProject);
		$this->listTh('Task',$this->listTask);
		$this->listTh('Activity',$this->listActivity);
		
		$this->listTh('Parent',$this->listParent);
		
		$this->listTh('Created',$this->listCreated);
		$this->listTh('Updated',$this->listUpdated);
		$this->listTh('Started',$this->listStarted);
		$this->listTh('Reported',$this->listReported);
		$this->listTh('Reviewed',$this->listReviewed);
		$this->listTh('Approved',$this->listApproved);
		
		$this->listTh('Highlight',$this->listHighlight);
		return $this->getContent();
	}
	
	public function listDetail(){
		$this->format();
		
		//$this->resetContent(true);
		$this->listTd($this->id,true,true);
		$this->listTd($this->displayOrder,$this->listDisplayOrder);
		$this->listTd($this->name,true);
		
		$this->listTd($this->description->value,$this->description->showList);
		$this->listTd($this->notes,$this->listNotes);
		$this->listTd($this->comments,$this->listComments);
		$this->listTd($this->summary,$this->listSummary);
		
		
		
		$this->listTd($this->nameType,$this->listType);
		$this->listTd($this->nameLocation,$this->listLocation);
		
		$this->listTd($this->nameProject,$this->listProject);
		$this->listTd($this->nameTask,$this->listTask);
		$this->listTd($this->nameActivity,$this->listActivity);
				
		$this->listTd($this->nameParent,$this->listParent);
		
		$this->listTd($this->created,$this->listCreated);
		$this->listTd($this->updated,$this->listUpdated);
		$this->listTd($this->started,$this->listStarted);
		$this->listTd($this->reported,$this->listReported);
		$this->listTd($this->reviewed,$this->listReviewed);
		$this->listTd($this->approved,$this->listApproved);
		
		$this->listTd($this->highlightStyle,$this->listHighlight);
		return $this->getContent();

	}

	public function display(){
		$this->format();
		
		$this->resetContent(true);
		$this->detailPara('Order',$this->displayOrder,$this->hasDisplayOrder);
		$this->detailPara('Id',$this->id,true);
		$this->detailPara('Name',$this->name,true);
		
		$this->detailPara('Description',$this->description->value,$this->description->showDisplay);
		$this->detailPara('Summary',$this->summary,$this->hasSummary);
		$this->detailPara('Notes',$this->notes,$this->hasNotes);
		$this->detailPara('Comments',$this->comments,$this->hasComments);
		
		$this->detailPara('Type',$this->nameType,$this->hasType);
		$this->detailPara('Location',$this->nameLocation,$this->hasLocation);
		
		$this->detailPara('Project',$this->nameProject,$this->hasProject);
		$this->detailPara('Task',$this->nameTask,$this->hasTask);
		$this->detailPara('Activity',$this->nameActivity,$this->hasActivity);
		
		
		$this->detailPara('Parent',$this->nameParent,$this->hasParent);
		
		$this->detailPara('Created',$this->created,$this->hasCreated);
		$this->detailPara('Updated',$this->updated,$this->hasUpdated);
		
		$this->detailPara('Started',$this->started,$this->hasStarted);
		$this->detailPara('Reported',$this->reported,$this->hasReported);
		$this->detailPara('Reviewed',$this->reviewed,$this->hasReviewed);
		$this->detailPara('Approved',$this->approved,$this->hasApproved);
		
		$this->detailPara('Highlight',$this->highlightStyle,$this->hasHighlight);
		return $this->getContent();
		
	}
	

	
	public function getPostVars(){
	
		$this->id = $this->postVar('id',0);
		$this->name = $this->postString('name');
		
		if ($this->hasDisplayOrder == true){
			$this->displayOrder = $this->postString('displayOrder');
		}
		
		if ($this->description->usePost == true){
			$this->description->post('description');
		}
		
		if ($this->hasNotes == true){
			$this->notes = $this->postString('notes');
		}
		
		if ($this->hasComments == true){
			$this->comments = $this->postString('comments');
		}
		
		if ($this->hasSummary == true){
			$this->summary = $this->postString('summary');
		}
		if ($this->hasStarted == true){
			$this->started = $this->postDate('started');
		}
		
		if ($this->hasReported == true){
			$this->reported = $this->postDate('reported');
		}
		
		if ($this->hasReviewed == true){
			$this->reviewed = $this->postDate('reviewed');
		}
		
		if ($this->hasApproved == true){
			$this->approved = $this->postDate('approved');
		}
		
		if ($this->hasHighlight == true){
			$this->highlightStyle = $this->postString('highlightStyle');
		}
		if ($this->hasType == true){
		$this->idType = $this->postVar('idType',0);
		}
		if ($this->hasLocation == true){
		$this->idLocation = $this->postVar('idLocation',0);
		}
		if ($this->hasParent == true){
		$this->idParent = $this->postVar('idParent',0);
		}
		if ($this->hasProject == true){
		$this->idProject = $this->postVar('idProject',0);
		}
		if ($this->hasTask == true){
		$this->idTask = $this->postVar('idTask',0);
		}
		if ($this->hasActivity == true){
		$this->idActivity = $this->postVar('idActivity',0);
		}
		
		
		
				
	}
}



?>
