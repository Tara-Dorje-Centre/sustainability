<?php 


 interface IentityField{
 	//public function __construct($dbColumn = 'not-used', $postVariable = 'notUsed');
 	public function set($value);
 	public function reset($default = NULL);
 	public function get();
   	public function value();
	public function setShow($caption, $list = true);
	public function setFetch($dbColumn);
	public function fetch($row);
	public function th();
 	public function td();
 	public function p();
 	public function post();
 	public function format();
 }
 
 abstract class _field implements IentityField{
 	protected $valueNumber = 0;
 	protected $valueText = '';
 	protected $valueDate = '';
 	protected $type = 'NUMBER';
 	protected $caption = 'caption';
 	protected $dbColumn = 'not-used';
 	protected $postVariable = 'notUsed';
 	protected $useRow = false;
 	protected $usePost = false;
 	protected $showList = false;
 	protected $showDisplay = false;
 
 	public function __construct($dbColumn = 'not-used', $postVariable = 'notUsed'){
 		if ($dbColumn != 'not-used'){
 			$this->setFetch($dbColumn);
 		}
 		if ($postVariable != 'notUsed'){
 			$this->setPost($postVariable);
 		}
 	}
 
	public function set($value){
		switch ($this->type) {
    		case 'NUMBER':
 				$this->valueNumber = $value;
        		break;
    		case 'DATE':
 		 		$this->valueDate = $value;
        		break;
    		case 'TEXT':
 		 		$this->valueText = $value;
        		break;
    		default:
 		 		$this->valueText = $value;
		}
	}
 
 	public function value(){
 		return $this->get();
 	}
 
	public function get(){
	
		switch ($this->type) {
    		case 'NUMBER':
 				$val = $this->valueNumber;
        		break;
    		case 'DATE':
 		 		$val = $this->valueDate;
        		break;
    		case 'TEXT':
 		 		$val = $this->valueText;
        		break;
    		default:
 		 		$val = $this->valueText;
		}
	}
	
 
 	public function reset($default = NULL){
 		if ($this->canSet == true){
 			$this->set($default);
 		}
 
 	}
 
 	public function setShow($caption, $list = true){
		$this->caption = $caption;
		$this->showList = $list;
		$this->showDisplay = true;
 	} 
 
	public function setFetch($dbColumn){
		$this->useRow = true;
		$this->dbColumn = $dbColumn;
	}
 
	public function setPost($postVariable){
		$this->usePost = true;
		$this->postVariable = $postVariable;
	}
 
 	protected function canSet(){
 		if (($this->useRow == true) or ($this->usePost == true)){
   		$can = true;
   		} else {
   		$can = false;
   		}
   		return $can;
	}
 
	protected function canShow(){
 		if (($this->showList == true) or ($this->showDisplay == true)){
   			$can = true;
   		} else {
   			$can = false;
   		}
   		return $can;
	}
 
	public function fetch($row){
		if ($this->useRow == true){
 			$this->set($row[$this->dbColumn]);
 		}
	}

	public function th(){
		if ($this->showList == true){
 			$value = wrapTh($this->caption);
 		} else {
 			$value = '';
		}
		return $value;
 	}
 	
 	public function td(){
 		if ($this->showList == true){
  		//$this->format();
 			$value = wrapTd($this->value());
  		} else {
  			$value = '';
  		}
 		return $value;
 	}

 	public function p(){
 		if ($this->showDisplay == true){
 			//$this->format();
 			$value = para($this->caption,$this->value());
 		} else {
 			$value = '';
 		}
 		return $value;
 	}
 		
	public function post(){
  		if ($this->usePost() == true){
			switch ($this->type) {
    			case 'NUMBER':
 					$this->valueNumber = $_POST[$this->postVariable];
        			break;
    			case 'DATE':
 		 			$this->valueDate = getTimestampPostValues($this->postVariable);
        			break;
    			case 'TEXT':
 		 			$this->valueText = dbEscapeString($_POST[$this->postVariable]);
        			break;
    			default:
 		 			$this->valueText = dbEscapeString($_POST[$this->postVariable]);
			}
 		}
	}
 
 	public function format(){
 		if ($this->canShow() == true){
 			switch ($this->type) {
    			case 'NUMBER':
  					if ($this->valueNumber == ''){
  					$this->valueNumber = 0;
  					}
        			break;
    			case 'DATE':
  		  			$this->valueDate = getTimestampDate($this->valueDate);
        			break;
    			case 'TEXT':
  		  			$this->valueText = displayLines($this->valueText);
        			break;
    			default:
  		  			$this->valueText = displayLines($this->valueText);
			}
  
 		}
 	}
 	
	public function input($entity,$inputType){
	
		switch ($this->inputType){
		
			case 'TEXT':
			$inputField = $this->inputAsText($entity);
			break;
			
			case 'NUMBER':
			$inputField = $this->inputAsNumber($entity);
			break;
			
			case 'HIDDEN':
			$inputField = $this->inputHidden();
			break;
			
			case 'NAME':
			$inputField = $this->inputAsName($entity);
			break;
			
			case 'DESCRIPTION':
			$inputField = $this->inputAsDescription($entity);
			break;
			
			case 'COMMENTS':
			$inputField = $this->inputAsComments($entity);
			break;
			
			case 'NOTES':
			$inputField = $this->inputAsNotes($entity);
			break;

			default:
			$inputField = $this->inputAsText($entity);
		}
		return $inputField;
	
	}
	
	public function inputAsText($entity){
		return inputFieldText($entity,$this->value(),$this->postVariable,$this->caption);
	}
	public function inputAsDescription($entity){
		return inputFieldDescription($entity,$this->value(),$this->postVariable,$this->caption);
	}
	public function inputAsNotes($entity){
		return inputFieldNotes($entity,$this->value(),$this->postVariable,$this->caption);
	}
	public function inputAsComments($entity){
		return inputFieldComments($entity,$this->value(),$this->postVariable,$this->caption);
	}
	public function inputAsName($entity){
		return inputFieldName($entity,$this->value(),$this->postVariable,$this->caption);
	}
	
	public function inputAsNumber($entity){
		return inputFieldNumber($entity,$this->value(),$this->postVariable,$this->caption);
	}
	
	public function inputHidden(){
		return getHiddenInput($this->postVariable, $this->value());
	}
 	
}

class _textField extends _field{
	public function __construct($dbColumn = 'not-used', $postVariable = 'notUsed'){
		parent::__construct($dbColumn, $postVariable);
		$this->type = 'TEXT';
	}
	
	
	
}
class _numberField extends _field{
	public function __construct($dbColumn = 'not-used', $postVariable = 'notUsed'){
		parent::__construct($dbColumn, $postVariable);
		$this->type = 'NUMBER';
	}
}

class _dateField extends _field{
	public function __construct($dbColumn = 'not-used', $postVariable = 'notUsed'){
		parent::__construct($dbColumn, $postVariable);
		$this->type = 'DATE';
	}

}
 
class _idNameField implements  IentityField{
	public $id;
	public $name;
	
	public function __construct($dbColumnId = 'entity_id', $postVariable = 'idEntity', $dbColumnName = 'entity_name'){
		$this->id = new _numberField($dbColumnId, $postVariable);
		$this->name = new _textField($dbColumnName);
	}
	
	public function set($value){
	 	$this->id->set($value);
	}
 	public function reset($default = NULL){
 		$this->id->reset(0);
 	 	$this->name->reset('');
 	}
 	public function get(){
 	   	return $this->id->get();
 	}
   	public function value(){
   		return $this->id->value();
   	}
	public function setShow($caption, $list = true){
		$this->name->setShow($caption,$list);
	}
	public function setFetch($dbColumn){
	//,$dbColumnName){
		$this->id->setFetch($dbColumn);
		//$this->name->setFetch($dbColumnName);
	}
	public function setFetchName($dbColumnName){
	//,$dbColumnName){
		//$this->id->setFetch($dbColumn);
		$this->name->setFetch($dbColumnName);
	}
	public function fetch($row){
		$this->id->fetch($row);
		$this->name->fetch($row);
	}
	public function tH(){
		return $this->name->tH();
	}
	
 	public function tD(){
 		return $this->name->tD();
 	}
 	public function p(){
 		return $this->name->p();
 	}
 	public function post(){
 		$this->id->post();
 	}
 	public function format(){
 	$this->name->format();
 	}
}
 
?>
