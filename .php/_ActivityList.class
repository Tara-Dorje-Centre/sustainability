<?php 

class ActivityList extends __EntityList{
	protected $__MyClassName = 'ActivityList';

	public $myActivity = 'NO';
	
	
	
	public $task;
	private $sql;
	
	public function __construct($mode = 'VIEW', $id = 0, $idParent = 0){
		parent::__construct($mode, $id, $idParent);
		$this->task = new Task($this->pageMode, $this->idParent);
		$this->sql = new ActivitySQL;	
	}
	
	public function setMyActivity($myActvity = 'NO'){
		$this->myActivity = $myActivity;
	}
	
	public function setDetails(){
	
   		$this->echoState(true, 'setDetails');
		$this->task->setDetails();
		$this->setFoundCount();
	}


	protected function setPageTitle(){
		
		$title = '';
		if ($this->myActivity == 'NO'){
			$title .= $this->task->project->name.br();
			$title .= 'Task: '.$this->task->name;
		} elseif ($this->myActivity == 'GROUP') {
			$title .= 'Group Activity History';
		} elseif ($this->myActivity == 'YES') {
			$title .= $_SESSION['login-name'].spacer(4).'Activity History';
		} elseif ($this->myActivity == 'PROJECT') {
			$title .= 'All Project Activity:'.spacer(2).$this->task->project->name;
		}

		$this->_pageTitle = $title;	
	}	

	protected function setPageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';
		
		$projectL = new ProjectLinks($menuType,$menuStyle);
		$taskL = new TaskLinks($menuType,$menuStyle);
		$activityL = new ActivityLinks($menuType,$menuStyle);
					
		$menu = $activityL->openMenu('section-heading-links');
		
		if ($this->myActivity == 'NO' && $this->showCalendar == 'NO'){
		//normal task activity list menu
			$menu .= $activityL->detailAddHref($this->task->id);
			$menu .= $activityL->listingHref($this->task->id);
			$menu .= $activityL->resetMenu();	
			$menu .= $taskL->detailViewHref($this->task->id);
			$menu .= $projectL->detailViewHref($this->task->project->id);				

		} elseif ($this->myActivity == 'YES' || $this->myActivity == 'GROUP') {			
			$menu .= $activityL->linkMyCalendar();
			$menu .= $activityL->linkGroupCalendar();
			$menu .= $activityL->resetMenu();
			$menu .= $activityL->linkMyActivities();
			$menu .= $activityL->linkGroupActivities();
		} elseif ($this->myActivity == 'PROJECT') {
			//showing project activities
			$menu .= $projectL->detailViewHref($this->task->project->id);
			$menu .= $projectL->listingHref('OPEN','Projects');
			$menu .= $activityL->resetMenu();				
			$menu .= $activityL->linkProjectCalendar($this->task->project->id);									
			$menu .= $activityL->linkProjectActivities($this->task->project->id);
			$menu .= $activityL->resetMenu();
			$menu .= $taskL->detailAddHref($this->task->project->id);
		}
		
		$menu .= $activityL->closeMenu();	
		$this->_pageMenu = $menu;			
	}	
	
	private function getActivityDoneBy(){
			if ($this->myActivity == 'YES'){
				$doneBy = $_SESSION['login-name'];
			} elseif ($this->myActivity == 'GROUP') {
				$doneBy = 'EVERYONE';
			}
			return $doneBy;		
	}

	public function setFoundCount(){
		if ($this->myActivity == 'NO'){
			$sql = $this->sql->countActivityByTask($this->task->id);
		} else {
			if ($this->myActivity == 'YES' || $this->myActivity == 'GROUP'){
				$sql = $this->sql->countActivityByDoneBy($this->getActivityDoneBy());
			} elseif ($this->myActivity == 'PROJECT') {
				$sql = $this->sql->countProjectActivity($this->task->project->id);
			}
		}
		$this->found = dbGetCount($sql, 'total_activities');
	}

	private function getCalendarLinks(){
		$l = new ActivityLinks('DIV','paged');
		$baseUrl = $l->listing(-1,$this->myActivity,$this->showCalendar,$this->task->project->id);
		$links = $l->openMenu('calendar-links');
				
		$this->prevCalendarLink = '';
		$this->nextCalendarLink = '';
		$foundCurrent = false;
		$foundNext = false;
				
		if ($this->myActivity == 'PROJECT') {
			$sql = $this->sql->calendarLinksProjectActivity($this->task->project->id);
		} else {
			$sql = $this->sql->calendarLinksMyActivity($this->getActivityDoneBy());			
		}

		$result = dbGetResult($sql);
		if($result){
	  	while ($row = $result->fetch_assoc())
		{	
			$month = $row["month"];
			$year = $row["year"];
			$caption = $year.'-'.$month;
			if ($year == $this->year && $month == $this->month){
				//skip link and show caption if link for current display monthyear
				$link = span($caption,$l->cssItem.'-current');
				$foundCurrent = true;
			} else {
				$link = $l->formatCalendarHref($caption,$baseUrl,$year,$month);
				if ($foundCurrent == false){
					$this->prevCalendarLink = $l->formatCalendarHref('Previous',$baseUrl,$year,$month);
				} else {
					if ($foundNext == false){
						$this->nextCalendarLink = $l->formatCalendarHref('Next',$baseUrl,$year,$month);
						$foundNext = true;
					}
				}
			}
			$links .= $link;
		}
		$result->close();
		}
		
		$links .= $l->closeMenu();
		return $links;
	}

	public function getProjectActivityCalendar(){
		$pl = new ProjectLinks();
		$tl = new TaskLinks();
		$title = 'Project Activities';

		$cal = new _Calendar($this->year,$this->month,$title);
		$sql = $this->sql->calendarSummaryProjectActivity($this->task->project->id,$this->year,$this->month);
		
		$result = dbGetResult($sql);
		if($result){
	  	while ($row = $result->fetch_assoc())
		{	
			$sumHours = $row["sum_hours"];
			$started = $row["started"];
			$taskId = $row['id'];
			$taskName = ($row['name']);
			$doneBy   = ($row['done_by']);
			//highlight scheduled but incomplete activities
			if ($sumHours == 0){
				$highlightStyle = 'highlight-yellow';
			} else {
				$highlightStyle = $row['highlight_style'];
			}
			$taskLink = $tl->detailViewHref($taskId,$taskName);

			$calendarItem = $doneBy.spacer().$taskLink;
			//	$calendarItem = $sumHours.spacer().$taskLink;
			$cal->addItemByTimestamp($started,$calendarItem,$highlightStyle);
		}
		$result->close();
		}

		$content = openDiv('my-calendar');
		$links = $this->getCalendarLinks();	
		$content .= $links;		
		$cal->setLinks($this->nextCalendarLink, $this->prevCalendarLink);			
		$content .= $cal->buildCalendar();
		$content .= closeDiv();
		return $content;		
	}
	
	public function getGroupActivityCalendar(){
		$pl = new ProjectLinks();

		$title = 'Group Activities';

		$cal = new _Calendar($this->year,$this->month,$title);

		$sql = $this->sql->calendarSummaryMyActivity($this->getActivityDoneBy(),$this->year,$this->month);
		
		$result = dbGetResult($sql);
		if($result){
	  	while ($row = $result->fetch_assoc())
		{	
			$sumHours = $row["sum_hours"];
			$started = $row["started"];
			$projectId = $row['id'];
			$projectName = ($row['name']);
			$doneBy = $row['done_by'];
			if ($sumHours == 0){
				$highlightStyle = 'highlight-yellow';
			} else {
				$highlightStyle = $row['highlight_style'];
			}
			//projectId = 0 is monthly summary record
			if ($projectId != 0){
				$projectLink = $pl->detailViewHref($projectId,$projectName);
				$calendarItem = $doneBy.spacer().$projectLink;				
			} else {
				$projectLink = $projectName;
				$calendarItem = $sumHours.spacer().$doneBy;				
			}
			
			$cal->addItemByTimestamp($started,$calendarItem,$highlightStyle);

		}
		$result->close();
		}

		$content = openDiv('group-calendar');
		$links = $this->getCalendarLinks();		
		$content .= $links;
		$cal->setLinks($this->nextCalendarLink, $this->prevCalendarLink);			
		$content .= $cal->buildCalendar();
		$content .= closeDiv();
		return $content;		
	}

	public function getMyActivityCalendar(){

		$pl = new ProjectLinks();
		$title = 'My Activities'.spacer(4).$this->getActivityDoneBy();
		$cal = new _Calendar($this->year,$this->month,$title);

		$sql = $this->sql->calendarSummaryMyActivity($this->getActivityDoneBy(),$this->year,$this->month);

		$result = dbGetResult($sql);
		if($result){
	  	while ($row = $result->fetch_assoc())
		{	
			$sumHours = $row["sum_hours"];
			$started = $row["started"];
			$projectId = $row['id'];
			$projectName = stripslashes($row['name']);
			$doneBy = $row['done_by'];
			if ($sumHours == 0){
				$highlightStyle = 'highlight-yellow';
			} else {
				$highlightStyle = $row['highlight_style'];
			}

			if ($projectId != 0){
				$projectLink = $pl->detailViewHref($projectId,$projectName);
			} else {
				$projectLink = $projectName;
			}
			$calendarItem = $sumHours.spacer().$projectLink;
			$cal->addItemByTimestamp($started,$calendarItem,$highlightStyle);

		}
		$result->close();
		}

		$content = openDiv('my-calendar');
		$links = $this->getCalendarLinks();		
		$content .= $links;
		$cal->setLinks($this->nextCalendarLink, $this->prevCalendarLink);					
		$content .= $cal->buildCalendar();
		$content .= closeDiv();
		return $content;		
	}

	public function getCalendar(){
	
		if ($this->myActivity == 'PROJECT'){
			$calendar = $this->getProjectActivityCalendar();
		} elseif ($this->myActivity == 'GROUP'){
			$calendar = $this->getGroupActivityCalendar();
		} else {
			$calendar = $this->getMyActivityCalendar();
		}
		return $calendar;
		
	}
	
	
	public function getPageDetails(){
		if ($this->showCalendar == 'YES'){
			$content = $this->getCalendar();
		} else {
			$content = $this->getListing();
		}
		return $content;
	}

	public function getListing($pagingBaseLink = 'USE_LISTING'){
				
		$activityL = new ActivityLinks('DIV','menu');
		$taskL = new TaskLinks('DIV','menu');
		$projectL = new ProjectLinks('DIV','menu');
		
		if ($pagingBaseLink == 'USE_LISTING'){
			$base = $activityL->listing($this->task->id,$this->myActivity,$this->showCalendar,$this->task->project->id);
		} else { 
			$base = $pagingBaseLink;
		}
		$pagingLinks = $activityL->listingPaged($base,$this->found,$this->resultPage,$this->perPage);				
		
			$a = new Activity('ADD', 0, $this->task->id);
			$a->setDetails();
			
			$quickEdit = $a->editForm('ActivityList.MyActivity='.$this->myActivity);
		
		$list = openDisplayList('activity','Activities', $pagingLinks, $quickEdit);

		$heading = '';
		if ($this->myActivity != 'NO'){
			if ($this->myActivity != 'PROJECT'){
				$heading .= wrapTh('Project');
			}
			$heading .= wrapTh('Task');
		}
		//$heading .=  wrapTh('Order');
		$heading .=  wrapTh('Done By');
		$heading .=  wrapTh('Started');
		$heading .=  wrapTh('Effort Actual');
		$heading .= wrapTh('Comments');
		$heading .=  wrapTh('Links');
		$list .=  wrapTr($heading);
		
		if ($this->myActivity == 'NO'){
			$sql = $this->sql->listTask($this->task->id,$this->resultPage,$this->perPage);
		} elseif ($this->myActivity == 'PROJECT'){
			$sql = $this->sql->listProject($this->task->project->id,$this->resultPage,$this->perPage);	
		} else {
			$sql = $this->sql->listByDoneBy($this->getActivityDoneBy(),$this->resultPage,$this->perPage);			
		}
		
		$result = dbGetResult($sql);
		if($result){
	  	while ($row = $result->fetch_assoc())
		{	
			$a = new Activity;
			$a->id = $row["id"];
			$a->task->id = $row["task_id"];
			$a->task->name = stripslashes($row["task_name"]);
			$a->task->project->id = $row["project_id"];
			$a->task->project->name = ($row["project_name"]);
			//$a->order = $row["activity_order"];
			$a->doneBy = $row["done_by"];
			$a->started = $row["started"];
			$a->updated = $row["updated"];
			$a->hoursActual =$row["hours_actual"]; 			
			$a->comments = ($row["comments"]);
			$a->linkText = ($row["link_text"]);
			$a->linkUrl = ($row["link_url"]);
						
			$a->formatForDisplay();

			$detail = '';
			if ($this->myActivity != 'NO'){
				$taskLink = $taskL->detailViewHref($a->task->id,$a->task->name);
				$detail .=  wrapTd($taskLink);
				
				if ($this->myActivity != 'PROJECT'){
				$projectLink = $projectL->detailViewHref($a->task->project->id,$a->task->project->name);				
				$detail .=  wrapTd($projectLink);
				}
				$cssRow = $row['highlight_style'];
			} else {
				$cssRow = 'none';
			}
			if ($a->hoursActual == 0){
				$cssRow = 'highlight-yellow';
			} 
						
			$link = $activityL->detailViewEditHref($a->id,$a->doneBy);
			$detail .=  wrapTd($link);
//			$detail .=  wrapTd($a->doneBy);
			$detail .=  wrapTd($a->started);
			$detail .=  wrapTd($a->hoursActual);
			$detail .=  wrapTd($a->comments);
			
			if ($a->linkText != '' && $a->linkUrl != ''){
				$link = $activityL->formatHref($a->linkText,$a->linkUrl,'_blank');
				$detail .= wrapTd($link);
			} else {
				$detail .= wrapTd(spacer());
			}

			$list .=  wrapTr($detail,$cssRow);
		}
		$result->close();
		}

		$list .= closeDisplayList();
		return $list;		
	}
}
?>
