<?php 

class ActivitySQL implements IentitySQL{
protected function cols(){
$c = " a.id,  ";
$c .= " a.task_id,  ";
$c .= " a.type_id, ";
$c .= " t.name task_name, ";
$c .= " t.project_id, ";
$c .= " p.name project_name, ";
$c .= " a.done_by,  ";
$c .= " a.started,  ";
$c .= " a.updated,  ";
//$c .= " a.activity_order,  ";
//$c .= " a.hours_estimated,  ";
$c .= " a.hours_actual,  ";
$c .= " a.comments, ";
$c .= " a.link_url, ";
$c .= " a.link_text, ";
$c .= " pt.highlight_style ";	
return $c;	
}

public function info($id = 0){
$q = " SELECT  ";
$q .= $this->cols();
$q .= $this->tables();
$q .= " WHERE  ";
$q .= " a.id = '".$id."' ";
return $q;
}

public function listTask($taskId = 0, $page = 10, $rows = 10){
$q = " SELECT  ";
$q .= $this->cols();
$q .= $this->tables();
$q .= " WHERE  ";
$q .= " a.task_id = '".$taskId."' ";
$q .= " ORDER BY ";
$q .= " a.started desc, a.activity_order, a.id ";
$q .= sqlLimitClause($page, $rows);
return $q;
}

public function countTask($taskId){
$q = " SELECT  ";
$q .= " COUNT(*) total_activities";
$q .= $this->tables(false);
$q .= " WHERE  ";
$q .= " a.task_id = '".$taskId."' ";
return $q;
}


protected function colsSummary(){
$q = " COUNT(*) total_activities, ";
$q .= " SUM(a.hours_estimated) total_hours_estimated, ";
$q .= " SUM(a.hours_actual) total_hours_actual ";
return $q;
}
public function summaryTask($taskId){
$q = " SELECT  ";
$q .= $this->colsSummary();
$q .= $this->tables(false);
$q .= " WHERE  ";
$q .= " a.task_id = '".$taskId."' ";
return $q;
}

public function listDoneBy($doneBy, $resultPage, $rowsPerPage){
$q = " SELECT  ";
$q .= $this->cols();
$q .= $this->tables();
$q .= " WHERE p.show_always != 'no' ";
if ($doneBy != 'EVERYONE'){
	$q .= " AND UPPER(a.done_by) = UPPER('".$doneBy."') ";	
} 
$q .= " ORDER BY ";
$q .= " a.started desc, a.id ";
$q .= sqlLimitClause($resultPage, $rowsPerPage);
return $q;
}

public function countDoneBy($doneBy){
$q = " SELECT  ";
$q .= " COUNT(*) total_activities  ";
$q .= $this->tables();
$q .= " WHERE p.show_always != 'no' ";
if ($doneBy != 'EVERYONE'){
	$q .= " AND UPPER(a.done_by) = UPPER('".$doneBy."') ";
}
return $q;
}

public function calendarSummaryMyActivity($doneBy, $year, $month){
$q = "SELECT  ";
$q .= " SUM(a.hours_actual) sum_hours, ";
$q .= " DATE(a.started) started, ";
$q .= " MONTH(a.started) month, ";
$q .= " YEAR(a.started) year, ";
$q .= " a.done_by, ";
$q .= " p.id, ";
$q .= " min(p.name) name, ";
$q .= " 1 ordering, ";
$q .= " min(pt.highlight_style) highlight_style ";
$q .= $this->tables();
$q .= " WHERE p.show_always != 'no'  ";
if ($doneBy != 'EVERYONE'){
	$q .= " AND UPPER(a.done_by) = UPPER('".$doneBy."') ";
}
$q .= " AND MONTH(a.started) = '".$month."'  ";
$q .= " AND YEAR(a.started) = '".$year."'  ";
$q .= " GROUP BY  ";
$q .= " DATE(a.started), ";
$q .= " a.done_by, ";
$q .= " p.id ";
$q .= " UNION ALL ";
$q .= " SELECT  ";
$q .= " SUM(a.hours_actual) sum_hours, ";
$q .= " LAST_DAY(a.started) started, ";
$q .= " MONTH(a.started) month, ";
$q .= " YEAR(a.started) year, ";
$q .= " 'MonthTotal' done_by, ";
$q .= " 0 id, ";
$q .= " 'MonthTotal' name, ";
$q .= " 100 ordering, ";
$q .= " 'highlight-yellow' highlight_style ";
$q .= $this->tables();
$q .= " WHERE  ";
$q .= " p.show_always != 'no'  ";
if ($doneBy != 'EVERYONE'){
	$q .= " AND UPPER(a.done_by) = UPPER('".$doneBy."') ";
}
$q .= " AND MONTH(a.started) = '".$month."'  ";
$q .= " AND YEAR(a.started) = '".$year."'  ";
$q .= " GROUP BY ";
$q .= " LAST_DAY(a.started) ";
//$q .= " a.done_by ";
$q .= " ORDER BY started, ordering, id, done_by ";
return $q;	
}

public function calendarLinksMyActivity($doneBy){
$q = "SELECT ";
$q .= " MONTH(a.started) month, ";
$q .= " YEAR(a.started) year ";
$q .= $this->tables(false);


$q .= " WHERE p.show_always != 'no'  ";
if ($doneBy != 'EVERYONE'){
	$q .= " AND UPPER(a.done_by) = UPPER('".$doneBy."') ";
}
$q .= " GROUP BY  ";
$q .= " YEAR(a.started), ";
$q .= " MONTH(a.started) ";
return $q;
}

public function listProject($projectId, $page = 1, $rows = 10){
$q = " SELECT  ";
$q .= $this->cols();
$q .= $this->tables();
$q .= " WHERE p.id = ".$projectId." ";
$q .= " ORDER BY ";
$q .= " a.started desc, a.id ";
$q .= sqlLimitClause($page, $rows);
return $q;
}

public function countProject($projectId){
$q = " SELECT  ";
$q .= " COUNT(*) total_activities  ";
$q .= $this->tables(false);
$q .= " WHERE p.id = ".$projectId." ";
return $q;
}

public function calendarSummaryProject($projectId, $year, $month){
//show daily tally by task and person
$q = "SELECT  ";
$q .= " SUM(a.hours_actual) sum_hours, ";
$q .= " DATE(a.started) started, ";
$q .= " MONTH(a.started) month, ";
$q .= " YEAR(a.started) year, ";
$q .= " a.done_by, ";
$q .= " t.id, ";
$q .= " min(t.name) name, ";
$q .= " min(t.task_order) ordering, ";
$q .= " min(tt.highlight_style) highlight_style ";
$q .= $this->tables();
$q .= " WHERE p.id = ".$projectId." ";
$q .= " AND MONTH(a.started) = '".$month."'  ";
$q .= " AND YEAR(a.started) = '".$year."'  ";
$q .= " GROUP BY  ";
$q .= " DATE(a.started), ";
$q .= " a.done_by, ";
$q .= " t.id ";
$q .= " UNION ALL ";
//show monthly tally for project across all tasks
$q .= " SELECT  ";
$q .= " SUM(a.hours_actual) sum_hours, ";
$q .= " LAST_DAY(a.started) started, ";
$q .= " MONTH(a.started) month, ";
$q .= " YEAR(a.started) year, ";
$q .= " SUM(a.hours_actual) done_by, ";
$q .= " t.id, ";
$q .= " t.name, ";
$q .= " 1000 + min(t.task_order) ordering, ";
$q .= " 'highlight-yellow' highlight_style ";
$q .= $this->tables();
$q .= " WHERE p.id = ".$projectId." ";
$q .= " AND MONTH(a.started) = '".$month."'  ";
$q .= " AND YEAR(a.started) = '".$year."'  ";
$q .= " GROUP BY ";
$q .= " LAST_DAY(a.started), ";
$q .= " t.id ";
$q .= " ORDER BY started, ordering, done_by ";
return $q;	
}

public function calendarLinksProject($projectId){
  $q = "SELECT ";
  $q .= " MONTH(a.started) month, ";
  $q .= " YEAR(a.started) year ";
$q .= $this->tables(false);
  $q .= " WHERE p.id = ".$projectId." ";
  $q .= " GROUP BY  ";
  $q .= " YEAR(a.started), ";
  $q .= " MONTH(a.started) ";
  return $q;
}


public function list($page = 1, $rows = 1){  

}

public function count(){

}

public function options($selectedId = 0, $disabled = 'false'){


}


}


?>
