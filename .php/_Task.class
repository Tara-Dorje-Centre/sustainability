<?php 

class Task extends __Entity{
protected $__MyClassName = 'Task';
    
	//public $locationId = 0;
	public $typeId = 0;
	public $highlightStyle = 'none';

	public $order = '0';
    public $name;	
    public $description;
    public $summary;
    public $started;
	public $updated;
    public $pctDone = 0;	
    public $hoursEstimated = 0;
    public $hoursActual = 0;
    public $hoursNotes;	
	public $materialsAuthProject = 'no';
	public $materialsAuthBy = '';
	public $receiptsAuthProject = 'no';
	public $receiptsAuthBy = '';
	public $project;
	private $sql;

	
	public $measureCount = 0;
	public $activityCount = 0;
	public $materialCount = 0;
	public $receiptCount = 0;
	public $costEstimated = 0;
	public $costActual = 0;	
	public $receiptCostActual = 0;
	public $resultsPageActivity = 1;
	public $resultsPageMeasure = 1;
	public $resultsPageMaterial = 1;
	public $resultsPageReceipt = 1;
	
	public function __construct($mode = 'VIEW', $id = 0, $idParent = 0){
		parent::__construct($mode, $id, $idParent);
		$this->project = new Project($this->pageMode, $this>idParent);
		$this->sql = new TaskSQL;
	}
	
	public function setDetails(){
   		$this->echoState('task.setDetails');
		
		$this->project->setDetails;
		
		if ($this->id > 0){
		
		if ($this->pageMode == 'COPY'){
			$this->copyTask();
		}
		
		$sql = $this->sql->info($this->id);
		$result = dbGetResult($sql);
		if ($result){
		while($row = $result->fetch_assoc())
		{	
			$this->project->id = $row["project_id"];
			$this->locationId = $row["location_id"];
			$this->typeId = $row["type_id"];
			$this->name = ($row["name"]);
			$this->description = ($row["description"]);
			$this->summary = ($row["summary"]);
			$this->started = $row["started"];	
			$this->updated = $row["updated"];
			$this->pctDone = $row["pct_done"];	
			$this->order = $row["task_order"];						
			$this->hoursEstimated = $row["hours_estimated"];
			$this->hoursActual = $row["hours_actual"];
			$this->hoursNotes = ($row["hours_notes"]);			
			$this->materialsAuthProject = $row["materials_auth_project"];
			$this->materialsAuthBy = ($row["materials_auth_by"]);
			$this->receiptsAuthProject = $row["receipts_auth_project"];
			$this->receiptsAuthBy = ($row["receipts_auth_by"]);

		}
		$result->close();
		}
		

		$this->setMeasureCount();
		$this->summarizeActivity();
		$this->summarizeMaterial();
		$this->summarizeReceipt();
		
		}
	}	
	

	
	public function setPagingDetails(
		$pageActivity = 1, 
		$pageMaterial = 1, 
		$pageMeasure = 1, 
		$pageReceipt = 1){

		$this->resultsPageMeasure = $pageMeasure;
		$this->resultsPageActivity = $pageActivity;
		$this->resultsPageMaterial = $pageMaterial;
		$this->resultsPageReceipt = $pageReceipt;
	}
	

	
		
	
	
	protected function setMeasureCount(){
		$s = new MeasureSQL;
		$sql = $s->countTask($this->id);
		$this->measureCount = dbGetCount($sql, 'total_measures', 0);
	}
	
	protected function summarizeActivity(){
		$s = new ActivitySQL;
		$sql = $s->summaryTask($this->id);
		
		$result = dbGetResult($sql);
		if ($result){
		while ($row = $result->fetch_assoc())
		{
			$this->activityCount = $row["total_activities"];	
			$this->hoursActual = $row["total_hours_actual"];
		}
		$result->close();
		}
		
		//if activity records with hours exist
		//update estimated effort to reflect current average of actual hours
		if ($this->activityCount > 0 && $this->hoursActual > 0){
			$this->hoursEstimated = round($this->hoursActual / $this->activityCount,2);
		}
	}

	protected function summarizeMaterial(){		
		$s = new MaterialSQL;
		$sql = $s->summaryTask($this->id);
		
		$result = dbGetResult($sql);
		if ($result){
		while ($row = $result->fetch_assoc())
		{
			$this->materialCount = $row["total_materials"];	
			$this->costActual = $row["sum_cost_actual"];
			$this->costEstimated = $row["sum_cost_estimated"];
		}
		$result->close();
		}
	}

	protected function summarizeReceipt(){		
		$s = new ReceiptSQL;
		$sql = $s->summaryTask($this->id);
		
		$result = dbGetResult($sql);
		if ($result){
		while ($row = $result->fetch_assoc())
		{
			$this->receiptCount = $row["total_receipts"];	
			$this->receiptCostActual = $row["sum_cost_actual"];
		}
		$result->close();
		}
	}

	
	protected function setPageTitle(){

		$title = $this->project->name.br();
		if ($this->pageMode != 'ADD'){
			$title .= 'Task: '.$this->name;
		} else {
			$title .= 'Add New Task.';
		}

		$this->_pageTitle = $title;	
	}
	
	
	
	protected function setPageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';
		
		$projects = new ProjectLinks($menuType,$menuStyle);
		$tasks = new TaskLinks($menuType,$menuStyle);
		$measures = new MeasureLinks($menuType,$menuStyle);
		$materials = new MaterialLinks($menuType,$menuStyle);
		$activities = new ActivityLinks($menuType,$menuStyle);	
		$receipts = new ReceiptLinks($menuType,$menuStyle);
		
		$menu = $projects->openMenu('section-heading-links');
		$menu .= $projects->detailViewHref($this->project->id);
		$menu .= $projects->resetMenu();

		if ($this->project->materialsCount > 0){
			$menu .= $materials->listingHref($this->id,'ProjectMaterials',$this->project->id,'PROJECT','yes');
			$menu .= $projects->resetMenu();
		}
		if ($this->project->receiptsCount > 0){
			$menu .= $receipts->listingHref($this->id,'ProjectReceipts',$this->project->id,'PROJECT','yes');
			$menu .= $projects->resetMenu();
		}
		
		if ($this->pageMode == 'VIEW'){
			$menu .= $tasks->detailEditHref($this->id);
			$menu .= $tasks->detailCopyHref($this->id);
		} elseif ($this->pageMode == 'EDIT') {
			//$menu .= $tasks->formatOptionsLink();
			$menu .= $tasks->detailViewHref($this->id);
		}		
		$menu .= $projects->resetMenu();

		if ($this->materialCount > 0){
			$menu .= $materials->listingHref($this->id,'TaskMaterials',0,'TASK');
			$menu .= $projects->resetMenu();
		}
		if ($this->receiptCount > 0){
			$menu .= $receipts->listingHref($this->id,'TaskReceipts',0,'TASK');
			$menu .= $projects->resetMenu();
		}

		if ($this->pageMode != 'ADD'){
			$menuStyle = 'button';
			$projects->setStyle($menuStyle);
			$activities->setStyle($menuStyle);
			$measures->setStyle($menuStyle);
			$materials->setStyle($menuStyle); 
			$receipts->setStyle($menuStyle);
			$menu .= $projects->resetMenu();
			$menu .= $activities->detailAddHref($this->id);
			$menu .= $measures->detailAddHref($this->id);
			$menu .= $materials->detailAddHref($this->id);
			$menu .= $receipts->detailAddHref($this->id);
		}
				
		$menu .= $projects->closeMenu();
		$this->_pageMenu = $menu;		
	}
	
	
	public function formatForDisplay(){
		$this->name = displayLines($this->name);
		$this->description = displayLines($this->description);
		$this->summary = displayLines($this->summary);
		$this->hoursNotes = displayLines($this->hoursNotes);
		
		$this->started = getTimestampDate($this->started);
		$this->updated = getTimestampDate($this->updated);
		
	}
		
	public function display(){
		$this->formatForDisplay();

		$detail = openDisplayDetails('task','Task Details');

		$detail .= captionedParagraph('order', 'Order', $this->order);
		$detail .= captionedParagraph('name', 'Name', $this->name);
		
		$l = new Location(OPTIONS);
		$select = $l->options($this->locationId,'locationId','true');
		$detail .= captionedParagraph('location','Location',$select);

		$tt = new TaskType(OPTIONS);
		$select = $tt->options($this->typeId,'typeId','true');
		$detail .= captionedParagraph('type','Task Type',$select);

		$detail .= captionedParagraph('description', 'Description', $this->description);
		$detail .= captionedParagraph('summary', 'Summary', $this->summary);	
		$detail .= captionedParagraph('effort-notes','Effort Notes', $this->hoursNotes);
		//$detail .= hr();
		$detail .= captionedParagraph('started', 'Started', $this->started);
		$detail .= captionedParagraph('updated', 'Updated', $this->updated);
		//$detail .= openDiv('summary-info');
		if ($this->activityCount > 0){
			$effort = openTable('hours-info','displayListTable');
			$heading = wrapTh('Estimated Hours');
			$heading .= wrapTh('Actual Hours');
			$heading .= wrapTh('% Done');
			$effort .= wrapTr($heading);
			$row = wrapTd($this->hoursEstimated);
			$row .= wrapTd($this->hoursActual);
			$row .= wrapTd($this->pctDone);
			$effort .= wrapTr($row);
			$effort .= closeTable();
		} else {
			$effort = openTable('hours-info','displayListTable');
			$effort .= wrapTr(wrapTh('No Activity History.'));	
			$effort .= closeTable();
		}
		if ($this->materialCount > 0){
			$costs = openTable('cost-info','displayListTable');
			$heading = wrapTh('Estimated Cost');
			$heading .= wrapTh('Actual Cost');
			$heading .= wrapTh('Approved');
			$costs .= wrapTr($heading);
			$row = wrapTd($this->costEstimated);
			$row .= wrapTd($this->costActual);			
			if ($this->materialsAuthProject == 'yes'){
				$value = $this->materialsAuthBy;
			} else {
				$value = $this->materialsAuthProject;
			}
			$row .= wrapTd($value);
			$costs .= wrapTr($row);
			$costs .= closeTable();
		} else {
			$costs = openTable('cost-info','displayListTable');
			$costs .= wrapTr(wrapTh('No Materials Costs.'));
			$costs .= closeTable();
		}
		if ($this->receiptCount > 0){
			$income = openTable('receipts-info','displayListTable');
			$heading = wrapTh('Received');
			$heading .= wrapTh('Approved');
			$income .= wrapTr($heading);
			
			$row = wrapTd($this->receiptCostActual);
			if ($this->receiptsAuthProject == 'yes'){
				$value = $this->receiptsAuthBy;
			} else {
				$value = $this->receiptsAuthProject;
			}
			$row .= wrapTd($value);
			$income .= wrapTr($row);
			$income .= closeTable();
		} else {
			$income = openTable('receipts-info','displayListTable');
			$income .= wrapTr(wrapTh('No Income Received.'));
			$income .= closeTable();
		}
		
		$timeAndEffort = openTable('effort-and-cost','displayListTable');
		$row = wrapTd($effort,30);
		$row .= wrapTd($costs,40);
		$row .= wrapTd($income,25);
		
		$timeAndEffort .= wrapTr($row);
		$timeAndEffort .= closeTable();
		
		$detail .= captionedParagraph('time-and-effort','Time, Materials and Receipts',$timeAndEffort);

		$l = new TaskLinks();
		$baseLink = $l->detail('VIEW',$this->id);

		if ($this->activityCount > 0){
			$activities = new ActivityList($this->pageMode, 0, $this->id);
			$activities->setPaging($this->resultsPageActivity);
			$activities->setDetails();
			$detail .= $activities->getListing($baseLink);
		}

		if ($this->measureCount > 0){
			$measures = new MeasureList($this->pageMode, 0, $this->id);

			$measures->setPaging($this->resultsPageMeasure);
			$measures->setDetails();
			$detail .= $measures->getListing($baseLink);
		}
		
		if ($this->materialCount > 0){
			$materials = new MaterialList($this->pageMode, 0, $this->id);
			$materials->setPaging($this->resultsPageMaterial);
			
			$materials->setDisplay('TASK');
			$materials->setApproved('no');
			$materials->setCalendar($this->year,$this->month);
			$materials->setDetails();
			$detail .= $materials->getListing($baseLink);
		}
		
		if ($this->receiptCount > 0){
			$receipts = new ReceiptList($this->pageMode, 0, $this->id);
			$receipts->setPaging($this->resultsPageReceipt);
			
			$receipts->setDisplay('TASK');
			$receipts->setApproved('no');
			$receipts->setCalendar($this->year,$this->month);
			$receipts->setDetails();
			$detail .= $receipts->getListing($baseLink);
		}

		$detail .= closeDisplayDetails();
		return $detail;
	}
	
	public function options(
		$selectedValue = 0,
		$idName = 'taskId', 
		$disabled = 'false',
		$showLink = true,
		$onChangeJS = NULL,
		$ajaxEvent = NULL,
		$ajaxEventType = NULL){
	
		
		$sql = $this->sql->optionsProject($this->project->id, $selectedValue, $disabled);
		
		$defaultValue = 0;
		$defaultCaption = '-No Task';
		$allOptions = getSelectOptionsSQL($sql,$selectedValue,$disabled,$defaultValue,$defaultCaption);		
		
		$select = getSelectList($idName,$allOptions,'none',$disabled,$onChangeJS, $ajaxEvent, $ajaxEventType);
		if ($showLink === true){
			$l = new TaskLinks;	
			$links =$l->detailViewEditHref($selectedValue);
			$select .= $links;
		}
		return $select;
	}	
	
	
	private function setDefaults(){
		global $sessionTime;
		$this->started = $sessionTime;	
		$this->order = $this->project->tasksCount + 1;
		$this->hoursActual = '0';
		$this->hoursEstimated = '0';
		
		$this->locationId = $this->project->locationId;		
		$this->materialsAuthBy = 'Not Applicable';
		$this->materialsAuthProject = 'no';
		$this->receiptsAuthBy = 'Not Applicable';
		$this->receiptsAuthProject = 'no';

	}	
	
	public function editForm(){
		if ($this->pageMode == 'ADD'){		
			$this->setDefaults();
			$legend = 'Add Task';
		} else {
			$legend = 'Edit Task';
		}
		$entity = 'task';
		$c = new TaskLinks;
		$contextMenu = $c->formatToggleLink('formOptional','+Options');
		$form = openEditForm($entity,$legend,'pr_Task_Save.php',$contextMenu);

		$fields = inputFieldNumber($entity,$this->order,'order','Order');

		$fields .= inputFieldName($entity,$this->name,'name','Task Name');
		
		$l = new TaskType;
		$select = $l->getTaskTypeSelectList($this->typeId,'taskTypeId');
		$fields .= captionedInput('Task Type', $select);


		$formRequired = $fields;

		$input = $this->project->getProjectSelectList($this->project->id,'projectId','false',false);
		$fields = captionedInput('Task Project', $input);
		
		
		$l = new Location;
		$select = $l->options($this->locationId,'locationId','false',false);
		$fields .= captionedInput('Location', $select);

		$fields .= inputFieldDescription($entity,$this->description,'description');


		$fields .= inputFieldComments($entity,$this->summary,'summary','Summary');
		
		$fields .= inputFieldTimestamp($entity, 'started', $this->started, 'Start Date'); 		
				
		$fields .= inputFieldNumber($entity,$this->hoursEstimated,'hoursEstimated','Estimated');
		
		$tooltip = 'Add activity details to record hours';
		$fields .= inputFieldNumber($entity,$this->hoursActual,'hoursActual','Actual');
		
		$fields .= inputFieldNumber($entity,$this->pctDone,'pctDone','% Done');
		
		$fields .= inputFieldComments($entity,$this->hoursNotes,'hoursNotes','Effort Notes',4000);


		if ($this->materialCount > 0) {
			if ($_SESSION['is-admin'] == 'yes'){
				//current user is admin, allow editing approvals
				$input = 'Costs Approved:'.getSelectYesNo('materialsAuthProject', $this->materialsAuthProject);
				if ($this->materialsAuthProject == 'no'){
					$this->materialsAuthBy = $_SESSION['login-name'];
				}
				$input .= spacer().'By:'.getTextInput('materialsAuthBy', $this->materialsAuthBy, 30, 50);
			} else {
				//materials present but user cannot edit approvals
				$input = 'Costs Approved:'.$this->materialsAuthProject;
				$input .= getHiddenInput('materialsAuthProject', $this->materialsAuthProject);
				$input .= spacer().'By:'.$this->materialsAuthBy;
				$input .= getHiddenInput('materialsAuthBy', $this->materialsAuthBy);	
			}
		} else {
			//no materials under task, dont show authorization fields
			$input = getHiddenInput('materialsAuthProject', $this->materialsAuthProject);
			$input .= getHiddenInput('materialsAuthBy', $this->materialsAuthBy);	
			$input .= 'No Task Costs';
		}
		$fields .= captionedInput('Costs', $input);


		if ($this->receiptCount > 0) {
			if ($_SESSION['is-admin'] == 'yes'){
				//current user is admin, allow editing approvals
				$input = 'Receipts Approved:'.getSelectYesNo('receiptsAuthProject', $this->receiptsAuthProject);
				if ($this->receiptsAuthProject == 'no'){
					$this->receiptsAuthBy = $_SESSION['login-name'];
				}
				$input .= spacer().'By:'.getTextInput('receiptsAuthBy', $this->receiptsAuthBy, 30, 50);
			} else {
				//materials present but user cannot edit approvals
				$input = 'Receipts Approved:'.$this->receiptsAuthProject;
				$input .= getHiddenInput('receiptsAuthProject', $this->receiptsAuthProject);
				$input .= spacer().'By:'.$this->receiptsAuthBy;
				$input .= getHiddenInput('receiptsAuthBy', $this->receiptsAuthBy);	
			}
		} else {
			//no materials under task, dont show authorization fields
			$input = getHiddenInput('receiptsAuthProject', $this->receiptsAuthProject);
			$input .= getHiddenInput('receiptsAuthBy', $this->receiptsAuthBy);	
			$input .= 'No Task Income';
		}
		$fields .= captionedInput('Income',$input);		
		
		$formOptional = $fields;
		
		$hidden = getHiddenInput('mode', $this->pageMode);
		$hidden .= getHiddenInput('taskId', $this->id);

		$input = getSaveChangesResetButtons();
		$formSubmit = $hidden.$input;

		$form .= closeEditForm($entity,$formRequired,$formOptional,$formSubmit);
		return $form;
	}
	
		
	public function collectPostValues(){
		//called by save form prior to running adds/updates
		$this->pageMode = $_POST['mode'];

		$this->id = $_POST['taskId'];
		$this->project->id = $_POST['projectId'];
		$this->idParent = $this->project->id;
		
		$this->locationId = $_POST['locationId'];
		$this->typeId = $_POST['taskTypeId'];
		//$this->setParentProject();
		
		$this->order = $_POST['order']; 
		$this->started = getTimestampPostValues('started');
		$this->name = dbEscapeString($_POST['name']); 
		$this->description = dbEscapeString($_POST['description']); 
		$this->summary = dbEscapeString($_POST['summary']); 
		$this->pctDone = $_POST['pctDone']; 
		$this->hoursEstimated = $_POST['hoursEstimated']; 
		//$this->hoursActual = $_POST['hoursActual']; 
		$this->hoursNotes = dbEscapeString($_POST['hoursNotes']); 
		$this->materialsAuthProject = dbEscapeString($_POST['materialsAuthProject']);
		if ($this->materialsAuthProject == 'yes'){
			$this->materialsAuthBy = dbEscapeString($_POST['materialsAuthBy']);
		} else {
			$this->materialsAuthBy = 'Not Approved';			
		}
		$this->receiptsAuthProject = dbEscapeString($_POST['receiptsAuthProject']);
		if ($this->receiptsAuthProject == 'yes'){
			$this->receiptsAuthBy = dbEscapeString($_POST['receiptsAuthBy']);
		} else {
			$this->receiptsAuthBy = 'Not Approved';			
		}

	}
	
	public function updateActivitySummary(){	
		
		$this->summarizeActivity();
				
		$sql = " UPDATE tasks as t ";
		$sql .= " SET ";
		$sql .= " t.updated = CURRENT_TIMESTAMP, ";		
		$sql .= " t.hours_actual = 	".$this->hoursActual.", ";
		$sql .= " t.hours_estimated = ".$this->hoursEstimated." ";
		$sql .= " WHERE t.id = ".$this->id." ";
		
		$result = dbRunSQL($sql);

		$this->project->UpdateTaskSummary();

	}

	public function resetMaterialsAuthorization(){	
		$this->materialsAuthProject = 'no';
		$this->materialsAuthBy = 'Not Approved';
		$project = $this->materialsAuthProject;
		$by = $this->materialsAuthBy;
		
		$sql = $this->sql->updateMaterialsAuth($this->id, $project, $by);
		
		$result = dbRunSQL($sql);
		
		$this->setMaterialsActualCost();
	}
	
	private function setMaterialsActualCost(){
		if ($this->materialsAuthProject == 'yes'){
			$sql = " UPDATE materials as m ";
			$sql .= " SET m.cost_actual = m.cost_estimated ";
			$sql .= " WHERE m.task_id = ".$this->id." ";
		} else {
			$sql = " UPDATE materials as m ";
			$sql .= " SET m.cost_actual = 0 ";
			$sql .= " WHERE m.task_id = ".$this->id." ";			
		}
		$result = dbRunSQL($sql);
	}

	public function resetReceiptsAuthorization(){	
		$this->receiptsAuthProject = 'no';
		$this->receiptsAuthBy = 'Not Approved';
		
		$project = $this->receiptsAuthProject;
		$by = $this->receiptsAuthBy;
		
		$sql = $this->sql->updateReceiptsAuth($this->id, $project, $by);
		$result = dbRunSQL($sql);
	}

	private function copyTask(){
	
		$idSource = $this->id;
		
		$sql = $this->sql->copy($idSource);

		$result = dbRunSQL($sql);
		$idCopy = dbInsertedId();
		
			$this->id = $idCopy;
			$this->pageMode = 'EDIT';

	}

	protected function saveUpdate(){
			$sql = " UPDATE tasks AS t ";
			$sql .= " SET ";
			$sql .= " t.project_id = ".$this->project->id.", ";
			$sql .= " t.task_order = ".$this->order.", ";
			$sql .= " t.location_id = ".$this->locationId.", ";
			$sql .= " t.started = '".$this->started."', ";
			$sql .= " t.name = '".$this->name."', ";
			$sql .= " t.description = '".$this->description."', ";
			$sql .= " t.summary = '".$this->summary."', ";
			$sql .= " t.updated = CURRENT_TIMESTAMP, ";
			$sql .= " t.type_id = ".$this->typeId.", ";
			$sql .= " t.hours_estimated = ".$this->hoursEstimated.", ";
			$sql .= " t.pct_done = ".$this->pctDone.", ";
			$sql .= " t.hours_notes = '".$this->hoursNotes."', ";
			$sql .= " t.materials_auth_project = '".$this->materialsAuthProject."', ";
			$sql .= " t.materials_auth_by = '".$this->materialsAuthBy."', ";
			$sql .= " t.receipts_auth_project = '".$this->receiptsAuthProject."', ";
			$sql .= " t.receipts_auth_by = '".$this->receiptsAuthBy."' ";

			$sql .= " WHERE t.id = ".$this->id." ";	
		
			$result = dbRunSQL($sql);
			
			$this->setMaterialsActualCost();			
			$this->project->UpdateTaskSummary();
	}
	
	protected function saveInsert(){
			$sql = " INSERT INTO tasks ";
			$sql .= " (name, ";
			$sql .= " project_id, ";
			$sql .= " location_id, ";
			$sql .= " type_id, ";			
			$sql .= " task_order, ";
			$sql .= " description, ";
			$sql .= " summary, ";
			$sql .= " started, ";
			$sql .= " updated, ";
			$sql .= " hours_estimated, ";
			$sql .= " hours_actual, ";
			$sql .= " hours_notes, ";
			$sql .= " materials_auth_project, ";
			$sql .= " materials_auth_by, ";
			$sql .= " receipts_auth_project, ";
			$sql .= " receipts_auth_by) ";

			$sql .= " VALUES (";
			$sql .= " '".$this->name."', ";
			$sql .= " ".$this->project->id.", ";
			$sql .= " ".$this->locationId.", ";		
			$sql .= " ".$this->typeId.", ";			
			$sql .= " ".$this->order.", ";
			$sql .= " '".$this->description."', ";
			$sql .= " '".$this->summary."', ";
			$sql .= " '".$this->started."', ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= " ".$this->hoursEstimated.", ";
			$sql .= " 0, ";
			$sql .= " '".$this->hoursNotes."', ";
			$sql .= " '".$this->materialsAuthProject."', ";
			$sql .= " '".$this->materialsAuthBy."', ";
			$sql .= " '".$this->receiptsAuthProject."', ";
			$sql .= " '".$this->receiptsAuthBy."') ";
			
		$result = dbRunSQL($sql);
			$this->id = dbInsertedId();

			$this->project->UpdateTaskSummary();
			
	}
	
} 
?>
