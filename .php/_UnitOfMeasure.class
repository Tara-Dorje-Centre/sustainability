<?php 

class unitOfMeasure extends _entityType{
	protected $__MyClassName = 'UnitOfMeasure';

    
    public $type;	
    public $name;	
    public $symbol;
    public $notes;
    public $created;
    public $updated;
	
    public $f;
	public $sql;
	public $links;
	
	public function __construct($mode = 'VIEW', $id = 0, $idParent = 0){
		parent::__construct($mode, $id, $idParent);
		
		$this->sql = new unitOfMeasureSQL;
	}
	
    public function setDetails(){

		$sql = $this->sql->info($this->id);

		$result = dbGetResult($sql);
		if($result){
		while ($row = $result->fetch_assoc())
			{	
			$this->name = ($row["name"]);
			$this->type = ($row["type"]);
			$this->notes = ($row["notes"]);
			$this->symbol = ($row["symbol"]);	
			$this->created = ($row["created"]);			
			$this->updated = ($row["updated"]);			
		}
		$result->close();
		}
				
	}	
		
	protected function pageTitle(){
		$heading = openDiv('section-heading-title');
		if ($this->pageMode != 'ADD'){
			$heading .= $this->name;
		} else {
			$heading .= 'Add New Unit Of Measure';
		}
		$heading .= closeDiv();		
		return $heading;
	}
	
	
	protected function pageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';
		
		$units = new UnitOfMeasureLinks($menuType,$menuStyle);
		$measureTypes = new MeasureTypeLinks($menuType,$menuStyle);
		$menuL = new MenuLinks($menuType,$menuStyle);
		
		$menu = $units->openMenu('section-heading-links');
		$menu .= $menuL->linkReference();
		$menu .= $units->resetMenu();
		if ($this->pageMode == 'VIEW'){
			$menu .= $units->detailEditHref($this->id);
		} elseif ($this->pageMode == 'EDIT'){
			$menu .= $units->detailViewHref($this->id);
		}
		$menu .= $units->listingHref();
		//$menu .= $measureTypes->listingHref();
		
		$menu .= $units->closeMenu();
		return $menu;
	}
	
	
	
	public function formatForDisplay(){
		$this->name = displayLines($this->name);
		$this->type = displayLines($this->type);
		$this->notes = displayLines($this->notes);
	}
	
	public function display(){
		$this->formatForDisplay();
		$detail = openDisplayDetails('unit-of-measure','Unit of Measure Details');
					 						
		$detail .= captionedParagraph('name', 'Name', $this->name);
		$detail .= captionedParagraph('type', 'Type', $this->type);
		$detail .= captionedParagraph('symbol', 'Symbol', $this->symbol);
		$detail .= captionedParagraph('created', 'Created', $this->created);
		$detail .= captionedParagraph('updated', 'Updated', $this->updated);
		$detail .= captionedParagraph('notes', 'Notes', $this->notes);

		$detail .= closeDisplayDetails();
		return $detail;
	}
		
	public function getUnitOfMeasureSelectList(
		$selectedValue = 0, 
		$idName = 'unitOfMeasureId', 
		$disabled = 'false', 
		$showLink = true,
		$changeJS = NULL){
	
		$sql = $this->sql->options($selectedValue,$disabled);
		
		$defaultValue = '0';
		$defaultCaption = '-select Unit Type';
		$allOptions = getSelectOptionsSQL($sql,$selectedValue,$disabled,$defaultValue,$defaultCaption);		
				
		$select = getSelectList($idName,$allOptions,'none',$disabled,$changeJS);
		
		if ($showLink == true){
			$l = new UnitOfMeasureLinks;			
			$links =$l->detailViewEditHref($selectedValue);
			$select .= $links;
		}
		return $select;
	}	
	
	private function setAddRecordDefaults(){
		
	}
	
	public function editForm(){
		if ($this->pageMode == 'ADD'){		
			$this->setAddRecordDefaults();
			$legend = 'Add Unit of Measure';
		} else {
			$legend = 'Edit Unit of Measure';	
		}

		$entity = 'unit-of-measure';
		$c = new ProjectLinks;
		$contextMenu = $c->formatToggleLink('formOptional','+Options');
		$form = openEditForm($entity,$legend,'pr_UnitOfMeasure_Save.php',$contextMenu);
		
		//begin required fields
		$fields = inputFieldName($entity,$this->name,'name','Name',50);
	
		//end required fields
		$formRequired = $fields;


		//start optional fields
		$fields = inputFieldName($entity,$this->type,'type','Type',50);
		
		$fields .= inputFieldName($entity,$this->symbol,'symbol','Symbol',10);


		$fields .= inputFieldComments($entity,$this->notes,'notes','Notes',1000);

		//end optional fields (hidden by default)
		$formOptional = $fields;

		
		$hidden = getHiddenInput('mode', $this->pageMode);
		$hidden .= getHiddenInput('unitOfMeasureId', $this->id);
		$input = getSaveChangesResetButtons();
		$formSubmit = $hidden.$input;

		$form .= closeEditForm($entity,$formRequired,$formOptional,$formSubmit);		
		return $form;
	}
	
	public function collectPostValues(){
		$this->id = $_POST['unitOfMeasureId'];
		$this->name = dbEscapeString($_POST['name']); 
		$this->type = dbEscapeString($_POST['type']); 
		$this->symbol = dbEscapeString($_POST['symbol']); 
		$this->notes = dbEscapeString($_POST['notes']); 		
		$this->pageMode = $_POST['mode'];	
	}

	public function saveUpdate(){
	
			$sql = " UPDATE units_of_measure AS p ";
			$sql .= " SET ";
			$sql .= " p.name = '".$this->name."', ";
			$sql .= " p.type = '".$this->type."', ";
			$sql .= " p.symbol = '".$this->symbol."', ";
			$sql .= " p.updated = CURRENT_TIMESTAMP, ";
			$sql .= " p.notes = '".$this->notes."' ";
			$sql .= " WHERE p.id = ".$this->id."  ";			
			$result = dbRunSQL($sql);

	}
	
	protected function saveInsert(){
	
			$sql = " INSERT INTO units_of_measure ";
			$sql .= " (name, ";
			$sql .= " created, ";
			$sql .= " updated, ";
			$sql .= " type, ";
			$sql .= " symbol, ";
			$sql .= " notes) ";
			$sql .= " VALUES (";
			$sql .= "'".$this->name."', ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= "'".$this->type."', ";
			$sql .= "'".$this->symbol."', ";
			$sql .= "'".$this->notes."') ";
			
			$result = dbRunSQL($sql);
			
			$this->id = dbInsertedId();
	}
} 
?>
