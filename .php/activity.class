<?php 

class activityFields extends _entityFields{



/******
_entityFields    id, name, description, 
highlightStyle, created, updated
idType, idParent,

_entityTypeFields  notes, displayOrder
****/
	public $taskId = 0;
	public $typeId = 0;
	public $doneBy;
    public $started;
    public $updated;
    //public $order = 0;	
    //public $hoursEstimated = 0;	
	public $hoursActual = 0;
    public $comments;
	public $linkUrl;
	public $linkText;
	//public $highlightStyle
	
    public function __construct(){
    	$this->hasType = true;
    	$this->hasCreated = false;
    	$this->hasHighlight = true;
    	$this->hasLocation = false;
    	$this->hasParent = false;
    	$this->hasProject = false;
    }
	
	public function setRow($row){
			//$this->id = $row["id"];
			$this->task->id = $row["task_id"];
			//$this->type->id = $row["type_id"];
			$this->doneBy = ($row["done_by"]);
			$this->started = $row["started"];
			$this->updated = $row["updated"];	
			//$this->order = $row["activity_order"];	
			//$this->hoursEstimated = $row["hours_estimated"];						
			$this->hoursActual = $row["hours_actual"];						
			$this->comments = ($row["comments"]);
			$this->linkText = ($row["link_text"]);
			$this->linkUrl = ($row["link_url"]);
			//$this->highlightStyle = $row['highlight_style'];
			
	}
	
	
	
	protected function formatForDisplay(){
		$this->doneBy = displayLines($this->doneBy);
		$this->comments = displayLines($this->comments);		
		$this->started = getTimestampDate($this->started);
		$this->updated = getTimestampDate($this->updated);		
	}

		
	

}

class activity extends _entity{       
	protected $__MyClassName = 'Activity';
	protected $_titleEntity = 'Activity';

	//public $task;	
	//public $type;
	public $f;
	public $sql;
	public $links;
	
	protected function setHelperClasses(){
		$this->f = new activityFields;
		$this->sql = new ActivitySQL;
		$this->links = new ActivityLinks();
	}

	protected function beforeSetDetails(){
	}

	protected function afterSetDetails(){
		//$this->setParentTask();
	}

	
	
	protected function listingRowLink(){
		$link = $this->links->detailViewEditHref($this->id,$this->name);
		return $link;
	}
	
	public function listingHeading($myActivity = 'NO'){
		$heading = '';
		if ($this->myActivity != 'NO'){
			if ($this->myActivity != 'PROJECT'){
				$heading .= wrapTh('Project');
			}
			$heading .= wrapTh('Task');
		}
		//$heading .=  wrapTh('Order');
		$heading .=  wrapTh('Done By');
		$heading .=  wrapTh('Started');
		$heading .=  wrapTh('Effort Actual');
		$heading .= wrapTh('Comments');
		$heading .=  wrapTh('Links');
		$list .=  wrapTr($heading);
		return $list;
	}
	
	public function listingRowFormat($myActivity){
		$this->formatForDisplay();
		$detail = '';
		if ($this->myActivity != 'NO'){
			$taskLink = $this->task->links->detailViewHref($this->task->id,$this->task->name);
			$detail .=  wrapTd($taskLink);
				
			if ($this->myActivity != 'PROJECT'){
				$projectLink = $this->task->project->detailViewHref($this->task->project->id,$this->task->project->name);				
				$detail .=  wrapTd($projectLink);
			}
			$cssRow = $this->highlightStyle;
		} else {
				$cssRow = 'none';
		}
		if ($a->hoursActual == 0){
			$cssRow = 'highlight-yellow';
		} 	
			$link = $this->links->detailViewEditHref($this->id,$this->doneBy);
			$detail .=  wrapTd($link);
			$detail .=  wrapTd($a->doneBy);
			$detail .=  wrapTd($a->started);
			$detail .=  wrapTd($a->hoursActual);
			$detail .=  wrapTd($a->comments);
			
			if ($a->linkText != '' && $a->linkUrl != ''){
				$link = $this->links->formatHref($a->linkText,$a->linkUrl,'_blank');
				$detail .= wrapTd($link);
			} else {
				$detail .= wrapTd(spacer());
			}

			$list .=  wrapTr($detail,$cssRow);
			return $listRow;
			}
		
	
	
	public function setParentTask(){
		$this->task->setDetails();
	}
		
	protected function setPageTitle(){	
		$title .= $this->task->project->name.br();
		$title .= 'Task: '.$this->task->name;		
		$this->_pageTitle = $title;
	}	
	
	protected function setPageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';
		
		//$projects = new ProjectLinks($menuType,$menuStyle);
		//$tasks = new TaskLinks($menuType,$menuStyle);
	//	$activities = new ActivityLinks($menuType,$menuStyle);
					
		$menu = $this->links>openMenu('section-heading-links');

		$menu .= $this->task->links->detailViewHref($this->task->id);
		$menu .= $this->task->project->links->detailViewHref($this->task->project->id);
		
		$menu .= $this->links>resetMenu();
		if ($this->pageMode == 'VIEW'){
			$menu .= $this->links->detailEditHref($this->id);
		}		
		
		if ($this->pageMode == 'EDIT'){
			$menu .= $this->links->detailViewHref($this->id);
		}
		//$menu .= $activities->listingHref($this->task->id);

		$menu .= $this->links->closeMenu();
		
		$this->_pageMenu = $menu;

	}
		
		
		
	public function display(){
		$this->formatForDisplay();
		
		$detail = openDisplayDetails('activity','Activity Details');
		
		//$detail .= captionedParagraph('a-order','Order',$this->order);
		$detail .= captionedParagraph('a-started','Started',$this->started);
		$detail .= captionedParagraph('a-updated','Updated',$this->updated);		
		$detail .= captionedParagraph('a-done-by','Done By',$this->doneBy);
		//$detail .= captionedParagraph('a-h-est','Estimated',$this->hoursEstimated);
		$detail .= captionedParagraph('a-h-actual','Actual',$this->hoursActual);
 		$detail .= captionedParagraph('a-comments','Comments',$this->comments);
		if ($this->linkText != '' && $this->linkUrl != ''){
			$l = new ActivityLinks('DIV','menu');
			$link = $l->formatHref($this->linkText,$this->linkUrl,'_blank');
			$detail .= captionedParagraph('a-weblink','Web Link',$link);
		}
		//$activityType = new ActivityType;
		//$input = $activityType->getActivityTypeSelectList($this->typeId,'typeId','true');
	
		$detail .= closeDisplayDetails();	
		
		return $detail;
	}	
	
	public function afterDisplay(){
	
	
	}
	
	public function setDefaults(){
		global $sessionTime;
		$this->started = $sessionTime;	
		$this->order = $this->task->activityCount + 1;
		//$this->hoursEstimated = $this->task->hoursEstimated;
		$this->hoursActual = $this->task->hoursEstimated;
		$this->doneBy = $_SESSION['login-name'];
		$this->typeId = '0';
	}
	protected function afterSetDefaults(){
	}
	
	
	
	public function editForm($editContext = 'ActivityDetail'){
		$this->echoState(true, 'editForm');
		if ($this->pageMode == 'ADD'){		
			$this->setDefaults();
			$legend = 'Add Activity';	
		} else if ($this->pageMode == 'EDIT'){
			$legend =  'Edit Activity';
		} else {
			$legend = 'View Activity';
		}
		$entity = 'activity';
		$c = new ActivityLinks;
		$contextMenu = $c->formatToggleLink('formOptional','+Options');
		$form = openEditForm($entity,$legend,'pr_Activity_Save.php',$contextMenu);
		
		$_ptId = $this->task->project->typeId;
		$_pId = $this->task->project->id;
		$_tId = $this->task->id;		
		//$form .= $_ptId.'.'.$_pId.'.'.$_tId;

		//project type
		$pt = new ProjectType(OPTIONS);
		//$pt->setDetails($_ptId,'VIEW');
		$changeJs = "ajaxRefresh('PROJECTS_BY_TYPE_SELECT',this,'projectId');";
		$input = $pt->options($_ptId,'projectTypeId','false',false,$changeJs);
		$fields = captionedInput('Project Type',$input);
				
		//project
		$changeJs = "ajaxRefresh('PROJECT_TASKS_SELECT',this,'taskId');";
		$input = $this->task->project->options($_pId,'projectId','false',false,$changeJs);
		$fields .= captionedInput('Project',$input);

		$changeJs = "ajaxRefresh('TASK_EST_EFFORT',this,'activityHoursActual');";		
		$input = $this->task->options($_tId,'taskId','false',false,$changeJs);
		$fields .= captionedInput('Task',$input);
		
		$tooltip = 'Hint: Set actual hours to 0 to create a scheduled activity';
		$fields .= inputFieldNumber($entity,$this->hoursActual,'activityHoursActual','Actual',$tooltip);


//$fields .= br();

		$fields .= inputFieldTimestamp($entity,'started',$this->started,'Started');

		$fields .= inputFieldUser($entity,$this->doneBy,'activityDoneBy','Done By');


		
		//activity weblink
		$fields .= inputGroupWebLink($entity,$this->linkText,$this->linkUrl);		

		$fields .= inputFieldComments($entity,$this->comments,'activityComments');

		$formRequired = $fields;



	
		$activityType = new ActivityType(OPTIONS);
		$input = $activityType->options($this->typeId,'typeId','false',false);
		$fields = captionedInput('Activity Type',$input);

		//$tooltip = 'Task Estimated Hours Per Activity';
		//$fields .= inputFieldNumber($entity,$this->hoursEstimated,'activityHoursEstimated','Estimated',$tooltip,'true');

		//$fields .= inputFieldNumber($entity,$this->order,'activityOrder','Order');


		$formOptional = $fields;

		//hidden fields and submit,reset buttons
		$hidden = getHiddenInput('mode', $this->pageMode);
		$hidden .= getHiddenInput('activityId', $this->id);
		$hidden .= getHiddenInput('editContext',$editContext);
		
		$input = getSaveChangesResetButtons();
		$formSubmit = $hidden.$input;
			
		$form .= closeEditForm($entity,$formRequired,$formOptional,$formSubmit);
		return $form;
	}
	
	public function collectPostValues(){
		$this->echoState(true, 'collectPostValues');
		//called by save form prior to running adds/updates
		$this->pageMode = $_POST['mode'];
		
		$this->task->id = $_POST['idParent'];
		$this->idParent = $this->task->id;
		$this->id = $_POST['id'];
		$this->typeId = $_POST['typeId'];
		//$this->order = $_POST['activityOrder']; 
		$this->started = getTimestampPostValues('started');
		
		$this->doneBy = dbEscapeString($_POST['activityDoneBy']); 
		$this->comments = dbEscapeString($_POST['activityComments']); 
		$this->hoursActual = $_POST['activityHoursActual']; 
		$this->linkText = dbEscapeString($_POST['linkText']);
		$this->linkUrl = dbEscapeString($_POST['linkUrl']);
		
		$this->setParentTask();
		$this->hoursEstimated = $this->task->hoursEstimated;
	}
	public function afterCollectPostValues(){
	
	}
	
	protected function saveUpdate(){
			$sql = " UPDATE activities a ";
			$sql .= " SET ";
			$sql .= " a.done_by = '".$this->doneBy."', ";
			$sql .= " a.comments = '".$this->comments."', ";
			$sql .= " a.updated = CURRENT_TIMESTAMP, ";
			$sql .= " a.started = '".$this->started."', ";
			$sql .= " a.link_text = '".$this->linkText."', ";
			$sql .= " a.link_url = '".$this->linkUrl."', ";
			$sql .= " a.hours_actual = ".$this->hoursActual.", ";			
			//$sql .= " a.activity_order = ".$this->order.", ";
			$sql .= " a.type_id = ".$this->typeId.", ";
			$sql .= " a.task_id = ".$this->task->id." ";
			$sql .= " WHERE a.id = ".$this->id." ";

			$result = dbRunSql($sql);
			
			$this->task->updateActivitySummary();
	}
	
	protected function saveInsert(){
			$sql = " INSERT INTO activities ";
			$sql .= " ( ";
			//$sql .= " activity_order, ";
			$sql .= " task_id, ";
			$sql .= " type_id, ";
			$sql .= " done_by, ";
			$sql .= " started, ";
			$sql .= " updated, ";
			//$sql .= " hours_estimated, ";
			$sql .= " hours_actual, ";
			$sql .= " link_url, ";
			$sql .= " link_text, ";
			$sql .= " comments) ";
			$sql .= " VALUES (";
			//$sql .= " ".$this->order.", ";
			$sql .= " ".$this->task->id.", ";
			$sql .= " ".$this->typeId.", ";
			$sql .= " '".$this->doneBy."', ";
			$sql .= " '".$this->started."', ";
			$sql .= " CURRENT_TIMESTAMP, ";
			//$sql .= " ".$this->hoursEstimated.", ";
			$sql .= " ".$this->hoursActual.", ";
			$sql .= " '".$this->linkUrl."', ";
			$sql .= " '".$this->linkText."', ";			
			$sql .= " '".$this->comments."') ";
			
			$result = dbRunSql($sql);
			
			$this->id = dbInsertedId();

			$this->task->updateActivitySummary();
	}
	
	
	
} 
?>
