<?php 
/*
 ^_currentUser set to $_SESSION['login-name']
 °_currentTimestamp set to $sessionTime
 
 _fieldsetTaskChild
 id, name, description
 created°, updated°, highlight
 parentEntity, typeEntity
 project, projectType, location
 started°, approved,approvedBy^
 task, taskType, reported°,doneBy^
 notes, linkUrl, linkText
*/

class receiptFields extends _fieldsetTaskChild{

	public $receivedBy;
	public $receivedFrom;
    public $quantity;
	public $quantityUnits;
    public $costUnit;
	public $costActual;
 
    
	public function __construct(){
		parent::__construct();
		$this->->f->reported->setDbColumn('date_reported');
	
		$this->->f->receivedBy = new _userField('received_by','received-by','Received By');
		$this->->f->receivedFrom = new _userField('received_from','received-from''Received From');
		$this->->f->quantityUnits = new _fieldIdNumber('qty_unit_measure_id','quantity-units','Quantity Units','qty_unit_measure_name');	
		$this->->f->quantity = new _numberField('quantity','quantity','Quantity');
		$this->->f->costUnit = new _numberField('cost_unit','cost-unit',Unit Amount');
		$this->->f->costActual = new _numberField('cost_actual','cost-actual','Amount Actual');
		$this->_register('receivedBy',$this->receivedBy);
		$this->_register('receivedFrom',$this->receivedFrom);
		$this->_register('quantityUnits',$this->quantityUnits);
		$this->_register('quantity',$this->quantity);
		$this->_register('costUnit',$this->costUnit);
		$this->_register('costActual',$this->costActual);
	}
	
	public function setDefaults(){
		parent::setDefault();
		
		$this->quantity->setDefault(1);
		$this->quantityUnits->setDefault(0);
		$this->costUnit->setDefault(0);
		$this->costActual->setDefault(0);		
		$this->receivedBy->setDefault($_SESSION['login-name']);
	}
	
	
	
	
}

class receipt extends _entity{
protected $_MyClassName = 'Receipt';

	protected $titleEntity = 'Receipt';
	protected $pageSave = 'pr_Receipt_Save.php';
 	public function __construct($mode = 'VIEW', $id = 0, $idParent = 0){
		parent::__construct($mode, $id, $idParent);
		$this->f = new receiptFields();
		$this->sql = new receiptSQL;
		$this->links = new receiptLinks();
	}
	
	
	
	
	protected function setPageTitle(){	

		$title = $this->f->nameProject->name.br();
		$title .= 'Task: '.$this->f->nameTask;		

		$this->_pageTitle = $title;
		
	}
	
	
	protected function setPageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';
		
		$projects = new ProjectLinks($menuType,$menuStyle);
		$tasks = new TaskLinks($menuType,$menuStyle);
		$rL = new ReceiptLinks($menuType,$menuStyle);
					
		$menu = $projects->openMenu('section-heading-links');

		$menu .= $projects->detailViewHref($this->task->project->id);
		if ($this->task->project->receiptsCount > 0){
			$menu .= $rL->listingHref(0,'ProjectReceipts',$this->task->project->id,'PROJECT','YES');
		}
		
		$menu .= $projects->resetMenu();
		$menu .= $tasks->detailViewHref($this->task->id);
		if ($this->task->receiptCount > 0){
			$menu .= $rL->listingHref($this->task->id,'TaskReceipts',0,'TASK','NO');
		}
		$menu .= $projects->resetMenu();
		if ($this->pageMode == 'VIEW'){
			$menu .= $rL->detailEditHref($this->id);
		} elseif ($this->pageMode == 'EDIT'){
			$menu .= $rL->detailViewHref($this->id);
		}
		
		$menu .= $projects->closeMenu();
		$this->_pageMenu = $menu;
	}
	
	protected function editForm(){
			$legend = $this->pageMode.'Receipt';
		
		$entity = 'receipt';
		$c = new ProjectTypeLinks;
		$contextMenu = $c->formatToggleLink('formOptional','+Options');
		$form = openEditForm($entity,$legend,'pr_Receipt_Save.php',$contextMenu);

		//start required fields
		$fields = inputFieldName($entity,$this->f->name,'name','Receipt');

		$fields .= inputFieldUser($entity,$this->f->receivedBy,'receivedBy','Received By');

		$fields .= inputFieldUser($entity,$this->f->receivedFrom,'receivedFrom','Received From');
				
		$fields .= inputFieldNumber($entity,$this->f->costUnit,'costUnit','Unit Amount');

		$fields .= inputFieldTimestamp($entity, 'dateReported', $this->f->dateReported, 'Date Reported'); 		

		$fields .= inputFieldDescription($entity,$this->f-description,'description');

		//end required fields
		$formRequired = $fields;
		
		//start optional fields
		$fields = inputFieldNumber($entity,$this->f->quantity,'quantity','Quantity');
		
		$u = new UnitOfMeasure(OPTIONS);
		$select = $u->options($this->f->quantityUnitMeasureId,'quantityUnitMeasureId','false');
		$fields .= captionedInput('Quantity Units', $select);

		$tooltip = 'Set when task costs are approved';
		$fields .= inputFieldNumber($entity,$this->f->costActual,'costActual','Amount Actual',$tooltip);

		$m = new ReceiptType(OPTIONS);
		$select = $m->options($this->f->idType,'idType','false');
		$fields .= captionedInput('Receipt Type',$select);
		

		$fields .= inputFieldNotes($entity,$this->f-notes,'notes');

		//end optional fields (hidden by default)
		$formOptional = $fields;

		//hidden fields and submit,reset buttons
		$hidden = getHiddenInput('mode', $this->pageMode);
		$hidden .= getHiddenInput('idTask', $this->f->idTask);
		$hidden .= getHiddenInput('id', $this->f->id);
		$hidden .= getHiddenInput('idActivity', $this->f->idActivity);
		$input = getSaveChangesResetButtons();
		$formSubmit = $hidden.$input;
			
		$form .= closeEditForm($entity,$formRequired,$formOptional,$formSubmit);	

		return $form;
	}
	
	private function setActualCost(){
			$this->costActual = $this->f->costUnit * $this->f->quantity;
	}
	
	public function collectPostValues(){
		parent::collectPostValues();
		$this->setActualCost();

		$this->setParentTask();
	}

	protected function saveUpdate(){
	

			
			$sql = " UPDATE receipts m ";
			$sql .= " SET ";
			$sql .= " m.name = '".$this->f->name."', ";
			$sql .= " m.description = '".$this->f->description."', ";
			$sql .= " m.notes = '".$this->f->notes."', ";
			$sql .= " m.updated = CURRENT_TIMESTAMP, ";
			$sql .= " m.date_reported = '".$this->f->dateReported."', ";
			$sql .= " m.received_by = '".$this->f->receivedBy."', ";
			$sql .= " m.received_from = '".$this->f->receivedFrom."', ";			
			$sql .= " m.type_id = ".$this->f->idType.", ";
			$sql .= " m.activity_id = ".$this->f->idActivity.", ";
			$sql .= " m.quantity = ".$this->f->quantity.", ";
			$sql .= " m.qty_unit_measure_id = ".$this->f->quantityUnitMeasureId.", ";
			$sql .= " m.cost_unit = ".$this->f->costUnit.", ";
			$sql .= " m.cost_actual = ".$this->f->costActual." ";
			$sql .= " WHERE m.id = ".$this->f->id." ";

			$result = dbRunSQL($sql);
			
			$this->task->resetReceiptsAuthorization();
			
	}
			
	protected function saveInsert(){
	
			$sql = " INSERT INTO receipts ";
			$sql .= " (name, ";
			$sql .= " description, ";
			$sql .= " task_id, ";
			$sql .= " activity_id, ";
			$sql .= " date_reported, ";
			$sql .= " received_by, ";
			$sql .= " received_from, ";
			$sql .= " updated, ";
			$sql .= " quantity, ";
			$sql .= " cost_unit, ";
			$sql .= " cost_actual, ";
			$sql .= " type_id, ";
			$sql .= " qty_unit_measure_id, ";
			$sql .= " notes) ";
			$sql .= " VALUES (";
			$sql .= "'".$this->f->name."', ";
			$sql .= "'".$this->f->description."', ";
			$sql .= "".$this->f->idTask.", ";
			$sql .= "".$this->f->idActivity.", ";
			$sql .= " '".$this->f->dateReported."', ";
			$sql .= " '".$this->f->receivedBy."', ";
			$sql .= " '".$this->f->receivedFrom."', ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= "".$this->f->quantity.", ";
			$sql .= "".$this->f->costUnit.", ";
			$sql .= "".$this->f->costActual.", ";
			$sql .= " ".$this->f->idType.", ";
			$sql .= " ".$this->f->quantityUnitMeasureId.", ";
			$sql .= "'".$this->f->notes."') ";
			
			$result = dbRunSQL($sql);

			$this->f->id = dbInsertedId();
			$this->id = $this->f->id;

			$this->task->resetReceiptsAuthorization();
	}
	
	
} 
?>
