<?php 

class taskFields extends _fieldsetProjectChild{
	/*
	//from _fieldset
	public $id;
	public $name;		
	public $created;
    public $updated;
	public $description;
	public $highlight;
	//from _fieldsetChild
	public $parent;
	public $type;
	//from _fieldsetProjectChild
	public $project;
	public $location;
	public $started;
	public $approved;
	public $approvedBy;
	*/
	
	public $taskOrder;
    public $summary;
    //public $started;
    public $pctDone ;	
    public $hoursEstimated ;
    public $hoursActual;
    public $hoursNotes;	
	public $materialsAuthProject;
	public $materialsAuthBy;
	public $receiptsAuthProject;
	public $receiptsAuthBy;
	
public function __construct(){

	$this->summary = new _textField('summary','summary','summary',true);
	//$this->started = new _dateField('started','started','started',true);	
	$this->pctDone = new _numberField('pct_done','pct_done','pct_done',true);	
	$this->taskOrder = new _numberField('task_order','task_order','task_order',true);						
	$this->hoursEstimated = new _numberField('hours_estimated','hours_estimated','hours_estimated',true);
	$this->hoursActual = new _numberField('hours_actual','hours_actual','hours_actual',true);
	$this->hoursNotes = new _notesField('hours_notes','hours_notes','hours_notes',true);			
	$this->materialsAuthProject = new _yesNoField('materials_auth_project','materials_auth_project','materials_auth_project',true);
	$this->materialsAuthBy = new _textField('materials_auth_by','envvar','caption',true);
	$this->receiptsAuthProject = new _yesNoField('receipts_auth_project','envvar','caption',true);
	$this->receiptsAuthBy = new _textField('receipts_auth_by','envvar','caption',true);
	
    }

	public function fetch($row){
		parent::fetch($row);
			
			$this->summary->fetch($row);
			//$this->started->fetch($row);
			$this->pctDone->fetch($row);
			$this->taskOrder->fetch($row);			
			$this->hoursEstimated->fetch($row);
			$this->hoursActual->fetch($row);
			$this->hoursNotes->fetch($row);
			$this->materialsAuthProject->fetch($row);
			$this->materialsAuthBy->fetch($row);
			$this->receiptsAuthProject->fetch($row);
			$this->receiptsAuthBy->fetch($row);
			
	}
		
	public function setEnvironment(string $env = 'POST'){
		parent::setEnvironment($env);

		$this->summary->setEnvironment($env);
	//	$this->started->setEnvironment($env);
		$this->pctDone->setEnvironment($env);
		$this->taskOrder->setEnvironment($env);			
		$this->hoursEstimated->setEnvironment($env);
		$this->hoursActual->setEnvironment($env);
		$this->hoursNotes->setEnvironment($env);
		$this->materialsAuthProject->setEnvironment($env);
		$this->materialsAuthBy->setEnvironment($env);
		$this->receiptsAuthProject->setEnvironment($env);
		$this->receiptsAuthBy->setEnvironment($env);

	}
	public function format(){
		parent::format();
		
		$this->summary->format($row);
		//$this->started->format($row);
		$this->pctDone->format($row);
		$this->taskOrder->format($row);			
		$this->hoursEstimated->format($row);
		$this->hoursActual->format($row);
		$this->hoursNotes->format($row);
		$this->materialsAuthProject->format($row);
		$this->materialsAuthBy->format($row);
		$this->receiptsAuthProject->format($row);
		$this->receiptsAuthBy->format($row);
		
	}

	 public function listCaption(){
		 $this->addContent(parent::listCaption(),true);
		 $this->addContent($this->summary->listCaption());
		// $this->addContent($this->started->listCaption());
		 $this->addContent($this->pctDone->listCaption());
		 $this->addContent($this->taskOrder->listCaption());			
		 $this->addContent($this->hoursEstimated->listCaption());
		 $this->addContent($this->hoursActual->listCaption());
		 $this->addContent($this->hoursNotes->listCaption());
		 $this->addContent($this->materialsAuthProject->listCaption());
		 $this->addContent($this->materialsAuthBy->listCaption());
		 $this->addContent($this->receiptsAuthProject->listCaption());
		 $this->addContent($this->receiptsAuthBy->listCaption());
	 	/*$heading .=  wrapTh('Task Order');
		$heading .=  wrapTh('% Done');
		$heading .=  wrapTh('Hours<br/>Estimated');
		$heading .=  wrapTh('Hours<br/>Actual');*/
		
	 	return $this->getContent();
	 }

	 public function listDetail(){
		 $this->addContent(parent::listDetail(),true);
		 $this->addContent($this->summary->listDetail());
		// $this->addContent($this->started->listDetail());
		 $this->addContent($this->pctDone->listDetail());
		 $this->addContent($this->taskOrder->listDetail());			
		 $this->addContent($this->hoursEstimated->listDetail());
		 $this->addContent($this->hoursActual->listDetail());
		 $this->addContent($this->hoursNotes->listDetail());
		 $this->addContent($this->materialsAuthProject->listDetail());
		 $this->addContent($this->materialsAuthBy->listDetail());
		 $this->addContent($this->receiptsAuthProject->listDetail());
		 $this->addContent($this->receiptsAuthBy->listDetail());
		 

		 return $this->getContent();
	 }

	public function displayDetail(){
		 $this->addContent(parent::displayDetail(),true);
		$this->addContent($this->summary->displayDetail());
		//$this->addContent($this->started->displayDetail());
		$this->addContent($this->pctDone->displayDetail());
		$this->addContent($this->taskOrder->displayDetail());			
		$this->addContent($this->hoursEstimated->displayDetail());
		$this->addContent($this->hoursActual->displayDetail());
		$this->addContent($this->hoursNotes->displayDetail());
		$this->addContent($this->materialsAuthProject->displayDetail());
		$this->addContent($this->materialsAuthBy->displayDetail());
		$this->addContent($this->receiptsAuthProject->displayDetail());
		$this->addContent($this->receiptsAuthBy->displayDetail());
		 

	 	return $this->getContent();
	 }
	 
	 public function read(){
		parent::read();
	
		$this->taskOrder->read();
		$this->started->read();
		$this->summary->read();
		$this->pctDone->read();
		$this->hoursEstimated->read();
		$this->hoursNotes->read();
		//$this->hoursActual-read();
		$this->materialsAuthProject->read();

		if ($this->materialsAuthProject == 'yes'){
			$this->materialsAuthBy->read();
		} else {
			$this->materialsAuthBy->set('Not Approved');			
		}
		$this->receiptsAuthProject->read();
		if ($this->receiptsAuthProject == 'yes'){
			$this->receiptsAuthBy->read();
		} else {
			$this->receiptsAuthBy->set('Not Approved');			
		}

	}
	 

}

class task extends _entity{
	protected $__MyClassName = 'Task';
    protected $_titleEntity = 'Task';
	public $totals;
	
	public $measureCount = 0;
	
	public $resultsPageActivity = 1;
	public $resultsPageMeasure = 1;
	public $resultsPageMaterial = 1;
	public $resultsPageReceipt = 1;
	
	
	protected function setHelperClasses(){
		$this->f = new taskFields();
		$this->sql = new TaskSQL();
		$this->links = new TaskLinks();
		$this->totals = new summaryTotals();
	}
	
	public function listHeading($periodicTasks = 'NO'){
		$heading = wrapTh($this->_titleEntity);
		$heading .= $this->f->listHeading();
		
		$heading .= wrapTh('Hotlinks');
		if ($periodicTasks != 'NO'){
			$heading .= wrapTh('Project');			
		}
		$list = wrapTr($heading);
		return $list;
	}
	
	
	public function listRowHotLinks(){
	
		$activitiesL = new ActivityLinks('DIV','button');
		$materialsL = new MaterialLinks('DIV','button');
		$measuresL = new MeasureLinks('DIV','button');
		$receiptsL = new ReceiptLinks('DIV','button');
		
		$menu = $activitiesL->openMenu('hotlinks-list');
		$menu .= $activitiesL->add('Activity',$this->f->id);
		$menu .= $measuresL->add('Measures',$this->f->id);
		$menu .= $materialsL->add('Materials',$this->f->id);
		$menu .= $receiptsL->add('Receipts',$this->f->id);
		$menu .= $activitiesL->closemenu();
		return $menu;
	}
	
	protected function listRowProjectLink(){
		$l = new ProjectLinks();
		$link = $l->view($this->f->project->name->value,$this->f->project->id->value);
		return $link;
	}
	
	
	public function listRowFormat(){
		$detail = wrapTd($this->listRowLink());
		$detail .= $this->f->listDetail();		
		$detail .=  wrapTd($this->listRowHotLinks());

		if ($periodicTasks != 'NO'){
			$detail .= wrapTd($this->listRowProjectLink());
		}
		
		if ($periodicTasks != 'NO'){
			$cssItem = $this->f->highlightStyle->value();
		} else {
			//highlight based on reported activity
			if ($this->f->hoursActual->value == 0){
				$cssItem = 'highlight-yellow';
			} else {
				$cssItem = 'none';
			}
		}
		
		$listRow = wrapTr($detail,$cssItem);
		//$listRow = wrapTr($detail,$this->f->highlightStyle);
		return $listRow;
	}
	
	
	
	public function setDetails(){
   		
		if ($this->pageMode == 'COPY'){
			$this->copyTask();
		}
		
		parent::setDetails();
		/*
	}
	
	protected function afterSetDetails(){*/
		
		$this->totals->setTaskTotals($this->f->id);
		 //if activity records with hours exist
		 //update estimated effort to reflect current average of actual hours
		 if ($this->totals->tasks->count > 0 && $this->totals->tasks->actual > 0){
		 $this->f->hoursEstimated = round($this->totals->tasks->actual / $this->totals->tasks->count,2);
		 $this->f->hoursActual = $this->totals->tasks->actual;
		 }

		$this->setMeasureCount();
		
	}
	

	
	public function setPagingDetails(
		$pageActivity = 1, 
		$pageMaterial = 1, 
		$pageMeasure = 1, 
		$pageReceipt = 1){

		$this->resultsPageMeasure = $pageMeasure;
		$this->resultsPageActivity = $pageActivity;
		$this->resultsPageMaterial = $pageMaterial;
		$this->resultsPageReceipt = $pageReceipt;
	}
	
	protected function setMeasureCount(){
		$this->echoState(true, 'setMeasureCount');
		$s = new MeasureSQL;
		$sql = $s->countTask($this->id);
		$this->measureCount = dbGetCount($sql, 'total_measures', 0);
	}
	
	protected function setPageTitle(){

		$title = $this->f->projectName.br();
		if ($this->pageMode != 'ADD'){
			$title .= 'Task: '.$this->f->name->value();
		} else {
			$title .= 'Add New Task.';
		}

		$this->_pageTitle = $title;	
	}
	
	
	
	protected function setPageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';
		
		$p = new ProjectLinks($menuType,$menuStyle);
		$t = new TaskLinks($menuType,$menuStyle);
		$measure = new MeasureLinks($menuType,$menuStyle);
		$material = new MaterialLinks($menuType,$menuStyle);
		$a = new ActivityLinks($menuType,$menuStyle);	
		$r = new ReceiptLinks($menuType,$menuStyle);
		
		$menu = $p->openMenu('section-heading-links');
		$menu .= $p->detailViewHref($this->f->project->id->value());
		$menu .= $p->resetMenu();

		if ($this->project->materialsCount > 0){
			$menu .= $material->listingHref($this->f->id->value,'ProjectMaterials',$this->f->project->id->value,'PROJECT','yes');
			$menu .= $p->resetMenu();
		}
		if ($this->project->receiptsCount > 0){
			$menu .= $r->listingHref($this->f->id,'ProjectReceipts',$this->f->projectId,'PROJECT','yes');
			$menu .= $r->resetMenu();
		}
		
		if ($this->pageMode == 'VIEW'){
			$menu .= $t->detailEditHref($this->f->id);
			$menu .= $t->detailCopyHref($this->f->id);
		} elseif ($this->pageMode == 'EDIT') {
			//$menu .= $tasks->formatOptionsLink();
			$menu .= $t->detailViewHref($this->f->id);
		}		
		$menu .= $p->resetMenu();

		if ($this->materialCount > 0){
			$menu .= $materials->listingHref($this->id,'TaskMaterials',0,'TASK');
			$menu .= $p->resetMenu();
		}
		if ($this->receiptCount > 0){
			$menu .= $r->listingHref($this->id,'TaskReceipts',0,'TASK');
			$menu .= $p->resetMenu();
		}

		if ($this->pageMode != 'ADD'){
			$menuStyle = 'button';
			$p->setStyle($menuStyle);
			$a ->setStyle($menuStyle);
			$measure->setStyle($menuStyle);
			$material->setStyle($menuStyle); 
			$r->setStyle($menuStyle);
			$menu .= $p->resetMenu();
			$menu .= $a->detailAddHref($this->id);
			$menu .= $measure->detailAddHref($this->id);
			$menu .= $material->detailAddHref($this->id);
			$menu .= $r->detailAddHref($this->id);
		}
				
		$menu .= $p->closeMenu();
		$this->_pageMenu = $menu;		
	}
	
	protected function displayChildDetails(){
	 //	$l = new TaskLinks();
	 $baseLink = $this->links->detail('VIEW',$this->id);
	 
	 $detail = openDiv('taskDetails');

	 if ($this->totals->tasks->count > 0){
	 $activities = new ActivityList($this->pageMode, 0, $this->id);
	 $activities->setPaging($this->resultsPageActivity);
	 $activities->setDetails();
	 $detail .= $activities->getListing($baseLink);
	 }

	 if ($this->measureCount > 0){
	 $measures = new MeasureList($this->pageMode, 0, $this->id);

	 $measures->setPaging($this->resultsPageMeasure);
	 $measures->setDetails();
	 $detail .= $measures->getListing($baseLink);
	 }

	 if ($this->totals->materials->count > 0){
	 $materials = new MaterialList($this->pageMode, 0, $this->id);
	 $materials->setPaging($this->resultsPageMaterial);

	 $materials->setDisplay('TASK');
	 $materials->setApproved('no');
	 $materials->setCalendar($this->year,$this->month);
	 $materials->setDetails();
	 $detail .= $materials->getListing($baseLink);
	 }

	 if ($this->totals->receipts->count > 0){
	 $receipts = new ReceiptList($this->pageMode, 0, $this->id);
	 $receipts->setPaging($this->resultsPageReceipt);

	 $receipts->setDisplay('TASK');
	 $receipts->setApproved('no');
	 $receipts->setCalendar($this->year,$this->month);
	 $receipts->setDetails();
	 $detail .= $receipts->getListing($baseLink);
	 }
	 $detail .= closeDiv();
	 return $detail();


	 }
	 
	 
	 public function afterDisplay(){
				
		$detail = $this->totals->display();
		$detail .= $this->displayChildDetails();

		return $detail;
	}
	
	public function options(
		$selectedValue = 0,
		$idName = 'taskId', 
		$disabled = 'false',
		$showLink = true,
		$onChangeJS = NULL,
		$ajaxEvent = NULL,
		$ajaxEventType = NULL){
	
		
		$sql = $this->sql->optionsProject($this->f->projectId, $selectedValue, $disabled);
		
		$defaultValue = 0;
		$defaultCaption = '-No Task';
		$allOptions = getSelectOptionsSQL($sql,$selectedValue,$disabled,$defaultValue,$defaultCaption);		
		
		$select = getSelectList($idName,$allOptions,'none',$disabled,$onChangeJS, $ajaxEvent, $ajaxEventType);
		if ($showLink === true){
			
			$links =$this->links->detailViewEditHref($selectedValue);
			$select .= $links;
		}
		return $select;
	}	
	
	public function afterSetDefaults(){
	
	}
	
	public function editForm(){
		if ($this->pageMode == 'ADD'){		
			//$this->setDefaults();
			$legend = 'Add Task';
		} else {
			$legend = 'Edit Task';
		}
		$entity = 'task';
		//$c = new TaskLinks;
		$contextMenu = $this->links->formatToggleLink('formOptional','+Options');
		$form = openEditForm($entity,$legend,'pr_Task_Save.php',$contextMenu);

		$fields = inputFieldNumber($entity,$this->f->taskOrder,'taskOrder','Order');

		$fields .= inputFieldName($entity,$this->f->name,'name','Task Name');
		
		$l = new taskType();
		$select = $l->options($this->f->idType,'typeId');
		$fields .= captionedInput('Task Type', $select);


		$formRequired = $fields;
		
		$l = new project();
		$input = $l->options($this->f->idproject,'projectId','false',false);
		$fields = captionedInput('Task Project', $input);
		
		
		$l = new location('OPTIONS');
		$select = $l->options($this->f->idLocation,'locationId','false',false);
		$fields .= captionedInput('Location', $select);

		$fields .= inputFieldDescription($entity,$this->f->description,'description');


		$fields .= inputFieldComments($entity,$this->f->summary,'summary','Summary');
		
		$fields .= inputFieldTimestamp($entity, 'started', $this->f->started, 'Start Date'); 		
				
		$fields .= inputFieldNumber($entity,$this->f->hoursEstimated,'hoursEstimated','Estimated');
		
		$tooltip = 'Add activity details to record hours';
		$fields .= inputFieldNumber($entity,$this->f->hoursActual,'hoursActual','Actual');
		
		$fields .= inputFieldNumber($entity,$this->f->pctDone,'pctDone','% Done');
		
		$fields .= inputFieldComments($entity,$this->f->hoursNotes,'hoursNotes','Effort Notes',4000);


		if ($this->totals->materials->count > 0) {
			if ($_SESSION['is-admin'] == 'yes'){
				//current user is admin, allow editing approvals
				$input = 'Costs Approved:'.getSelectYesNo('materialsAuthProject', $this->f->materialsAuthProject);
				if ($this->f->materialsAuthProject == 'no'){
					$this->f->materialsAuthBy = $_SESSION['login-name'];
				}
				$input .= spacer().'By:'.getTextInput('materialsAuthBy', $this->f->materialsAuthBy, 30, 50);
			} else {
				//materials present but user cannot edit approvals
				$input = 'Costs Approved:'.$this->f->materialsAuthProject;
				$input .= getHiddenInput('materialsAuthProject', $this->f->materialsAuthProject);
				$input .= spacer().'By:'.$this->f->materialsAuthBy;
				$input .= getHiddenInput('materialsAuthBy', $this->f->materialsAuthBy);	
			}
		} else {
			//no materials under task, dont show authorization fields
			$input = getHiddenInput('materialsAuthProject', $this->f->materialsAuthProject);
			$input .= getHiddenInput('materialsAuthBy', $this->f->materialsAuthBy);	
			$input .= 'No Task Costs';
		}
		$fields .= captionedInput('Costs', $input);


		if ($this->receiptCount > 0) {
			if ($_SESSION['is-admin'] == 'yes'){
				//current user is admin, allow editing approvals
				$input = 'Receipts Approved:'.getSelectYesNo('receiptsAuthProject', $this->f->receiptsAuthProject);
				if ($this->f->receiptsAuthProject == 'no'){
					$this->f->receiptsAuthBy = $_SESSION['login-name'];
				}
				$input .= spacer().'By:'.getTextInput('receiptsAuthBy', $this->f->receiptsAuthBy, 30, 50);
			} else {
				//materials present but user cannot edit approvals
				$input = 'Receipts Approved:'.$this->f->receiptsAuthProject;
				$input .= getHiddenInput('receiptsAuthProject', $this->f->receiptsAuthProject);
				$input .= spacer().'By:'.$this->f->receiptsAuthBy;
				$input .= getHiddenInput('receiptsAuthBy', $this->f->receiptsAuthBy);	
			}
		} else {
			//no materials under task, dont show authorization fields
			$input = getHiddenInput('receiptsAuthProject', $this->f->receiptsAuthProject);
			$input .= getHiddenInput('receiptsAuthBy', $this->f->receiptsAuthBy);	
			$input .= 'No Task Income';
		}
		$fields .= captionedInput('Income',$input);		
		
		$formOptional = $fields;
		
		$hidden = getHiddenInput('mode', $this->pageMode);
		$hidden .= getHiddenInput('id', $this->f->id);

		$input = getSaveChangesResetButtons();
		$formSubmit = $hidden.$input;

		$form .= closeEditForm($entity,$formRequired,$formOptional,$formSubmit);
		return $form;
	}
	
		

	
	
	public function updateActivitySummary(){	
		
		$this->summarizeActivity();
				
		$sql = " UPDATE tasks as t ";
		$sql .= " SET ";
		$sql .= " t.updated = CURRENT_TIMESTAMP, ";		
		$sql .= " t.hours_actual = 	".$this->f->hoursActual.", ";
		$sql .= " t.hours_estimated = ".$this->f->hoursEstimated." ";
		$sql .= " WHERE t.id = ".$this->f->id." ";
		
		$result = dbRunSQL($sql);

		$this->project->UpdateTaskSummary();

	}

	public function resetMaterialsAuthorization(){	
		$this->f->materialsAuthProject = 'no';
		$this->f->materialsAuthBy = 'Not Approved';
		$project = $this->f->materialsAuthProject;
		$by = $this->f->materialsAuthBy;
		
		$sql = $this->sql->updateMaterialsAuth($this->f->id, $project, $by);
		
		$result = dbRunSQL($sql);
		
		$this->setMaterialsActualCost();
	}
	
	private function setMaterialsActualCost(){
		if ($this->f->materialsAuthProject == 'yes'){
			$sql = " UPDATE materials as m ";
			$sql .= " SET m.cost_actual = m.cost_estimated ";
			$sql .= " WHERE m.task_id = ".$this->f->id." ";
		} else {
			$sql = " UPDATE materials as m ";
			$sql .= " SET m.cost_actual = 0 ";
			$sql .= " WHERE m.task_id = ".$this->f->id." ";			
		}
		$result = dbRunSQL($sql);
	}

	public function resetReceiptsAuthorization(){	
		$this->receiptsAuthProject = 'no';
		$this->receiptsAuthBy = 'Not Approved';
		
		$project = $this->f->receiptsAuthProject;
		$by = $this->f->receiptsAuthBy;
		
		$sql = $this->sql->updateReceiptsAuth($this->f->id, $project, $by);
		$result = dbRunSQL($sql);
	}
	
	protected function afterCollectPostValues(){
	
	}

	private function copyTask(){
	
		$idSource = $this->id;
		
		$sql = $this->sql->copy($idSource);

		$result = dbRunSQL($sql);
		$idCopy = dbInsertedId();
		
			$this->id = $idCopy;
			$this->pageMode = 'EDIT';

	}

	protected function saveUpdate(){
			$sql = " UPDATE tasks AS t ";
			$sql .= " SET ";
			$sql .= " t.project_id = ".$this->f->idProject.", ";
			$sql .= " t.task_order = ".$this->f->taskOrder.", ";
			$sql .= " t.location_id = ".$this->f->idLocation.", ";
			$sql .= " t.started = '".$this->f->started."', ";
			$sql .= " t.name = '".$this->f->name."', ";
			$sql .= " t.description = '".$this->f->description."', ";
			$sql .= " t.summary = '".$this->f->summary."', ";
			$sql .= " t.updated = CURRENT_TIMESTAMP, ";
			$sql .= " t.type_id = ".$this->f->idType.", ";
			$sql .= " t.hours_estimated = ".$this->f->hoursEstimated.", ";
			$sql .= " t.pct_done = ".$this->f->pctDone.", ";
			$sql .= " t.hours_notes = '".$this->f->hoursNotes."', ";
			$sql .= " t.materials_auth_project = '".$this->f->materialsAuthProject."', ";
			$sql .= " t.materials_auth_by = '".$this->f->materialsAuthBy."', ";
			$sql .= " t.receipts_auth_project = '".$this->f->receiptsAuthProject."', ";
			$sql .= " t.receipts_auth_by = '".$this->f->receiptsAuthBy."' ";

			$sql .= " WHERE t.id = ".$this->f->id." ";	
		
			$result = dbRunSQL($sql);
			
			$this->setMaterialsActualCost();			
			$this->project->UpdateTaskSummary();
	}
	
	protected function saveInsert(){
			$sql = " INSERT INTO tasks ";
			$sql .= " (name, ";
			$sql .= " project_id, ";
			$sql .= " location_id, ";
			$sql .= " type_id, ";			
			$sql .= " task_order, ";
			$sql .= " description, ";
			$sql .= " summary, ";
			$sql .= " started, ";
			$sql .= " updated, ";
			$sql .= " hours_estimated, ";
			$sql .= " hours_actual, ";
			$sql .= " hours_notes, ";
			$sql .= " materials_auth_project, ";
			$sql .= " materials_auth_by, ";
			$sql .= " receipts_auth_project, ";
			$sql .= " receipts_auth_by) ";

			$sql .= " VALUES (";
			$sql .= " '".$this->f->name."', ";
			$sql .= " ".$this->f->idProject.", ";
			$sql .= " ".$this->f->idLocation.", ";		
			$sql .= " ".$this->f->idType.", ";			
			$sql .= " ".$this->f->taskOrder.", ";
			$sql .= " '".$this->f->description."', ";
			$sql .= " '".$this->f->summary."', ";
			$sql .= " '".$this->f->started."', ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= " ".$this->f->hoursEstimated.", ";
			$sql .= " 0, ";
			$sql .= " '".$this->f->hoursNotes."', ";
			$sql .= " '".$this->f->materialsAuthProject."', ";
			$sql .= " '".$this->f->materialsAuthBy."', ";
			$sql .= " '".$this->f->receiptsAuthProject."', ";
			$sql .= " '".$this->f->receiptsAuthBy."') ";
			
		$result = dbRunSQL($sql);
			$this->id = dbInsertedId();

			$this->project->UpdateTaskSummary();
			
	}
	
} 
?>
