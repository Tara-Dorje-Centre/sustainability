<?php 
class unitOfMeasureFields extends _fieldsetEntityType{
    public $symbol;	
    public $unitType;
    
	public function __construct(){
		parent::__construct();
		$this->symbol = new _nameField('symbol','symbol','Symbol');
		$this->unitType = new _nameField('type','unit-type','Unit Type');
		$this->_register('symbol',$this->symbol);
		$this->_register('unitType',$this->unitType);
		
	}
	
	public function setDefaults(){
		parent::setDefaults();
		$this->unitType->setDefault('unit');
		$this->symbol->setDefault('unit');
	}
	
    
}

class unitOfMeasure extends _entityType{
	public function __construct($mode = 'VIEW', $id = 0, $idParent = 0){
		$this->__MyClassName = 'unitOfMeasure';
		parent::__construct($mode, $id, $idParent);
		$this->_titleEntity = 'Unit of Measure';
		$this->pageSave = 'pr_UnitOfMeasure_Save.php';
	
		$this->f = new unitOfMeasureFields();
		$this->sql = new unitOfMeasureSQL();
		$this->links = new unitOfMeasureLinks();
	}
	
	
	protected function pageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';
		
		$units = new UnitOfMeasureLinks($menuType,$menuStyle);
		$measureTypes = new MeasureTypeLinks($menuType,$menuStyle);
		$menuL = new MenuLinks($menuType,$menuStyle);
		
		$menu = $units->openMenu('section-heading-links');
		$menu .= $menuL->linkReference();
		$menu .= $units->resetMenu();
		if ($this->pageMode == 'VIEW'){
			$menu .= $units->detailEditHref($this->id);
		} elseif ($this->pageMode == 'EDIT'){
			$menu .= $units->detailViewHref($this->id);
		}
		$menu .= $units->listingHref();
		//$menu .= $measureTypes->listingHref();
		
		$menu .= $units->closeMenu();
		return $menu;
	}
	
	
	
	public function options(
		$selectedValue = 0, 
		$idName = 'unitOfMeasureId', 
		$disabled = 'false', 
		$showLink = true,
		$changeJS = NULL){
	
		$sql = $this->sql->options($selectedValue,$disabled);
		
		$defaultValue = '0';
		$defaultCaption = '-select Unit Type';
		$allOptions = getSelectOptionsSQL($sql,$selectedValue,$disabled,$defaultValue,$defaultCaption);		
				
		$select = getSelectList($idName,$allOptions,'none',$disabled,$changeJS);
		
		if ($showLink == true){
			$links =$this->links->detailViewEditHref($selectedValue);
			$select .= $links;
		}
		return $select;
	}	
	
	
	
	protected function editForm(){
	
		$entity = 'unit-of-measure';
		$contextMenu = $this->links->formatToggleLink('formOptional','+Options');

		$edit = new _inputForm($entity,$this->pageMode,$this->pageSave);
		$edit->open($contextMenu,$this->_titleEntity);
		$edit->required->addContent($this->f->name->input());
		
		$edit->required->addContent($this->f->symbol->input());
		$edit->required->addContent($this->f->unitType->input());
		
		$edit->required->addContent($this->f->displayOrder->input());
		$edit->required->addContent(inputFieldHighlightStyle($entity,$this->f->highlight->value(),'highlight'));
		$edit->optional->addContent($this->f->description->input());
		$edit->optional->addContent($this->f->notes->input());
		$edit->hidden->addContent(getHiddenInput('mode', $this->pageMode));
		$edit->hidden->addContent($this->f->id->inputHidden());
		$edit->submit->addContent(getSaveChangesResetButtons());
		return $edit->close();
		
		
	}
	/*
	public function collectPostValues(){
		/*$this->f->id = $_POST['id'];
		$this->id = $this->f->id;
		/$this->f->name = dbEscapeString($_POST['name']); 
		$this->f->type = dbEscapeString($_POST['type']); 
		$this->f->symbol = dbEscapeString($_POST['symbol']); 
		$this->f->notes = dbEscapeString($_POST['notes']); 		
		$this->pageMode = $_POST['mode'];	
	}
*/
	public function saveUpdate(){
	
			$sql = " UPDATE units_of_measure AS p ";
			$sql .= " SET ";
			$sql .= " p.name = '".$this->f->name->value()."', ";
			$sql .= " p.type = '".$this->f->type->value()."', ";
			$sql .= " p.symbol = '".$this->f->symbol->value()."', ";
			$sql .= " p.updated = CURRENT_TIMESTAMP, ";
			$sql .= " p.notes = '".$this->f->notes->value()."' ";
			$sql .= " WHERE p.id = ".$this->f->id->value()."  ";			
			$result = dbRunSQL($sql);

	}
	
	protected function saveInsert(){
	
			$sql = " INSERT INTO units_of_measure ";
			$sql .= " (name, ";
			$sql .= " created, ";
			$sql .= " updated, ";
			$sql .= " type, ";
			$sql .= " symbol, ";
			$sql .= " notes) ";
			$sql .= " VALUES (";
			$sql .= "'".$this->f->name->value."', ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= "'".$this->f->type->value()."', ";
			$sql .= "'".$this->f->symbol->value()."', ";
			$sql .= "'".$this->f->notes->value()."') ";
			
			$result = dbRunSQL($sql);
			
			$this->id = dbInsertedId();
			$this->f->id-set($this->id);
	}
} 
?>
