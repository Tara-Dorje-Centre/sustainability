<?php 
class unitOfMeasureFields extends _entityTypeFields{
	/******
_entityFields    id, name, description, 
highlightStyle, created, updated
idType, idParent,

_entityTypeFields  notes, displayOrder
****/
    public $symbol;	
    public $type;
	
	public function setRowValues($row){
		parent::setRowValues($row);
		$this->type = ($row["type"]);
		$this->symbol = ($row["symbol"]);	
	}
	
	protected function formatForDisplay(){
		parent::formatForDisplay();
		$this->type = displayLines($this->type);
		$this->symbol = displayLines($this->symbol);
	}
	
	public function listHeading(){
		$heading = parent::listHeading();
		$heading .= wrapTh('Type');
		$heading .= wrapTh('Symbol');
		return $heading;
	}
	
	public function listDetail(){
		$detail = parent::listDetail();
		$detail .= wrapTd($this->type);
		$detail .= wrapTd($this->symbol);
		return $detail;
	}

	public function displayDetail(){
		$detail = parent::displayDetail();
		$detail .= captionedParagraph('type', 'Type', $this->f->type);
		$detail .= captionedParagraph('symbol', 'Symbol', $this->f->symbol);
		return $detail;
	}
    
}

class unitOfMeasure extends _entityType{
	protected $__MyClassName = 'UnitOfMeasure';
	protected $_titleEntity = 'Unit of Measure';
   
	
	protected function setHelperClasses(){
		$this->f = new unitOfMeasureFields();
		$this->sql = new unitOfMeasureSQL();
		$this->links = new unitOfMeasureLinks();
	}
	
	
	protected function pageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';
		
		$units = new UnitOfMeasureLinks($menuType,$menuStyle);
		$measureTypes = new MeasureTypeLinks($menuType,$menuStyle);
		$menuL = new MenuLinks($menuType,$menuStyle);
		
		$menu = $units->openMenu('section-heading-links');
		$menu .= $menuL->linkReference();
		$menu .= $units->resetMenu();
		if ($this->pageMode == 'VIEW'){
			$menu .= $units->detailEditHref($this->id);
		} elseif ($this->pageMode == 'EDIT'){
			$menu .= $units->detailViewHref($this->id);
		}
		$menu .= $units->listingHref();
		//$menu .= $measureTypes->listingHref();
		
		$menu .= $units->closeMenu();
		return $menu;
	}
	
	
	
	public function options(
		$selectedValue = 0, 
		$idName = 'unitOfMeasureId', 
		$disabled = 'false', 
		$showLink = true,
		$changeJS = NULL){
	
		$sql = $this->sql->options($selectedValue,$disabled);
		
		$defaultValue = '0';
		$defaultCaption = '-select Unit Type';
		$allOptions = getSelectOptionsSQL($sql,$selectedValue,$disabled,$defaultValue,$defaultCaption);		
				
		$select = getSelectList($idName,$allOptions,'none',$disabled,$changeJS);
		
		if ($showLink == true){
			$links =$this->links->detailViewEditHref($selectedValue);
			$select .= $links;
		}
		return $select;
	}	
	
	
	
	protected function editForm(){
		$this->setDefaults();
		if ($this->pageMode == 'ADD'){		

			$legend = 'Add Unit of Measure';
		} else {
			$legend = 'Edit Unit of Measure';	
		}

		$entity = 'unit-of-measure';
		$c = new ProjectLinks;
		$contextMenu = $c->formatToggleLink('formOptional','+Options');
		$form = openEditForm($entity,$legend,'pr_UnitOfMeasure_Save.php',$contextMenu);
		
		//begin required fields
		$fields = inputFieldName($entity,$this->name,'name','Name',50);
	
		//end required fields
		$formRequired = $fields;


		//start optional fields
		$fields = inputFieldName($entity,$this->type,'type','Type',50);
		
		$fields .= inputFieldName($entity,$this->symbol,'symbol','Symbol',10);


		$fields .= inputFieldComments($entity,$this->notes,'notes','Notes',1000);

		//end optional fields (hidden by default)
		$formOptional = $fields;

		
		$hidden = getHiddenInput('mode', $this->pageMode);
		$hidden .= getHiddenInput('unitOfMeasureId', $this->id);
		$input = getSaveChangesResetButtons();
		$formSubmit = $hidden.$input;

		$form .= closeEditForm($entity,$formRequired,$formOptional,$formSubmit);		
		return $form;
	}
	
	public function collectPostValues(){
		$this->f->id = $_POST['id'];
		$this->id = $this->f->id;
		$this->f->name = dbEscapeString($_POST['name']); 
		$this->f->type = dbEscapeString($_POST['type']); 
		$this->f->symbol = dbEscapeString($_POST['symbol']); 
		$this->f->notes = dbEscapeString($_POST['notes']); 		
		$this->pageMode = $_POST['mode'];	
	}

	public function saveUpdate(){
	
			$sql = " UPDATE units_of_measure AS p ";
			$sql .= " SET ";
			$sql .= " p.name = '".$this->f->name."', ";
			$sql .= " p.type = '".$this->f->type."', ";
			$sql .= " p.symbol = '".$this->f->symbol."', ";
			$sql .= " p.updated = CURRENT_TIMESTAMP, ";
			$sql .= " p.notes = '".$this->f->notes."' ";
			$sql .= " WHERE p.id = ".$this->f->id."  ";			
			$result = dbRunSQL($sql);

	}
	
	protected function saveInsert(){
	
			$sql = " INSERT INTO units_of_measure ";
			$sql .= " (name, ";
			$sql .= " created, ";
			$sql .= " updated, ";
			$sql .= " type, ";
			$sql .= " symbol, ";
			$sql .= " notes) ";
			$sql .= " VALUES (";
			$sql .= "'".$this->f->name."', ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= "'".$this->f->type."', ";
			$sql .= "'".$this->f->symbol."', ";
			$sql .= "'".$this->f->notes."') ";
			
			$result = dbRunSQL($sql);
			
			$this->id = dbInsertedId();
	}
} 
?>
