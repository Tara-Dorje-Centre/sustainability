<?php 


 class measureTypeUnitFields extends _fieldsetEntity{
 //additional properties
 
	/*

	 public $unitOfMeasureId = 0;	
	 public $measureType;
	 public $measureTypeName;
	 public $unitType;
	 public $unitOfMeasure;
	 public $unitSymbol;
	 public $created;	
	 public $updated;*/
 public $dateField;
 public $textField;
 public $numericField;
 //expose primary fields
 public function __construct(){

 }
 //set additional fields
 public function setRow($row){
 parent::setRow();
 $this->dateField = $row["date_reported"];
 $this->textField= ($row["done_by"]);
 $this->numericField = $row["quantity"];	
 
 
	 /*	$this->measureTypeId = $row["measure_type_id"];
	  $this->unitOfMeasureId = $row["unit_measure_id"];
	  $this->created = $row["created"];
	  $this->updated = $row["updated"];	
	  $this->measureTypeName = ($row["measure_type"]);
	  $this->unitOfMeasure = ($row["unit_of_measure"]);
	  $this->unitSymbol = ($row["unit_symbol"]);
	  $this->unitType = ($row["unit_type"]);*/
 }
 //defaults for additional fields
 public function defaults(){
 parent::defaults();
 $this->field = 1;
 }
 //format custom fields
 public function format(){
 parent::format();
 $this->textField = formatText($this->notes);
 $this->dateField = formatDate($this->dateReported);
 }
 //display custom fields for VIEW
 public function display(){
 $this->addContent(parent::display(),true);
 $this->detailPara('caption',$this->field);
 
	 /*	$detail .= captionedParagraph('measure-type','Measure Type',$this->getMeasureTypeAndUnitSymbol());
	  $u = new UnitOfMeasure;
	  $select = $u->options($this->unitOfMeasureId,'unitOfMeasureId','true');
	  $detail .= captionedParagraph('units','Units',$select);		
	  $detail .= captionedParagraph('unit-type','Unit Type',$this->unitType);
	  $detail .= captionedParagraph('updated','Updated',$this->updated);		
	  $detail .= captionedParagraph('created','Created',$this->created);
	  */
 
 return $this->getContent();
 }
 //add custom columns
 public function listHeading(){
 $this->addContent(parent::listHeading(),true);
 $this->listTh('caption');
 return $this->getContent();
 }
 public function listDetail(){
 $this->addContent(parent::listDetail(),true);
 $this->listTd($this->field);
 return $this->getContent();
 }
 //get edit form values
 public function getPostVars(){
 parent::getPostVars();
 $this->textField = $this->postString('notes'); 
 $this->dateField = $this->postDate('dateReported');
 $this->numericField = $this->postVar('quantity'); 
 
	 /*	$this->idParent = $_POST['measureTypeId'];
	  $this->measureType->id = $this->idParent;
	  $this->id = $_POST['measureTypeUnitId'];
	  $this->unitOfMeasureId = $_POST['unitOfMeasureId']; 
	  */
 }

 }


class measureTypeUnit extends _entity{
	protected $__MyClassName = 'MeasureTypeUnit';
	
 	public function __construct($mode = 'VIEW', $id = 0, $idParent = 0){
		parent::__construct($mode, $id, $idParent);
	
		$this->f = new measureTypeUnitFields;
		$this->l = new measureTypeUnitLinks;
		$this->sql = new measureTypeUnitSQL;
		$this->measureType = new measureType($this->pageMode, $this->idParent);
	}
	public function beforeSetDetails(){
		
	}
	public function afterSetDetails(){
		$this->measureType->setDetails('VIEW');
	}	
	public function afterSetDefaults(){

	}
	protected function setPageTitle(){	
		$title = openDiv('section-heading-title','none');
		
		
		$title .= 'Measure Type:&nbsp;'.$this->measureType->name.br();
		$title .= 'Units:'.$this->unitOfMeasure;		
		$title .= closeDiv();
		$this->_pageTitle = $title;
	}
	
	
	protected function setPageMenu(){
		
		$mtul = new MeasureTypeUnitLinks;
		
		$menu = openDiv('section-heading-links','menu-links-list');
		if ($this->pageMode == 'VIEW'){
			$menu .= $mtul->detailEditHref($this->id,'Edit');
		}
		if ($this->pageMode == 'EDIT'){
			$menu .= $mtul->detailViewHref($this->id,'View');
		}
		if ($this->pageMode != 'ADD'){
			$menu .= $mtul->detailAddHref($this->measureType->id);
		}
		$menu .= $mtul->listingHref($this->measureType->id,'MeasureType Units');
		$menu .= $mtul->listingHref(0,'All MeasureType Units');

		$menu .= closeDiv();
		return $menu;
	}
		
	public function getMeasureTypeAndUnitSymbol(){
		$text = $this->measureTypeName.'('.$this->unitSymbol.')';
		return $text;
	}
	

	
	public function afterDisplay(){
	
	}

	public function options(
		$selectedValue = 0, 
		$idName = 'measureTypeUnitId', 
		$disabled = 'false',
		$showLink = false,
		$changeJS = NULL){
		
		$sql = $this->sql->options($selectedValue,$disabled);
		
		$defaultValue = '0';
		$defaultCaption = '-select Measure Type Units';
		$allOptions = getSelectOptionsSQL($sql,$selectedValue,$disabled,$defaultValue,$defaultCaption);		
		
		$select = getSelectList($idName,$allOptions,'none',$disabled,$changeJS);
		if ($showLink === true){
			$l = new MeasureTypeUnitLinks;
			$links =$l->detailViewEditHref($selectedValue);
			$select .= $links;
		}
		return $select;
	}
		
	public function editForm(){
		if ($this->pageMode == 'ADD'){
			$legend = 'Add Measure Type Unit';
		} else {
			$legend = 'Edit Measure Type Unit';
		}

		$entity = 'measure-type-unit';
		$c = new ProjectTypeLinks;
		//$contextMenu = $c->formatToggleLink('formOptional','+Measure Type Unit Options');
		$contextMenu = NULL;
		$form = openEditForm($entity,$legend,'pr_MeasureTypeUnit_Save.php',$contextMenu);

		$u = new UnitOfMeasure;
		$select = $u->getUnitOfMeasureSelectList($this->unitOfMeasureId,'unitOfMeasureId','false');
		$fields =inputFieldSelect($entity, $select,'Unit Type');
		
		$formRequired = $fields;
		
		$formOptional = NULL;
		
		//hidden fields and submit,reset buttons
		$hidden = getHiddenInput('mode', $this->pageMode);
		$hidden .= getHiddenInput('measureTypeId', $this->measureTypeId);
		$hidden .= getHiddenInput('measureTypeUnitId', $this->id);
		$input = getSaveChangesResetButtons();
		$formSubmit = $hidden.$input;
			
		$form .= closeEditForm($entity,$formRequired,$formOptional,$formSubmit);
		return $form;
	}
	
	public function afterCollectPostValues(){
		//called by save form prior to running adds/updates
	//	$this->pageMode = $_POST['mode'];
		
	
	}

	protected function saveUpdate(){
	
			$sql = " UPDATE measure_type_units m ";
			$sql .= " SET ";
			$sql .= " m.measure_type_id = ".$this->measureType->id.", ";
			$sql .= " m.unit_measure_id = ".$this->unitOfMeasureId.", ";
			$sql .= " m.updated = CURRENT_TIMESTAMP ";
			$sql .= " WHERE m.id = ".$this->id." ";

			$result = dbRunSQL($sql);
	}
			
	protected function saveInsert(){
	
			$sql = " INSERT INTO measure_type_units ";
			$sql .= " (measure_type_id, ";
			$sql .= " unit_measure_id, ";
			$sql .= " updated, ";
			$sql .= " created) ";
			$sql .= " VALUES (";
			$sql .= " ".$this->measureType->id.", ";
			$sql .= " ".$this->unitOfMeasureId.", ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= " CURRENT_TIMESTAMP) ";
			
			$result = dbRunSQL($sql);
			
			$this->id = dbInsertedId();
	}
	
	
	
} 
?>
