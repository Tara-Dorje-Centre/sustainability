<?php 

/*
 ^_currentUser set to $_SESSION['login-name']
 °_currentTimestamp set to $sessionTime
 
 _fieldsetTaskChild
 id, name, description
 created°, updated°, highlight
 parentEntity, typeEntity
 project, projectType, location
 started°, approved,approvedBy^
 task, taskType, reported°,doneBy^
 notes, linkUrl, linkText
*/


class measureFields extends _fieldsetTaskChild{
	// public $dateReported;
	 public $value;	
	 public $measureTypeUnit;	
	 public $measureType;
	 public $unitType;
	 public $unitSymbol;
	// public $notes;

 public function __construct(){

 

 }


 public function setRow($row){
 parent::setRow();

	//  $this->name = ($row["name"]);
	//  $this->description = ($row["description"]);
	  $this->dateReported = $row["date_reported"];
	
	  $this->value = $row["value"];	
	  $this->measureTypeUnitId = $row["measure_type_unit_id"];						
	  $this->measureType = ($row["measure_type"]);
	  $this->unitSymbol = ($row["unit_symbol"]);
	  $this->unitType = ($row["unit_type"]);
	  $this->notes = ($row["notes"]);

 }

 public function defaults(){
 parent::defaults();

	 
 }/*

 public function format(){
 parent::format();

 $this->notes = formatText($this->notes);
 $this->dateReported = formatDate($this->dateReported);

 }
*
 public function display(){
 $this->addContent(parent::display(),true);
 $this->detailPara('Reported',$this->dateReported);
 
	 
	
	  $detail .= captionedParagraph('measure-value','Value',$this->value);
	/*  $m = new MeasureTypeUnit;
	  $select = $m->options($this->measureTypeUnitId,'measureTypeUnitId','true');*/
	  $detail .= captionedParagraph('measure-type-units','Measure Type', $select);
	  $detail .= captionedParagraph('unit-of-measure','Unit Type',$this->unitType);
 
 
 $this->detailPara('Notes',$this->notes);
 return $this->getContent();
 }

 public function listHeading(){
 $this->addContent(parent::listHeading(),true);
 $this->listTh('caption');
 
 /*	$heading =  wrapTh('Measure Type');
		$heading .=  wrapTh('Value');
		$heading .=  wrapTh('Name');
		$heading .=  wrapTh('Description');
		$heading .=  wrapTh('Date Reported');*/
 
 return $this->getContent();
 }

 public function listDetail(){
 $this->addContent(parent::listDetail(),true);


/*	$link = $ml->detailViewEditHref($m->id,$m->getMeasureTypeAndUnitSymbol());
			$detail =  wrapTd($link);			
			$detail .=  wrapTd($m->value);
			$detail .= wrapTd($m->name);
			$detail .=  wrapTd($m->description);
			$detail .=  wrapTd($m->dateReported);*/


 $this->listTd($this->field);
 return $this->getContent();
 }

 public function getPostVars(){
 		parent::getPostVars();
		$this->measureTypeUnitId = $this->postString('measureTypeUnitId'); 
		$this->value = $this->postString('value'); 
		$this->notes = $this->postString('notes'); 
		$this->dateReported = $this->postDate('dateReported');
 }

 }
 

class measure extends _entity {

protected $_MyClassName = 'Measure';
	protected $titleEntity = 'Measurement';
  	protected $pageSave = 'pr_Measure_Save.php';


	public $task;	
	//public $sql;
	
    
	public function __construct($mode = 'VIEW', $id = 0, $idParent = 0){
		parent::__construct($mode, $id, $idParent);
	//public function setHelperClasses(){
		$this->f = new MeasureFields();
		$this->links = new MeasureLinks();
		$this->sql = new MeasureSQL();
	}
		protected function beforeSetDetails(){
		}
		
	protected function afterSetDetails(){
	
		$this->setParentTask();			
		
	}	
	
	public function setParentTask(){
		$this->task->setDetails($this->pageMode, $this->task->id);
	}
		
	protected function setPageTitle(){	
		
		$title .= $this->task->project->name.br();
		$title .= 'Task: '.$this->task->name;		

		$this->_pageTitle = $title;
	}
	
	
	protected function setPageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';
		
		$projects = new ProjectLinks($menuType,$menuStyle);
		$tasks = new TaskLinks($menuType,$menuStyle);
		$measures = new MeasureLinks($menuType,$menuStyle);
					
		$menu = $projects->openMenu('section-heading-links');

		$menu .= $tasks->detailViewHref($this->task->id);
		$menu .= $projects->detailViewHref($this->task->project->id);			
		//$menu .= $measures->listingHref($this->task->id);
		$menu .= $projects->resetMenu();
		if ($this->pageMode == 'VIEW'){
			$menu .= $measures->detailEditHref($this->id);
		}
		if ($this->pageMode == 'EDIT'){
			$menu .= $measures->detailViewHref($this->id);
		}
		
		$menu .= $projects->closeMenu();
		$this->_pageMenu = $menu;
	}
		

	public function getMeasureTypeAndUnitSymbol(){
		$t = $this->measureType.'('.$this->unitSymbol.')';
		return $t;
	}
	protected function afterDisplay(){	
	
	}


	protected function afterSetDefaults(){	
	}
	
	public function editForm(){
		if ($this->pageMode == 'ADD'){		
			//$this->setDefaults();
			$legend = 'Add Measure';
		} else {
			$legend = 'Edit Measure';
		}
		$entity = 'measure';
		$c = new ProjectTypeLinks;
		$contextMenu = $c->formatToggleLink('formOptional','+Options');
		$form = openEditForm($entity,$legend,'pr_Measure_Save.php',$contextMenu);


		
		$fields = inputFieldNumber($entity,$this->value,'value','Value');

		$m = new MeasureTypeUnit;
		$select = $m->options($this->measureTypeUnitId,'measureTypeUnitId','false',false);
		$fields .= captionedInput('Measure Type',$select);

		$fields .= inputFieldTimestamp($entity, 'dateReported', $this->dateReported, 'Date Reported'); 		
		
		//end formRequired
		$formRequired = $fields;
		
		//formOptional
		$fields = inputFieldName($entity,$this->name,'name','Measure');

		$fields .= inputFieldDescription($entity,$this->description,'description');

		$fields .= inputFieldNotes($entity,$this->notes,'notes');

		$formOptional = $fields;

		//hidden fields and submit,reset buttons
		$hidden = getHiddenInput('mode', $this->pageMode);
		$hidden .= getHiddenInput('taskId', $this->task->id);
		$hidden .= getHiddenInput('locationId', $this->locationId);

		$hidden .= getHiddenInput('measureId', $this->id);
		$input = getSaveChangesResetButtons();
		$formSubmit = $hidden.$input;
	
		$form .= closeEditForm($entity,$formRequired,$formOptional,$formSubmit);		
		return $form;
	}
	
	public function afterCollectPostValues(){
		//called by save form prior to running adds/updates
		
		$this->setParentTask();
	}

	protected function saveUpdate(){
	

			
			$sql = " UPDATE measures m ";
			$sql .= " SET ";
			$sql .= " m.name = '".$this->name."', ";
			$sql .= " m.description = '".$this->description."', ";
			$sql .= " m.notes = '".$this->notes."', ";
			$sql .= " m.updated = CURRENT_TIMESTAMP, ";
			$sql .= " m.value = ".$this->value.", ";
			$sql .= " m.date_reported = '".$this->dateReported."', ";
			$sql .= " m.location_id = ".$this->locationId.", ";
			$sql .= " m.measure_type_unit_id = ".$this->measureTypeUnitId." ";
			$sql .= " WHERE m.id = ".$this->id." ";

			$result = dbRunSQL($sql);
			
	}
	
	protected function saveInsert(){
	
			$sql = " INSERT INTO measures ";
			$sql .= " (name, ";
			$sql .= " task_id, ";
			$sql .= " location_id, ";
			$sql .= " measure_type_unit_id, ";
			$sql .= " date_reported, ";
			$sql .= " value, ";
			$sql .= " description, ";
			$sql .= " notes) ";
			$sql .= " VALUES (";
			$sql .= "'".$this->name."', ";
			$sql .= " ".$this->task->id.", ";
			$sql .= " ".$this->locationId.", ";
			$sql .= "".$this->measureTypeUnitId.", ";
			$sql .= " '".$this->dateReported."', ";
			$sql .= "".$this->value.", ";
			$sql .= "'".$this->description."', ";
			$sql .= "'".$this->notes."') ";
			
			$result = dbRunSQL($sql);
			
			$this->id = dbInsertedId();
	
	}
	
} 
?>
