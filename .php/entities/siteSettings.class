<?php 

class siteSettingsFields extends _fieldset{
	 public $siteTitle;
	 public $siteUrl;
	 public $loginNotice;
	 public $organizationUrl;
	 public $organization;
	 public $organizationDescription;
	 public $contactName;
	 public $contactEmail;
	 public $showPublicSite;
	 public $showCostReports;
	 public $showRevenueReports;
	 public $publicFillColor;
	 public $publicSiteColor;
	 public $publicPageColor;
	 public $publicMenuColor;
	 public $publicMenuColorHover;
	 public $publicTextColor;
	 public $publicTextColorHover;			
	 public $publicFontFamily;
	 public $publicFontSizeTitle;
	 public $publicfontSizeHeading;
	 public $publicFontSizeMenu;
	 public $publicFontSizeText;
	 
	public function __construct(){
		
	    $this->echoPrint(true,'begin','__construct','siteSettingsFields');
		$this->siteTitle = new _nameField('site_title','site-title','Site.Title');
	 	$this->siteUrl = new _urlField('site_url','site-url','Site.URL');
	 	$this->loginNotice = new _notesField('login_notice','site-login-notice', 'Login.Notice');
	 	$this->organizationUrl = new _urlField('organization_url','organization-url','Organization.URL');
	 	$this->organization = new _nameField('organization','organization','Organization');
	 	$this->organizationDescription = new _descriptionField('organization_description','organization-description','Organization.Description');
	 	$this->contactName = new _nameField('contact_name','contact-name','Contact Name');
	 	$this->contactEmail = new _emailField('contact_email','contact-email','Contact Email');
		$this->showPublicSite = new _yesNoField('show_public_site','show-public-site','show.Public.Site');
		$this->showCostReports = new _yesNoField('show_cost_reports','show-cost-reports','show.Cost.Reports');
		$this->showRevenueReports = new _yesNoField('show_revenue_reports','show-revenue-reports','show.Revenue.Reports');
		$this->publicFillColor = new _cssColorField('public_fill_color','public-fill-color','public.Fill.Color');
		$this->publicSiteColor = new _cssColorField('public_site_color','public-site-color','public.Site.Color');
		$this->publicPageColor = new _cssColorField('public_page_color','public-page-color','public.Page.Color');
		$this->publicMenuColor = new _cssColorField('public_menu_color','public-menu-color','public.Menu.Color');
		$this->publicMenuColorHover = new _cssColorField('public_menu_color_hover','public-menu-color-hover','public.Menu.Color.Hover');
	 	$this->publicTextColor = new _cssColorField('public_text_color','public-text-color','public.Text.Color');
	 	$this->publicTextColorHover = new _cssColorField('public_text_color_hover','public-text-color-hover','public.Text.Color.Hover');
	 	$this->publicFontFamily = new _fontFamilyField('public_font_family','public-font-family','public.Font.Family');
	 	$this->publicFontSizeTitle = new _fontSizeField('public_font_size_title','public-font-size-title','public.Font.Size.Title');
	 	$this->publicFontSizeHeading = new _fontSizeField('public_font_size_heading','public-font-size-heading','public.Font.Size.Heading');
	 	$this->publicFontSizeMenu = new _fontSizeField('public_font_size_menu','public-font-size-menu','public.FontSizeMenu');
	 	$this->publicFontSizeText = new _fontSizeField('public_font_size_text','public-font-size-text','publicFontSizeText');
		
	
	

	$this->_register('siteTitle', $this->siteTitle);
	$this->_register('siteUrl', $this->siteUrl);
	$this->_register('loginNotice', $this->loginNotice);
	$this->_register('organization', $this->organization);
	$this->_register('organizationUrl', $this->organizationUrl);
	$this->_register('organizationDescription', $this->organizationDescription);
	$this->_register('contactName', $this->contactName);
	$this->_register('contactEmail', $this->contactEmail);
	$this->_register('showPublicSite', $this->showPublicSite);
	$this->_register('showCostReports', $this->showCostReports);
	$this->_register('showRevenueReports', $this->showRevenueReports);
	$this->_register('publicFillColor', $this->publicFillColor);
	$this->_register('publicSiteColor', $this->publicSiteColor);
	$this->_register('publicPageColor', $this->publicPageColor);
	$this->_register('publicMenuColor', $this->publicMenuColor);
	$this->_register('publicMenuColorHover', $this->publicMenuColorHover);
	$this->_register('publicTextColor', $this->publicTextColor);
	$this->_register('publicTextColorHover', $this->publicTextColorHover);
	$this->_register('publicFontFamily', $this->publicFontFamily);
	$this->_register('publicFontSizeTitle', $this->publicFontSizeTitle);
	$this->_register('publicFontSizeHeading', $this->publicFontSizeHeading);
	$this->_register('publicFontSizeMenu', $this->publicFontSizeMenu);
	$this->_register('publicFontSizeText', $this->publicFontSizeText);
		
	}
	
	public function setDefaults(){
		parent::setDefaults();
		
		$this->siteTitle->setDefault('default');
		// $this->name->set($this->siteTitle->value);
		 $this->siteUrl->setDefault('default');
		 $this->loginNotice->setDefault('default');
		 $this->organization->setDefault('default');
		 $this->organizationUrl->setDefault('default');
		 $this->organizationDescription->setDefault('default');
		 $this->contactName->setDefault('default');
		 $this->contactEmail->setDefault('default');
		 $this->showPublicSite->setDefault('yes');
		 $this->showCostReports->setDefault('no');
		 $this->showRevenueReports->setDefault('no');
		 $this->publicFillColor->setDefault('none');
		 $this->publicSiteColor->setDefault('none');
		 $this->publicPageColor->setDefault('none');
		 $this->publicMenuColor->setDefault('none');
		 $this->publicMenuColorHover->setDefault('none');
		 $this->publicTextColor->setDefault('black');
		 $this->publicTextColorHover->setDefault('green');
		 $this->publicFontFamily->setDefault('Arial');
		 $this->publicFontSizeTitle->setDefault(20);
		 $this->publicFontSizeHeading->setDefault(16);
		 $this->publicFontSizeMenu->setDefault(14);
		 $this->publicFontSizeText->setDefault(12);
		
	}
	
}

class siteSettings extends _entity{
	protected $__MyClassName = 'SiteSettings';
	protected $_titleEntity = 'Site Settings';

	protected function setHelperClasses(){
		$this->f = new siteSettingsFields();
		$this->links = new siteSettingsLinks();
		$this->sql = new siteSettingsSQL();
	}
	
	public function setDetails(){
		$this->verifySettings();

		parent::setDetails();/*
		//if ($this->id > 0){
			$sql = $this->sql->info($this->id);
			$result = dbGetResult($sql);
			if($result){
				while ($row = $result->fetch_assoc())
				{	
					$this->f->setRow($row);
				}
				$result->close();
				//$this->getFieldIds();
			}
			
		//}*/
		$this->setSessionDetails();	
	}
    

	
	protected function verifySettings(){
		$sql = $this->sql->count();
		
		$i = dbGetCount($sql, 'count_settings', 0, 'verifySettings');
		if ($i == 0){
			$this->createSettings();	
		}
		$this->id = 1;
	}
	

	protected function setSessionDetails(){
	$this->echoPrint(true,'begin','setSessionDetails','siteSettings');
		if (($this->pageMode != 'EDIT') && ($this->pageMode != 'ADD')){
			$this->f->format();
		}
		$this->echoPrint(true,$this->f->siteTitle->value(),'setSessionDetails','siteSettings');
		$this->f->setEnvironment('SESSION');
		 $this->f->write();	/*
		 $this->f->siteUrl->write();	
		 $this->f->loginNotice->write();
		 $this->f->organization->write();	
		$this->f->organizationUrl->write();
		$this->f->contactName->write();	
		 $this->f->contactEmail->write();	
		 $this->f->showPublicSite->write();	
		 $this->f->showCostReports->write();
		 $this->f->showRevenueReports->write();*/
	}
	
	protected function unsetSessionDetails(){
		$this->f->setEnvironment('SESSION');
		
		$this->f->remove();
		/*		 //->env->remove();	
		 $this->f->siteUrl->env->remove();	
		 $this->f->loginNotice->env->remove();
		 $this->f->organization->env->remove();	
		$this->f->organizationUrl->env->remove();
		$this->f->contactName->env->remove();	
		 $this->f->contactEmail->env->remove();	
		 $this->f->showPublicSite->env->remove();	
		 $this->f->showCostReports->env->remove();
		 $this->f->showRevenueReports->env->remove();*/
	}
	
	protected function setPageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';		
		$settingsL = new SiteSettingsLinks($menuType,$menuStyle);
		$menuL = new MenuLinks($menuType,$menuStyle);

		$menu = $settingsL->openMenu('section-heading-links');
		
		$menu .= $menuL->linkReference();
		$menu .= $settingsL->resetMenu();
		if ($this->pageMode == 'VIEW'){
			$menu .= $settingsL->detailEditHref();
		} elseif ($this->pageMode == 'EDIT'){
			$menu .= $settingsL->detailViewHref();
		}
		$menu .= $settingsL->closeMenu();
		$this->_pageMenu = $menu;
	}
	
	protected function afterDisplay(){
		$detail = $this->getPublicSiteStylesFieldset('true');
		return $detail;
	}
	
	private function getPublicSiteStylesFieldset($disabled = 'false'){

		$styles = openFieldset('Public Site Presentation Styles');
		//need disabled swtch for relevant inputs
		$styles .= $this->f->publicFillColor->input();
		$styles .= $this->f->publicSiteColor->input();
		$styles .= $this->f->publicPageColor->input();
		$styles .= $this->f->publicMenuColor->input();
		$styles .= $this->f->publicMenuColorHover->input();
		$styles .= $this->f->publicTextColor->input();
		$styles .= $this->f->publicTextColorHover->input();
		$styles .= $this->f->publicFontSizeTitle->input();
		$styles .= $this->f->publicFontSizeHeading->input();
		$styles .= $this->f->publicFontSizeMenu->input();
		$styles .= $this->f->publicFontSizeText->input();
		$styles .= $this->f->publicFontFamily->input();
	
		//add the sample region after the first color select
		//$styles .= wrapDiv($this->publicSiteSample(),'public-site-sample','site-sample');

		//$styles .= closeDiv();
		$styles .= closeFieldset();
		return $styles;
	}
	
	public function publicSiteSample(){
		
		
		//sample is inserted into the editing td just after the first color select list
		//force a close on the td and reopen a td with rowspan set to all seven selects
		//this inserts the sample neatly beside all select lists
		
		$td = new _td();
		$x = $td->close();
		
		$td = new _td('none','editing-td');
		$td->addAttribute('width', '50%');
		$td->addAttribute('rowspan',11);
		$x .= $td->open();
		
		$style = minHeightPixels(200).setPadding(10).setFontFamily($this->f->publicFontFamily->value);
		$style .= setFont($this->f->publicFontSizeText->value,'normal','normal').colorBackground($this->f->publicFillColor->value);
		$div = new _div();
		$div->setStyle($style);
		$x .= $div->open();

		$style = setPadding(10).colorBackground($this->f->publicSiteColor->value);
		$div = new _div();
		$div->setStyle($style);
		$x .= $div->open();
		

		$style = setPadding(10).widthPixels(75).setFloat('left');
		$style .= colorBackground($this->f->publicMenuColor->value).setFont($this->f->publicFontSizeMenu->value,'normal','normal');
		$div = new _div();
		$div->setStyle($style);
		$x .= $div->open();
		
		
		$style = clearListStyle().clearMarginPadding();
		$list = new _ul();
		$list->setStyle($style);
		$x .= $list->open();
		
		$style = setDisplay('block').colorText($this->f->publicTextColor->value);
		$li = new _li();
		$li->setStyle($style);
		$x .= $li->wrap('Menu Item');
	
		$style = setDisplay('block').colorText($this->f->publicTextColorHover->value);
		$style .= colorBackground($this->f->publicMenuColorHover->value);
		$li = new _li();
		$li->setStyle($style);
		$x .= $li->wrap('Menu Item Hover');
	
		$x .= closeList();
		$x .= closeDiv();
	
		$style = setPadding(10).setMarginCustom('left',100);
		$style .= colorBackground($this->f->publicPageColor->value).colorText($this->f->publicTextColor->value);
		$div = new _div();
		$div->setStyle($style);
		$x .= $div->open();
		
		$x .= spanStyled('Titles',setFont($this->f->publicFontSizeTitle->value,'normal','bold')).br();
		$x .= spanStyled('Headings',setFont($this->f->publicFontSizeHeading->value,'normal','bold')).br();
		$x .= spanStyled('Content Text'.br().'...',setFont($this->f->publicFontSizeText->value,'normal','normal')).br();
		$x .= closeDiv();		
		$x .= closeDiv();		
		$x .= closeDiv();

		return $x;		
	}
	
	protected function editForm(){
		
		$entity = 'site-settings';
		$this->f->setEntity($entity);
		$contextMenu = $this->links->formatToggleLink('formOptional','+Options');

		$edit = new _inputForm($entity,$this->pageMode,$this->pageSave);
		$edit->open($contextMenu,$this->_titleEntity);
		
		$edit->required->addContent($this->f->siteTitle->input());
		$edit->required->addContent($this->f->siteUrl->input());	
		$edit->required->addContent($this->f->contactName->input());
		$edit->required->addContent($this->f->contactEmail->input());
		$edit->optional->addContent($this->f->organization->input());
		$edit->optional->addContent($this->f->organizationUrl->input());
		$edit->optional->addContent($this->f->organizationDescription->input());
		$edit->optional->addContent($this->f->loginNotice->input());
		$edit->optional->addContent($this->f->showCostReports->input());
		$edit->optional->addContent($this->f->showRevenueReports->input());
		$edit->optional->addContent($this->f->showPublicSite->input());	
		
		$edit->optional->addContent($this->getPublicSiteStylesFieldset('false'));

		$edit->hidden->addContent(getHiddenInput('mode', $this->pageMode));
		
		$edit->submit->addContent(getSaveChangesResetButtons());
		return $edit->close();
	}
	

	
	private function createSettings(){

		
		$sql = new _sqlWriter('INSERT');

		$sql->editField($this->f->siteTitle);
		$sql->editField($this->f->siteUrl);
		$sql->editField($this->f->loginNotice);
		$sql->editField($this->f->organization);
		$sql->editField($this->f->organizationUrl);
		$sql->editField($this->f->organizationDescription);
		$sql->editField($this->f->contactName);
		$sql->editField($this->f->contactEmail);
		$sql->editField($this->f->publicFillColor);
		$sql->editField($this->f->publicSiteColor);
		$sql->editField($this->f->publicPageColor);
		$sql->editField($this->f->publicMenuColor);
		$sql->editField($this->f->publicMenuColorHover);
		$sql->editField($this->f->publicTextColor);
		$sql->editField($this->f->publicTextColorHover);
		$sql->editField($this->f->publicFontFamily);
		$sql->editField($this->f->publicFontSizeTitle);
		$sql->editField($this->f->publicFontSizeHeading);
		$sql->editField($this->f->publicFontSizeMenu);
		$sql->editField($this->f->publicFontSizeText);
		$sql->editField($this->f->showPublicSite);
		$sql->editField($this->f->showCostReports);
		$sql->editField($this->f->showRevenueReports);
		
		$result = dbRunSQL($sql->editStatement('sitewide_settings'));
		

	}


	protected function saveUpdate(){
		$sql = new _sqlWriter('UPDATE');

		$sql->editField($this->f->siteTitle);
		$sql->editField($this->f->siteUrl);
		$sql->editField($this->f->loginNotice);
		$sql->editField($this->f->organization);
		$sql->editField($this->f->organizationUrl);
		$sql->editField($this->f->organizationDescription);
		$sql->editField($this->f->contactName);
		$sql->editField($this->f->contactEmail);
		$sql->editField($this->f->publicFillColor);
		$sql->editField($this->f->publicSiteColor);
		$sql->editField($this->f->publicPageColor);
		$sql->editField($this->f->publicMenuColor);
		$sql->editField($this->f->publicMenuColorHover);
		$sql->editField($this->f->publicTextColor);
		$sql->editField($this->f->publicTextColorHover);
		$sql->editField($this->f->publicFontFamily);
		$sql->editField($this->f->publicFontSizeTitle);
		$sql->editField($this->f->publicFontSizeHeading);
		$sql->editField($this->f->publicFontSizeMenu);
		$sql->editField($this->f->publicFontSizeText);
		$sql->editField($this->f->showPublicSite);
		$sql->editField($this->f->showCostReports);
		$sql->editField($this->f->showRevenueReports,true);
		
		$result = dbRunSQL($sql->editStatement('sitewide_settings'));
		
		$this->f->setSessionDetails();
		
	
	}
	
}
?>
