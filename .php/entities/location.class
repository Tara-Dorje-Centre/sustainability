<?php 
class locationFields extends _fieldsetChild{
/*
	//from _fieldset
	public $id;
	public $name;		
	public $created;
    public $updated;
	public $description;
	public $highlight;
	
	public $parent;
	public $type;*/
	public $sortKeyParent;
	public $sortKey;
	
	public function __construct(){
		parent::__construct();

    	$this->sortKey = new _textField('sort_key','not-used','Sort Key'); 
		$this->sortKeyParent = new _textField('parent_sort_key'); 
		
    }
	
	public function fetch($row){
		parent::fetch($row);
		$this->sortKey->fetch($row);
		$this->sortKeyParent->fetch($row);
	}
	
	public function listCaption(){
		$this->addContent(parent::listCaption(),true);
		$this->addContent($this->sortKey->listCaption());
		return $this->getContent();
	}
	
	public function listDetail(){
		$this->addContent(parent::listDetail(), true);
		$this->addContent($this->sortKey->listDetail());
		return $this->getContent;
	}
	
	public function displayDetail(){
		$this->addContent(parent::displayDetail(),true);
		$this->addContent($this->sortKey->displayDetail());
		$this->addContent($this->sortKeyParent->displayDetail());
		return $this->getContent();
	}
	
	public function read(){
		parent::read();
		
	}
	
}

class location extends _entity{
	protected $__MyClassName = 'location';
  	protected $_titleEntity = 'Location';
	protected $pageSave = 'pr_Location_Save.php';
	public $childLocations = 0;

	protected function setHelperClasses(){
		$this->sql = new locationSQL();
		$this->links = new locationLinks();
		$this->f = new locationFields();
	}
	
	protected function listRowLink(){
		$link = $this->links->itemViewEdit($this->f->sortKey->value,$this->f->id->value);
		return $link;
	}
	
    public function setDetails(){
    	parent::setDetails();
			
		$this->setChildCount();
	}	
	
	private function setChildCount(){
		$this->echoState(true,'setChildCount');
		if ($this->id > 0){
		$sql = $this->sql->countChildren($this->id);
		$this->childLocations = dbGetCount($sql, 'total_locations');
		} else {
		$this->childLocations = 0;
		}
		$this->echoState(true,'setChildCount');
	}
	
	
	
	protected function setPageTitle(){
		if ($this->pageMode != 'ADD'){
			$heading = $this->f->sortKey->value;
		} else {
			if ($this->idParent == 0){
				$heading = 'Add New Location';
			} else {
				$heading = $this->f->sortKeyParent->value.' Add Sub Location';	
			}
		}

		$this->_pageTitle = $heading;
	}
	
	protected function setPageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';
		
		$locationL = new LocationLinks($menuType,$menuStyle);
		$menuL = new MenuLinks($menuType,$menuStyle);
		
		$menu = $locationL->openMenu('section-heading-links');		
		$menu .= $menuL->linkReference();
		$menu .= $locationL->resetMenu();
		
		if ($this->idParent > 0){
			$menu .= $locationL->detailViewHref($this->idParent,'Up');
		}
		if ($this->pageMode == 'VIEW'){
			$menu .= $locationL->detailEditHref($this->id);
		} elseif ($this->pageMode == 'EDIT'){
			$menu .= $locationL->detailViewHref($this->id);
		}
		$menu .= $locationL->listingHref(-1);	

		if ($this->pageMode != 'ADD'){
			$menu .= $locationL->resetMenu();
			
			$i = $this->childLocations;
			if ($i != 0){
				$menu .= $locationL->listingHref($this->id,'Sublocations('.$i.')');
			} else {
				$menu .= 'No Sublocations';	
			}
			$menu .= $locationL->detailAddHref($this->id);
		}
	
		$menu .= $locationL->closeMenu();
		$this->_pageMenu = $menu;
	}
	

	
	public function options(
		$selected = 0, 
		$idName = 'locationId', 
		$disabled = 'false',
		$showLink = true,
		$onChangeJS = NULL){

		$this->echoState(true, 'options');
		
		
		$sql = $this->sql->options();
		//selected, $disabled);
		
		$default = 0;
		$defaultCaption = '-No Location';
		$allOptions = getSelectOptionsSQL($sql,$selected,$disabled,$default,$defaultCaption);		
		
		$select = getSelectList($idName,$allOptions,'none',$disabled );	

		if ($showLink == true){
			$ll = new LocationLinks;	
			$links =$ll->itemViewEdit($this->_entityTitle,$selectedValue);
			$select .= $links;	
		}
		return $select;

	}
	
	protected function setDefaults(){
	

		//if ($this->pageMode == 'ADD'){
			//if add came from all locations default, reset to 0 for no parent
			if ($this->idParent == -1){
				$this->idParent = 0;
			}
		//}
		parent::setDefaults();
	}  
//add to entity





	protected function editForm(){
		$this->echoState(true,'editForm');
		$entity = 'location';
		$contextMenu = $this->links->formatToggleLink('formOptional','+Options');		
		$this->f->setEntity($entity);
		$edit = new _inputForm($entity,$this->pageMode,$this->pageSave);
		$edit->open($contextMenu,$this->_titleEntity);
		
		$edit->required->addContent($this->f->name->input());

		$type = new locationType('OPTIONS');
		$select = $type->options($this->f->type->value(),$this->f->type->env->variable,'false',true);
		$edit->required->addContent($this->f->type->inputChoice($select));
		//captionedInput('Type',$select));
					
		$edit->optional->addContent($this->f->description->input());
		
		$edit->hidden->addContent(getHiddenInput('mode', $this->pageMode));
		$edit->hidden->addContent($this->f->parent->inputHidden());
		$edit->hidden->addContent($this->f->id->inputHidden());
		$edit->submit->addContent(getSaveChangesResetButtons());

		return $edit->close();
	}


	private function getSortKey($id){
		$sql = $this->sql->sortKey($id);
		$sortKey = dbGetScalar($sql, 'sort_key');
		return $sortKey;		
	}

	private function buildSortKey(){
			if ($this->idParent == 0){
			$sortKey = $this->f->name->value();
		} else {
			$sortKey = $this->f->sortKeyParent->value();
			$sortKey .= '.'.$this->f->name->value();
			}
			return $sortKey;

	}
	private function updateSortKey(){

		$sortKey = $this->buildSortKey();
		if ($sortKey != $this->f->sortKey->value()){
			$sql = $this->sql->sortKeyUpdate($this->id, $sortKey);
		$result = dbRunSQL($sql);
		}
	
	}

	protected function saveUpdate(){
	

			$sql = " UPDATE locations AS l ";
			$sql .= " SET ";
			$sql .= " l.name = '".$this->f->name->value."', ";
			$sql .= " l.type_id = ".$this->f->type->id->value.", ";
			$sql .= " l.updated = CURRENT_TIMESTAMP, ";
			$sql .= " l.description = '".$this->f->description->value."' ";
			$sql .= " WHERE l.id = ".$this->id."  ";			
			
			$result = dbRunSQL($sql);
			
			$this->updateSortKey();
	}
	
	protected function saveInsert(){
	
			$sql = " INSERT INTO locations ";
			$sql .= " (name, ";
			$sql .= " parent_id, ";
			$sql .= " type_id, ";
			$sql .= " created, ";
			$sql .= " updated, ";
			$sql .= " description) ";
			$sql .= " VALUES (";
			$sql .= "'".$this->f->name->value()."', ";
			$sql .= " ".$this->parent->value().", ";
			$sql .= " ".$this->f->type->value().", ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= "'".$this->f->description->value()."') ";
			
			$result = dbRunSQL($sql);
			
			$this->id = dbInsertedId();
			
			$this->updateSortKey();
		
	
	}
	
} 
?>
