<?php 
class userSecurityFields extends _fieldset{
	public $_loginMessages;
	public $_currentUser;
	public $_currentUserId;
	public $_isAdmin;
	public $_mustUpdatePwd;
	public $_clientTimeZone;
	public $_isLoggedIn;
		public function __construct(){
	    $this->_loginMessages = new _textField('not-used','login-messages','Login'); 
    	$this->_currentUser = new _userField('login_name','login-name','no.caption'); 
		$this->_currentUserId = new _idField('id','user-id','no.caption'); 
		$this->_isAdmin = new _yesNoField('is_admin','is-admin','no.caption');
  		$this->_mustUpdatePwd = new _yesNoField('must_update_pwd','must-update-pwd','no.caption');
    	$this->_clientTimeZone = new _textField('not_used','client-time-zone','Login'); 
    	$this->_isLoggedIn = new _booleanField('not_used','logged-in','no.caption'); 
    	$this->_register('_loginMessages',$this->_loginMessages);
    	$this->_register('_currentUser',$this->_currentUser);
    	$this->_register('_currentUserId',$this->_currentUserId);
    	$this->_register('_isAdmin',$this->_isAdmin);
    	$this->_register('_mustUpdatePwd',$this->_mustUpdatePwd);
    	$this->_register('_clientTimeZone',$this->_clientTimeZone);
    }
    
    
    public function setDefaults(){
    }
    
}
class userLoginFields extends _fieldset {
    public $_loginName;
    public $_loginPassword;
	public $_loginEmail;
	public $_clientTimeZone;
	public $_loginSubmit;
	public $_resetPasswordSubmit;
	
	

	public function __construct(){
		$this->_loginName = new _userField('not-used','login-name','LoginName'); 
		$this->_loginEmail = new _emailField('not-used','login-email','Email'); 
		$this->_loginPassword = new _passwordField('not-used','login-pwd','Password'); 
		$this->_clientTimeZone = new _textField('not-used','client-time-zone','Login'); 
    	$this->_loginSubmit = new _submitButton('not-used','submit-login','Login'); 
    	$this->_resetPasswordSubmit = new _submitButton('not-used','submit-pwd-reset','Reset Password'); 

  		$this->_register('_loginName',$this->_loginName);
		$this->_register('_loginEmail',$this->_loginEmail);
		$this->_register('_loginPassword',$this->_loginPassword);
		$this->_register('_clientTimeZone',$this->_clientTimeZone);
    	$this->_register('_loginSubmit',$this->_loginSubmit);
    	$this->_register('_resetPasswordSubmit',$this->_resetPasswordSubmit);
    	

    }
    
    public function setDefaults(){
    }

    

}

class userLogin extends _contentWriter{
	private $_form = 'LOGIN';
	protected $__MyClassName = 'userLogin';
	private $f;
	private $s;
	private $sql;

	
	public function __construct($mode = 'LOGIN'){
		$this->_form = $mode;
		$this->f = new userLoginFields();
		$this->s = new userSecurityFields();
		$this->sql = new UserSQL();
		//$this->links = new UserLinks();
	}

	
	
	
	public function resetPassword(){
		$this->f->_loginEmail->read();
		$this->f->_loginName->read();
		$loginName = $this->f->_loginName->value();
		$loginEmail = $this->f->_loginEmail->value();
		//verify that login and email exist for an active account
		if ($this->validateLoginAndEmail($loginName,$loginEmail) == true){
			//login and email are valid and account is active 
			$this->f->_loginEmail->set($loginEmail);
		
			$newPass = $this->f->_loginPassword->generate();
			$newPassCrypt = $this->obfuscate(dbEscapeString($newPass),$loginName);
		
		
			$sql = $this->sql>updatePass($loginName, $newPassCrypt);
		
			$result = dbRunSQL($sql);
			
			$links = new UserLinks;	
			$message = $_SESSION['site-title'].br();
			$message .= $links->formatHref($_SESSION['site-org'],$_SESSION['site-org-url']).br();
			$message .= "Profile password has been reset".br();
			$message .= "Login Name = ".$loginName.br();
			$message .= "New Password = ".$newPass.br();
			$message .= $links->formatHref($_SESSION['site-url'],$_SESSION['site-url']).br();
			$this->mailUser($message,'Password Reset');
			$_SESSION['login-messages']  = 'Profile password reset';
		} else {
			$_SESSION['login-messages'] = 'Active profile not found, contact an administrator';	
		}
	}

	private function mailUser($message = '', $subject = 'User Notification'){

		$fromAddress = ini_get('sendmail_from');
		$headers = "From: ".$fromAddress."\n";
		$headers .= "X-Mailer: PHP/".phpversion()."\n"; 
		$headers .= "MIME-Version: 1.0\n"; 
		$headers .= "Content-Type: text/html; charset=utf-8\n"; 
		$headers .= "Content-Transfer-Encoding: 8bit\n"; 
		$newSubject = $_SESSION['site-title'].':'.$subject;
		mail($this->f->email,$newSubject,$message,$headers, '-f '.$fromAddress);
	}
	
	private function obfuscate($pass,$login){
		//$salt = crypt($login);
		$hash = md5($pass.$login);
		return $hash;	
	}

	public function validateLoginAndEmail($loginName, $loginEmail){
		$valid = false;
		$sql = $this->sql->validateLoginAndEmail($loginName,$loginEmail);
		$found = dbGetCount($sql,'user_count');
		

		if ($found == 1){
			$valid = true;
		} 
		return $valid;
	}
	public function validate(){
	
		$this->f->read();
		$this->s->read();

			if (isset($_SESSION['logged-in']) && ($_SESSION['logged-in'] == true)){
				$this->s->_isLoggedIn->remove();
				unset($_SESSION['logged-in']);
				$this->echoPrint(true,'apparently logged in ','validate');
				$this->echoSecurity();
			}
		$this->echoPrint(true,'check submit vars ','validate');
		$this->echoPrint(true,'mode= '.$this->_form,'validate');
		
		if ($this->f->_loginSubmit->exists() == true){
			$this->echoPrint(true, 'submit login pushed','validate');
			$this->validateLogin();
		}
		if ($this->f->_resetPasswordSubmit->exists() == true){
			$this->echoPrint(true, 'reset pasword pushed','validate');
			$this->resetPassword( );
		}
}
	private function validateLogin(){
		$this->echoPrint(true, 'checking name-password','validateLogin');
		//$this->f->read();
		//$this->f->_loginName->read();
		$login = $this->f->_loginName->value();
		$pass = $this->f->_loginPassword->value();
			
		$loginPwdCrypt = $this->obfuscate($pass,$login);
		$validUser = false;
		$sql = $this->sql->validateUser($login, $loginPwdCrypt);
		$found = dbGetCount($sql,'user_count');
	
		
		$this->echoValue(true, 'foundUser?', $found, 'validateLogin');
	

		//FORCE LOGIN SUCCESS TO SETUP FIRST USER
		//then comment this line
		//printLine('forcing login');
		$found = 1;
		$this->echoValue(true, 'foundUser', $found, 'DEVELOPMENT Forcing result validateLogin');
		if ($found == 1){
		
		
		
			$validUser = true;
			$this->echoPrint(true,'valid login.updatingLastLogin');
			$this->updateLastLogin($login);
			$this->echoPrint(true,'valid login.setting session security');
			$this->setSecurity($login);
			
			$_SESSION['logged-in'] = true;
			//$_SESSION['client-time-zone'] = $_POST['client-time-zone'];
			

			//$this->f->_sLoginMessages->write();
			
		} else {
			//$_SESSION['login-messages'] = 'Could not validate login';
			$this->s->remove();
			$this->s->_loginMessages->set('Could not validate login');
			$this->f->_loginMessages->write();
			
		}
		
		return $validUser;
		
	}
	
	
	private function setSecurity($loginName){
		$this->echoPrint(true, 'begin','setSecurity');
		$sql = $this->sql->securityUser($loginName);

		$result = dbGetResult($sql);
		if($result){
			$this->echoPrint(true, 'found user profile','setSecurity');
	  		while ($row = $result->fetch_assoc())
			{
				//$this->f->fetchSecurity($row);
				$this->s->_currentUserId->fetch($row);
    			$this->s->_mustUpdatePwd->fetch($row);
    			$this->s->_isAdmin->fetch($row);
			}
		$result->close();
		}
		$this->s->_currentUser->set($loginName);
		$this->s->_clientTimeZone->set($this->f->_clientTimeZone->value());
		$this->s->_loginMessages->set('Login Success');
		$this->echoPrint(true, 'writing SESSION security fields','setSecurity');
		$this->s->setEnvironment('SESSION');
		$this->s->write();
		$this->echoSecurity();

	}
	private function echoSecurity(){
		$this->s->setEnvironment('SESSION');
		$this->s->read();
		$this->echoValue(true, 'currentUser?', $this->s->_currentUser->value());
		$this->echoValue(true, 'currentUserId?', $this->s->_currentUserId->value());
		$this->echoValue(true, 'isAdmin?', $this->s->_isAdmin->value());
		$this->echoValue(true, 'mustUpdatePassword?', $this->s->_mustUpdatePwd->value());
		$this->echoValue(true, 'clientTimeZone?', $this->s->_clientTimeZone->value());
		$this->echoValue(true, 'loginMessages?', $this->s->_loginMessages->value());
	}
	private function updateLastLogin(string $loginName = 'unknkownId'){
		
		$sql = $this->sql->updateLastLogin($loginName);
		
		$result = dbRunSQL($sql);
		
	}
	
	public function loginForm(){
		$this->echoPrint(true, 'building login form','loginForm');
		$message = 'Please Login...';
		$message .= $this->getLoginMessages();
		$entity = 'site-login';
		$this->f->setEntity($entity);
$links = new _links();
		$contextMenu = $links->formatToggleLink('formOptional','Lost Password');

		$login = new _inputForm($entity,$message,'sys_Login.php');
		$login->open($contextMenu,'Login');
		$login->required->addContent($this->f->_loginName->input());
		$login->required->addContent($this->f->_loginPassword->input());

		$login->optional->addContent($this->f->_loginEmail->input());
		$login->optional->addContent($this->f->_resetPasswordSubmit->input());

		$msg = 'To reset password, enter your login name and profile email.'.br();
		$msg .= 'To register, please contact an administrator.';
		$login->optional->addContent(captionedInput('Lost Password:',$msg));
		$this->f->_clientTimeZone->set('0');
		$login->hidden->addContent($this->f->_clientTimeZone->inputHidden());
		//= getHiddenInput('client-time-zone','');
		$login->submit->addContent($this->f->_loginSubmit->input());

		
		$login->submit->addContent('+'.$_SESSION['site-login-notice']);

		$this->echoPrint(true, 'returning login form','loginForm');
		return $login->close();;			
	}
	
	private function getLoginMessages(){
		if ($this->s->_loginMessages->exists()){
			$this->s->_loginMessages->read();
			$messages = $this->s->_loginMessages->value();
			$this->s->_loginMessages->remove();
		} else {
			$messages = '';
		}
		
		return $messages;
	}
	
	
} 



class userFields extends _fieldsetEntity{
	
    public $loginName;
    public $nameFirst;
    public $nameLast;
	public $email;
	public $interests;
	public $focus;
	public $lastLogin;
	public $isAdmin;
	public $isActive;
	public $mustUpdatePwd;
	public $type;

	public function __construct(){
		parent::__construct();
    	$this->nameFirst = new _nameField('name_first','name-first','First Name'); 
		$this->nameLast = new _nameField('name_last','name-last','Last Name'); 
		$this->email = new _emailField('email','email','Email Address'); 
		$this->focus = new _notesField('focus','focus','Focus Area');
		$this->interests = new _notesField('interests','interests','Interests');
		$this->loginName = new _userField('login_name','login-name','login-name');
		$this->lastLogin = new _dateField('last_login','last-login','Last Login'); 
		$this->isAdmin = new _yesNoField('is_admin','is-admin','Administrator');
		$this->isActive = new _yesNoField('is_active','is-active','Active Profile');
		$this->mustUpdatePwd = new _yesNoField('must_update_pwd', 'must-update-pwd','Must Update Password');
		$this->type = new _fieldIdName('type_id','id-type','Type', 'type_name');
   		$this->_register('nameFirst', $this->nameFirst);
		$this->_register('nameLast', $this->nameLast);
		$this->_register('email', $this->email);
		$this->_register('focus', $this->focus);
		$this->_register('interests', $this->interests);
		$this->_register('loginName', $this->loginName);
		$this->_register('lastLogin', $this->lastLogin);
		$this->_register('isAdmin', $this->isAdmin);
		$this->_register('isActive', $this->isActive);
		$this->_register('mustUpdatePwd', $this->mustUpdatePwd);
		$this->_register('type', $this->type);
	}
   
    
	protected function formatUserName($last,$first = 'not-given'){
		$name = $this->nameLast->value();
		if($this->nameFirst != ''){
			$name .= ', '.$this->nameFirst->value();
		}
		return $name;
	}
	public function fetch($row){
		parent::fetch($row);
		$this->name->set($this->formatUserName($this->nameLast.value,$this->namFirst->value));
		
	}
	public function setDefaults(){
		parent::setDefaults();
		$this->isAdmin->setDefault('no');
		$this->mustUpdatePwd->setDefault('yes');
		$this->isActive->setDefault('yes');
		
	}
	

}

class user extends _entity{
protected $__MyClassName = 'User';
	   		

	private $loginPwd;
	private $loginPwdConfirm;
	public $validationMessages;

	
	protected function setHelperClasses(){
		$this->f = new UserFields();
		$this->sql = new UserSQL();
		$this->links = new UserLinks();
	}
		

	
	public function display(){
		$detail = parent::display;
		if (($_SESSION['is-admin'] == 'yes') && ($_SESSION['user-id'] != $this->id)){		
			$detail .= $this->requestPasswordResetForm();
		}

		return $detail;
	}
	

	public function setTypeId($id){
		$this->f->type->id->set($id);
	}
	
		
	protected function setPageTitle(){

		if ($this->pageMode != 'ADD'){
			$heading = $this->f->loginName->value();
			if (($_SESSION['user-id'] == $this->id) && ($_SESSION['must-update-pwd'] == 'yes')){
				$heading .= br().'Please update your profile password.';
			}

		} else {
			$heading = 'Add User Profile';
		}

		$this->_pageTitle = $heading;
	}
	
	
	protected function setPageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';
		$userL = new UserLinks($menuType,$menuStyle);		
		$menuL = new MenuLinks($menuType,$menuStyle);
		
		$menu = $userL->openMenu('section-heading-links');
		$menu .= $menuL->linkReference();
		$menu .= $userL->resetMenu();
		if ($this->pageMode == 'VIEW'){
			if ($_SESSION['is-admin'] == 'yes' || $_SESSION['user-id'] == $this->id){
				//user is admin or self, show edit link
				$menu .= $userL->edit('edit profile',$this->id);
			}
		} elseif ($this->pageMode == 'EDIT'){
			$menu .= $userL->view('view',$this->id);
		}
		$menu .= $userL->listingHref();
		
		$menu .= $userL->closeMenu();
		$this->_pageMenu = $menu;
	}
	

	public function getPageDetails(){			
		if ($_SESSION['is-admin'] == 'yes'){
			//is admin allow edit others and add users
		} else {
			//not admin allow edit self only
			if ($this->pageMode == 'ADD'){
				//non admin trying to add a user
				//revert to viewing self
				$this->setDetails($_SESSION['user-id'],0,'VIEW');
			} elseif ($this->pageMode == 'EDIT' && $_SESSION['user-id'] == $this->id){
				//editing self, ok
			} else {
				$this->pageMode = 'VIEW';
			}	 
		}

		if ($this->pageMode == 'EDIT' or $this->pageMode == 'ADD'){
			$details = $this->editForm();
		} else {
			$details = $this->display();
		}
		return $details;
		
	}
	



	private function generatePassword($length = 11) {
		$chars = '.!%^&*#@';
		$clen = mb_strlen($chars);
		$base = md5(microtime());
		$password = substr(base_convert(substr($base,1),16,36),0,$length);
		$len = mb_strlen($password);
		for($i = 0;$i < $len;$i++)
		{
			if(rand(0,1) && 1){
				$password[$i] = strtoupper($password[$i]);
			} elseif(rand(0,2) && 1 && $clen){
				$password[$i] = $chars[rand(0,$clen - 1)];
			}
		}
		return $password;
	}
	
	
	
	public function resetPassword($loginName, $loginEmail){
		
		//verify that login and email exist for an active account
		//if ($this->validateLoginAndEmail($loginName,$loginEmail) == true){
			//login and email are valid and account is active 
			$this->f->email->set($loginEmail);
		
			$newPass = $this->generatePassword();
			$newPassCrypt = $this->obfuscate(dbEscapeString($newPass),$loginName);
		
		
			$sql = $this->sql>updatePass($loginName, $newPassCrypt);
		
			$result = dbRunSQL($sql);
			
			$links = new UserLinks;	
			$message = $_SESSION['site-title'].br();
			$message .= $links->formatHref($_SESSION['site-org'],$_SESSION['site-org-url']).br();
			$message .= "Profile password has been reset".br();
			$message .= "Login Name = ".$loginName.br();
			$message .= "New Password = ".$newPass.br();
			$message .= $links->formatHref($_SESSION['site-url'],$_SESSION['site-url']).br();
			$this->mailUser($message,'Password Reset');
			$_SESSION['login-messages'] = 'Profile password reset';
	/*	} else {
			$_SESSION['login-messages'] = 'Active profile not found, contact an administrator';	
		}*/
	}

	private function mailUser($message = '', $subject = 'User Notification'){

		$fromAddress = ini_get('sendmail_from');
		$headers = "From: ".$fromAddress."\n";
		$headers .= "X-Mailer: PHP/".phpversion()."\n"; 
		$headers .= "MIME-Version: 1.0\n"; 
		$headers .= "Content-Type: text/html; charset=utf-8\n"; 
		$headers .= "Content-Transfer-Encoding: 8bit\n"; 
		$newSubject = $_SESSION['site-title'].':'.$subject;
		mail($this->f->email,$newSubject,$message,$headers, '-f '.$fromAddress);
	}
	
	private function obfuscate($pass,$login){
		//$salt = crypt($login);
		$hash = md5($pass.$login);
		return $hash;	
	}

	
	private function setSecurity($loginName){
		$sql = $this->sql->securityUser($loginName);

		$result = dbGetResult($sql);
		if($result){
	  		while ($row = $result->fetch_assoc())
			{
				$_SESSION['user-id'] = $row["id"];
				$_SESSION['is-admin'] = $row["is_admin"];  
				$_SESSION['must-update-pwd'] = $row["must_update_pwd"];
			}
		$result->close();
		}
			
	}
	
	private function getLoginMessages(){
		if (isset($_SESSION['login-messages']) && $_SESSION['login-messages'] != ''){
			$messages = $_SESSION['login-messages'].br();
			unset($_SESSION['login-messages']);
		} else {
			$messages = '';
		}
		return $messages;
	}
	
	public function requestPasswordResetForm(){
		$entity = 'user-password-reset';
		$contextMenu = null;
		$request = new _editForm($entity,$this->pageMode,$this->pageSave);
		$request->open($contextMenu,$this->_titleEntity);

		$request->hidden->addContent($this->f->id->inputHidden());
		$request->hidden->addContent($this->f->email->inputHidden());	
		$request->hidden->addContent($this->f->loginName->inputHidden());
		$request->submit->addContent(getSubmitButton('Request Reset','submit-pwd-reset'));
		$request->submit->addContent($this->getLoginMessages());

		return $request->close();
		
	}
	
	//overrride entity.listrowlink to limit editing to administrators or self edit
	protected function listRowLink(){

		if (($_SESSION['is-admin'] == 'yes') || ($_SESSION['user-id'] == $this->f->id->value)){
			$link = $this->links->itemViewEdit($this->f->loginName->value(),$this->f->id->value());
		} else {
			$link = $this->links->view($this->f->loginName->value(),$this->f->id->value());
		}
			return $link;
	}
		
	public function addForm($idParent = 0){
		if ($_SESSION['is-admin'] == 'yes'){
			$this->pageMode = 'ADD';
			$this->setDefaults();
			$form = $this->editForm();
		} else {
			$quickEdit = 'Please request Administrator assistance to add users';
		}
		return $form;
	}

	
	protected function editForm(){
	
		if (($_SESSION['is-admin'] == 'yes') || ($_SESSION['user-id'] != $this->id)){
			$form = $this->secureEditForm();
		} else {
			$form = $this->display();
		}
		return $form;
	}
	
	protected function secureEditForm(){
		$this-> echoState(true,'secureEditForm');

		$entity = 'user';
		$this->f->setEntity($entity);
		$contextMenu = $this->links->formatToggleLink('formOptional','+Options');
		
		$edit = new _editForm($entity,$this->pageMode,$this->pageSave);
		$edit->open($contextMenu,$this->_titleEntity);

		if ($this->pageMode == 'ADD'){
			$input = $this->f->loginName->input($entity);
			
			$messages = @$this->validationMessages['login'];			
		} else {
			$input = $this->f->loginName->inputHidden();
			$messages = '(cannot be changed)';
		}
		$edit->required->addContent( captionedInput('Login Name '.$messages,$input));



		$input = getPasswordInput('loginPwd', 10,20);
		$passwordGroup = captionedInput('Password',$input);
		
		$input = getPasswordInput('loginPwdConfirm', 10,20,'Confirm Password');
		$messages = @$this->validationMessages['password'];
		$passwordGroup .= captionedInput('Password Confirm '.$messages,$input);
		$edit->required->addContent(wrapDivFieldGrouping($entity,$passwordGroup));

		$input = $this->f->email->input();
		$messages = @$this->validationMessages['email'];
		$edit->required->addContent(captionedInput('Email Address '.$messages,$input));
		$edit->optional->addContent($this->f->nameFirst->input());
		$edit->optional->addContent($this->f->nameLast->input());


		$m = new UserType;
		$select = $m->options($this->f->type->id->value,$this->f->type->id->_env->variable,'false');
		$edit->optional->addContent(captionedInput('User Type',$select));
		

		$edit->optional->addContent($this->f->focus->input());
		$edit->optional->addContent($this->f->interests->input());
	
		
		
		if ($_SESSION['is-admin'] == 'yes' && $_SESSION['user-id'] != $this->id){
			//if admin and not editing self allow setting admin
			//prevents admins from disabling their own accounts
			$input1 = $this->f->isAdmin->input();
			//,'Is Administrator','false');
			$input2 = $this->f->isActive->input();
			$input3 = $this->f->mustUpdatePwd->input();
			//,'Must Update Password','false');
		} else {
			$input1 = $this->f->isAdmin->inputHidden();
			$input2 = $this->f->isActive->inputHidden();
			$input3 = $this->f->mustUpdatePwd->inputHidden();
		}				
		$input = captionedInput('Administrator',$input1);
		$input .= captionedInput('Active Profile',$input2);
		$input .= captionedInput('Must Update Password', $input3);
				$edit->optional->addContent(captionedInput('Profile Settings',$input));
		
				$edit->hidden->addContent(  getHiddenInput('mode', $this->pageMode));
				$edit->hidden->addContent($this->f->id->inputHidden());

				$edit->submit->addContent(  getSaveChangesResetButtons());
			return $edit->close();
	}
	
	
	public function collectPostValues(){
		parent::collectPostValues();
		//get password for local validation
		$pwd = dbEscapeString($_POST['loginPwd']);
		$pwdConfirm = dbEscapeString($_POST['loginPwdConfirm']);
		//clear the password from post variables if canceling form post
		$_POST['loginPwd'] = 'password';
		$_POST['loginPwdConfirm'] = 'password';

		//validate login name
		if (($this->f->loginName->value() == '') || is_null($this->f->loginName->value())){
			$this->cancelPost('Login name cannot be blank','login');
		}
		//validate email address
		if (($this->f->email->value() != '') && (filter_var($this->f->email->value(), FILTER_VALIDATE_EMAIL) !== false)) {
    		// $email contains a valid email
		} else {
			if ($this->f->email->value() == ''){
				$validation = 'Email address cannot be blank';
			} else {
				$validation = 'Email address is not valid';
			}
			$this->cancelPost($validation,'email');
		}
		//validate password
		if (($pwd != '') && ($pwd == $pwdConfirm) && ($pwd != 'password')){
			$this->f->loginPwd->set($this->obfuscate($pwd, $this->f->loginName-value));
		} else {
			if ($pwd == '' || is_null($pwd) || is_null($pwdConfirm) || $pwdConfirm == ''){
				$validation = 'Password cannot be blank';
			} elseif ($pwd != $pwdConfirm){
				$validation = 'Passwords do not match';
			}
			$this->cancelPost($validation,'password'); 
		}
	}
	
	protected function cancelPost($message, $validation){
		//echo 'in cancel post:'.$message;
		//set validation message
		$this->validationMessages[$validation] = span($message,'highlight-validation');
		//display editing form with current validation state
		$this->printPage();
		die;
	}

	protected function saveUpdate(){
			
			$sql = " UPDATE users AS u ";
			$sql .= " SET ";
			$sql .= " u.name_first = '".$this->f->nameFirst->value()."', ";
			$sql .= " u.name_last = '".$this->f->nameLast->value()."', ";
			$sql .= " u.email = '".$this->f->email->value()."', ";
			$sql .= " u.focus = '".$this->f->focus->value()."', ";
			$sql .= " u.interests = '".$this->f->interests->value()."', ";
			$sql .= " u.login_name = '".$this->f->loginName->value."', ";
			$sql .= " u.login_pwd = '".$this->f->loginPwd->value()."', ";
			$sql .= " u.is_admin = '".$this->f->isAdmin->value()."', ";
			$sql .= " u.is_active = '".$this->f->isActive->value()."', ";
			$sql .= " u.must_update_pwd = '".$this->f->mustUpdatePwd->value()."', ";
			$sql .= " u.type_id = ".$this->f->type->id->value()." ";
			$sql .= " WHERE u.id = ".$this->f->id->value()."  ";			

			$result = dbRunSQL($sql);

			$this->mailUser('Your User Profile Has Been Updated');
			
			if ($this->f->loginName == $_SESSION['login-name']){
				$this->setSecurity($this->f->loginName->value);
			}
	}
	
	protected function saveInsert(){
	
			$sql = " INSERT INTO users ";
			$sql .= " (name_first, ";
			$sql .= " name_last, ";
			$sql .= " email, ";
			$sql .= " focus, ";
			$sql .= " interests, ";
			$sql .= " login_name, ";
			$sql .= " login_pwd, ";
			$sql .= " is_admin, ";
			$sql .= " is_active, ";
			$sql .= " must_update_pwd, ";
			$sql .= " created, ";
			$sql .= " type_id) ";
			$sql .= " VALUES (";
			$sql .= " '".$this->f->nameFirst->value()."', ";
			$sql .= " '".$this->f->nameLast->value()."', ";
			$sql .= " '".$this->f->email->value()."', ";
			$sql .= " '".$this->f->focus->value()."', ";
			$sql .= " '".$this->f->interests->value()."', ";
			$sql .= " '".$this->f->loginName->value()."', ";
			$sql .= " '".$this->f->loginPwd->value()."', ";
			$sql .= " '".$this->f>isAdmin-value()."', ";
			$sql .= " '".$this->f->isActive>value()."', ";
			$sql .= " '".$this->f->mustUpdatePwd->value()."', ";
			$sql .= " CURRENT_TIMESTAMP, ";			
			$sql .= " ".$this->f->type->id->value().") ";
			
			$result = dbRunSQL($sql);

			$this->id = dbInsertedId();
	}
	
	
} 
?>
