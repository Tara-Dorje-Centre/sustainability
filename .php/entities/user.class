<?php 




class userFields extends _entityFields{
	
    public $loginName;
    public $nameFirst;
    public $nameLast;
	public $email;
	public $interests;
	public $focus;
	public $lastLogin;
	public $isAdmin;
	public $isActive;
	public $mustUpdatePwd;
	

	public function __construct(){
		parent::__construct();
		$this->id->enabled(true);
		$this->name->enabled(true);
    	$this->type->enabled(true);
    	$this->created->enabled(true);
    	$this->updated->enabled(true);
    	$this->highlight->enabled(true);
    	
    	$this->nameFirst = new _textField('name_first','nameFirst','First Name', true); 
		$this->nameLast = new _textField('name_last','nameLast','Last Name', true); 
		$this->email = new _textField('email','email','Email Address', true); 
		$this->focus = new _textField('focus','focus','Focus Area', true);
		$this->interests = new _textField('interests','interests','Interests', true);
		$this->loginName = new _textField('login_name','loginName','loginId', true);
		$this->lastLogin = new _dateField('last_login','lastLogin','Last Login', true); 
		$this->isAdmin = new _textField('is_admin','isAdmin','Administrator', true);
		$this->isActive = new _textField('is_active','isActive','Active Profile', true);
		$this->mustUpdatePwd = new _textField('must_update_pwd', 'mustUpdatePwd','Must Update Password', true);
		
    }
	protected function formatUserName($last,$first = 'not-given'){
		$name = $this->nameLast->value();
		if($this->nameFirst != ''){
			$name .= ', '.$this->nameFirst->value();
		}
		return $name;
	}
	public function setRow($row){
		parent::fetch($row);
		$this->nameFirst->fetch($row);
		$this->nameLast->fetch($row);
		$this->name->set($this->formatUserName());
		$this->email->fetch($row);
		$this->focus->fetch($row);
		$this->interests->fetch($row);
		$this->loginName->fetch($row);
		$this->lastLogin->fetch($row);
		$this->isAdmin->fetch($row);
		$this->isActive->fetch($row);
		$this->mustUpdatePwd->fetch($row);
	}
	
	public function format(){
		parent::format();
		$this->nameFirst->format();
		$this->nameLast->format();
		$this->focus->format();
		$this->interests->format();
		$this->lastLogin->format();
	}
	
	public function defaults(){
		parent::defaults();
		$this->isAdmin->reset('no');
		$this->mustUpdatePwd->reset('yes');
		$this->isActive->reset('yes');
		
	}
	
	public function listHeading(){
		$this->addContent(parent::listHeading(),true);
		$this->addContent($this->loginName->th());
		$this->addContent($this->nameFirst->th());
		$this->addContent($this->nameLast->th());
		$this->addContent($this->focus->th());
		$this->addContent($this->interests->th());
		$this->addContent($this->lastLogin->th());
		return $this->getContent();
	}
	
	public function listDetail(){
		$this->addContent(parent::listDetail(),true);
		$this->addContent($this->loginName->th());
		$this->addContent($this->nameFirst->th());
		$this->addContent($this->nameLast->th());
		$this->addContent($this->focus->th());
		$this->addContent($this->interests->th());
		$this->addContent($this->lastLogin->th());
		return $this->getContent();
	}
	
	public function display(){
		$this->addContent(parent::display(),true);
		
		$this->addContent($this->loginName->p());
		$this->addContent($this->nameFirst->p());
		$this->addContent($this->nameLast->p());
		$this->addContent($this->email->p());
		$this->addContent($this->focus->p());
		$this->addContent($this->interests->p());
		$this->addContent($this->lastLogin->p());
		$this->addContent($this->mustUpdatePwd->p());
		$this->addContent($this->isActive->p());
		$this->addContent($this->isAdmin->p());
		return $this->getContent();
	}
	
	public function getPostVars(){
		parent::getPostVars();
		$this->nameFirst->post();
		$this->nameLast->post();
		$this->email->post();
		$this->focus->post();
		$this->interests->post();
		$this->isAdmin->post();
		$this->isActive->post();
		$this->mustUpdatePwd->post();
		$this->loginName->post();
	}

}

class user extends _entity{
protected $__MyClassName = 'User';
	   		

	private $loginPwd;
	public $validationMessages;

	
	protected function setHelperClasses(){
		$this->f = new UserFields();
		$this->sql = new UserSQL();
		$this->links = new UserLinks();
	}/*
	
	protected function beforeSetDetails(){
	}*/
		
	protected function afterSetDetails(){
	}
	
	protected function afterSetDefaults(){
	}
	
	public function afterDisplay(){
		if (($_SESSION['is-admin'] == 'yes') && ($_SESSION['user-id'] != $this->id)){		
			$detail = $this->requestPasswordResetForm();
		} else {
		$detail = '';
		}

		return $detail;
	}
	

	public function setTypeId($id){
		$this->f->type->set($id);
	}
	
		
	protected function setPageTitle(){

		if ($this->pageMode != 'ADD'){
			$heading = $this->f->loginName;
			if (($_SESSION['user-id'] == $this->id) && ($_SESSION['must-update-pwd'] == 'yes')){
				$heading .= br().'Please update your profile password.';
			}

		} else {
			$heading = 'Add User Profile';
		}

		$this->_pageTitle = $heading;
	}
	
	
	protected function setPageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';
		$userL = new UserLinks($menuType,$menuStyle);		
		$menuL = new MenuLinks($menuType,$menuStyle);
		
		$menu = $userL->openMenu('section-heading-links');
		$menu .= $menuL->linkReference();
		$menu .= $userL->resetMenu();
		if ($this->pageMode == 'VIEW'){
			if ($_SESSION['is-admin'] == 'yes' || $_SESSION['user-id'] == $this->id){
				//user is admin or self, show edit link
				$menu .= $userL->detailEditHref($this->id);
			}
		} elseif ($this->pageMode == 'EDIT'){
			$menu .= $userL->detailViewHref($this->id);
		}
		$menu .= $userL->listingHref();
		
		$menu .= $userL->closeMenu();
		$this->_pageMenu = $menu;
	}
	

	public function getPageDetails(){			
		if ($_SESSION['is-admin'] == 'yes'){
			//is admin allow edit others and add users
		} else {
			//not admin allow edit self only
			if ($this->pageMode == 'ADD'){
				//non admin trying to add a user
				//revert to viewing self
				$this->setDetails($_SESSION['user-id'],0,'VIEW');
			} elseif ($this->pageMode == 'EDIT' && $_SESSION['user-id'] == $this->id){
				//editing self, ok
			} else {
				$this->pageMode = 'VIEW';
			}	 
		}

		if ($this->pageMode == 'EDIT' or $this->pageMode == 'ADD'){
			$details = $this->editForm();
		} else {
			$details = $this->display();
		}
		return $details;
		
	}
	



	private function generatePassword($length = 11) {
		$chars = '.!%^&*#@';
		$clen = mb_strlen($chars);
		$base = md5(microtime());
		$password = substr(base_convert(substr($base,1),16,36),0,$length);
		$len = mb_strlen($password);
		for($i = 0;$i < $len;$i++)
		{
			if(rand(0,1) && 1){
				$password[$i] = strtoupper($password[$i]);
			} elseif(rand(0,2) && 1 && $clen){
				$password[$i] = $chars[rand(0,$clen - 1)];
			}
		}
		return $password;
	}
	
	
	
	public function resetPassword($loginName, $loginEmail){
		
		//verify that login and email exist for an active account
		if ($this->validateLoginAndEmail($loginName,$loginEmail) == true){
			//login and email are valid and account is active 
			$this->email = $loginEmail;
		
			$newPass = $this->generatePassword();
			$newPassCrypt = $this->obfuscate(dbEscapeString($newPass),$loginName);
		
		
			$sql = $this->sql>updatePass($loginName, $newPassCrypt);
		
			$result = dbRunSQL($sql);
			
			$links = new UserLinks;	
			$message = $_SESSION['site-title'].br();
			$message .= $links->formatHref($_SESSION['site-org'],$_SESSION['site-org-url']).br();
			$message .= "Profile password has been reset".br();
			$message .= "Login Name = ".$loginName.br();
			$message .= "New Password = ".$newPass.br();
			$message .= $links->formatHref($_SESSION['site-url'],$_SESSION['site-url']).br();
			$this->mailUser($message,'Password Reset');
			$_SESSION['login-messages'] = 'Profile password reset';
		} else {
			$_SESSION['login-messages'] = 'Active profile not found, contact an administrator';	
		}
	}

	private function mailUser($message = '', $subject = 'User Notification'){

		$fromAddress = ini_get('sendmail_from');
		$headers = "From: ".$fromAddress."\n";
		$headers .= "X-Mailer: PHP/".phpversion()."\n"; 
		$headers .= "MIME-Version: 1.0\n"; 
		$headers .= "Content-Type: text/html; charset=utf-8\n"; 
		$headers .= "Content-Transfer-Encoding: 8bit\n"; 
		$newSubject = $_SESSION['site-title'].':'.$subject;
		mail($this->f->email,$newSubject,$message,$headers, '-f '.$fromAddress);
	}
	
	private function obfuscate($pass,$login){
		//$salt = crypt($login);
		$hash = md5($pass.$login);
		return $hash;	
	}

	public function validateLoginAndEmail($loginName, $loginEmail){
		$validLoginEmail = false;
		$sql = $this->sql->validateLoginAndEmail($loginName,$loginEmail);
		$found = dbGetCount($sql,'user_count');
		

		if ($found == 1){
			$validLoginEmail = true;
		} 
		return $validLoginEmail;
	}
	
	public function validateLogin($loginName, $loginPwd){
	$this->echoPrint(true, 'checking email & password','validateLogin');
		$loginPwdCrypt = $this->obfuscate($loginPwd,$loginName);
		$validUser = false;
		$sql = $this->sql->validateUser($loginName, $loginPwdCrypt);
		$found = dbGetCount($sql,'user_count');
	
		
		$this->echoValue(true, 'foundUser', $found, 'validateLogin');
	

		//FORCE LOGIN SUCCESS TO SETUP FIRST USER
		//then comment this line
		//printLine('forcing login');
		$found = 1;
		$this->echoValue(true, 'foundUser', $found, 'DEVELOPMENT Forcing result validateLogin');
		if ($found == 1){
			$validUser = true;
			printLine('validateLogin.updatingLastLogin');
			$this->updateLastLogin($loginName);
			$this->setSecurity($loginName);
			$_SESSION['login-messages'] = '';
		} else {
			$_SESSION['login-messages'] = 'Could not validate login';
		}
		
		return $validUser;
		
	}
	
	
	private function setSecurity($loginName){
		$sql = $this->sql->securityUser($loginName);

		$result = dbGetResult($sql);
		if($result){
	  		while ($row = $result->fetch_assoc())
			{
				$_SESSION['user-id'] = $row["id"];
				$_SESSION['is-admin'] = $row["is_admin"];  
				$_SESSION['must-update-pwd'] = $row["must_update_pwd"];
			}
		$result->close();
		}
			
	}
	
	private function updateLastLogin($loginName){
		
		$sql = $this->sql->updateLastLogin($loginName);
		
		$result = dbRunSQL($sql);
		
	}
	
	public function loginForm(){

		$message = 'Please Login...';
		$message .= $this->getLoginMessages();
		$entity = 'user-type';

		$contextMenu = $this->links->formatToggleLink('formOptional','Lost Password');
		$form = openEditForm('site-login', $message, 'sys_Login.php',$contextMenu);

		$fields = inputFieldUser($entity,$this->f->loginName->value(),'loginName','Login Name');

		$input = getPasswordInput('login-pwd', 10, 50);
		$fields .= captionedInput('Password',$input);

		//end required fields
		$formRequired = $fields;
		//formOptional
			$this->echoPrint(true, 'building login form.password recovery email input ','loginForm');
		$fields = $this->f->email->input($entity,'TEXT');
		//'login-email','Login Email',50,255);
		$fields .= getLoginLogoutButton('Reset Password','submit-pwd-reset').br();	
		$msg = 'To reset password, enter your login name and profile email.'.br();
		$msg .= 'If your email is not registered, please contact an administrator to setup a profile.';
		$fields .= captionedInput('Lost Password Instructions',$msg);

	
		//end optional fields
		$formOptional = $fields;
		
		$hidden = getHiddenInput('client-time-zone','');
		$input = getLoginLogoutButton('Login','submit-login');
		$formSubmit = $hidden.$input;
			

		$form .= closeEditForm($entity,$formRequired,$formOptional,$formSubmit);

		$form .= openDiv('site-login-notices');
		$form .= $_SESSION['site-login-notice'];
		$form .= closeDiv();
			$this->echoPrint(true, 'returning login form','loginForm');
		return $form;			
	}
	
	private function getLoginMessages(){
		if (isset($_SESSION['login-messages']) && $_SESSION['login-messages'] != ''){
			$messages = $_SESSION['login-messages'].br();
			unset($_SESSION['login-messages']);
		} else {
			$messages = '';
		}
		return $messages;
	}
	
	public function requestPasswordResetForm(){
		
		$form = openForm('user-password-reset','sys_User_Save.php','none');
		$hidden = $this->f->id->inputHidden();
		$hidden .= $this->f->email->inputHidden();	
		$hidden .= $this->f->loginName->inputHidden();
		$button = getSubmitButton('Request Reset','submit-pwd-reset');
		$messages = $this->getLoginMessages();
		$form .= $messages.$button.$hidden;
		$form .= closeForm();		
		return $form;
		
	}
	
	//overrride entity.listrowlink to limit editing to administrators or self edit
	protected function listRowLink(){

		if (($_SESSION['is-admin'] == 'yes') || ($_SESSION['user-id'] == $this->f->id->value)){
			$link = $this->links->itemViewEdit($this->f->loginName->value(),$this->f->id->value());
		} else {
			$link = $this->links->view($this->f->loginName->value(),$this->f->id->value());
		}
			return $link;
	}
		
	public function addForm($idParent = 0){
		if ($_SESSION['is-admin'] == 'yes'){
			$this->pageMode = 'ADD';
			$this->setDefaults();
			$form = $this->editForm();
		} else {
			$quickEdit = 'Please request Administrator assistance to add users';
		}
		return $form;
	}

	
	protected function editForm(){
	
		if (($_SESSION['is-admin'] == 'yes') || ($_SESSION['user-id'] != $this->id->value)){
			$form = $this->secureEditForm();
		} else {
			$form = $this->display();
		}
		return $form;
	}
	
	protected function secureEditForm(){
		$this-> echoState(true,'secureEditForm');

		$entity = 'user';
		$contextMenu = $this->links->formatToggleLink('formOptional','+Options');
		
		$edit = new _editForm($entity,$this->pageMode,$this->pageSave);
		$edit->open($contextMenu,$this->_titleEntity);

		if ($this->pageMode == 'ADD'){
			$input = $this->f->loginName->input($entity,'TEXT');
			
			$messages = @$this->validationMessages['login'];			
		} else {
			$input = $this->f->loginName->inputHidden();
			$messages = '(cannot be changed)';
		}
		$edit->required->addContent( captionedInput('Login Name '.$messages,$input));



		$input = getPasswordInput('loginPwd', 10,20);
		$passwordGroup = captionedInput('Password',$input);
		
		$input = getPasswordInput('loginPwdConfirm', 10,20,'Confirm Password');
		$messages = @$this->validationMessages['password'];
		$passwordGroup .= captionedInput('Password Confirm '.$messages,$input);
		$edit->required->addContent(wrapDivFieldGrouping($entity,$passwordGroup));

		$input = $this->f->email->inputText();
		$messages = @$this->validationMessages['email'];
		$edit->required->addContent(captionedInput('Email Address '.$messages,$input));
		$edit->optional->addContent($this->f->nameFirst->input($entity,'NAME'));
		$edit->optional->addContent($this->f->nameLast->input($entity,'NAME'));


		$m = new UserType;
		$select = $m->options($this->f->type->id->value,'idType','false');
		$edit->optional->addContent(captionedInput('User Type',$select));
		

		$edit->optional->addContent($this->f->focus->input($entity, 'COMMENTS'));
		$edit->optional->addContent($this->f->interests->input($entity,'COMMENTS'));
	
		
		
		if ($_SESSION['is-admin'] == 'yes' && $_SESSION['user-id'] != $this->id){
			//if admin and not editing self allow setting admin
			//prevents admins from disabling their own accounts
			$input1 = $this->f->isAdmin->input($entity,'YES-NO');
			//,'Is Administrator','false');
			$input2 = $this->f->isActive->input($entity,'YES-NO');
			$input3 = $this->f->mustUpdatePwd->input($entity, 'YES-NO');
			//,'Must Update Password','false');
		} else {
			$input1 = $this->f->isAdmin->inputHidden();
			$input2 = $this->f->isActive->inputHidden();
			$input3 = $this->f->mustUpdatePwd->inputHidden();
		}				
		$input = captionedInput('Administrator',$input1);
		$input .= captionedInput('Active Profile',$input2);
		$input .= captionedInput('Must Update Password', $input3);
				$edit->optional->addContent(captionedInput('Profile Settings',$input));
		
				$edit->hidden->addContent(  getHiddenInput('mode', $this->pageMode));
				$edit->hidden->addContent($this->f->id->inputHidden());

				$edit->submit->addContent(  getSaveChangesResetButtons());
			return $edit->close();
	}
	
	
	public function afterCollectPostValues(){
		//parent::collectPostValues();
		//get password for local validation
		$pwd = dbEscapeString($_POST['loginPwd']);
		$pwdConfirm = dbEscapeString($_POST['loginPwdConfirm']);
		//clear the password from post variables if canceling form post
		$_POST['loginPwd'] = 'password';
		$_POST['loginPwdConfirm'] = 'password';

		//validate login name
		if (($this->f->loginName->value() == '') || is_null($this->f->loginName->value())){
			$this->cancelPost('Login name cannot be blank','login');
		}
		//validate email address
		if (($this->f->email->value() != '') && (filter_var($this->f->email->value(), FILTER_VALIDATE_EMAIL) !== false)) {
    		// $email contains a valid email
		} else {
			if ($this->f->email->value() == ''){
				$validation = 'Email address cannot be blank';
			} else {
				$validation = 'Email address is not valid';
			}
			$this->cancelPost($validation,'email');
		}
		//validate password
		if (($pwd != '') && ($pwd == $pwdConfirm) && ($pwd != 'password')){
			$this->f->loginPwd->set($this->obfuscate($pwd, $this->f->loginName-value));
		} else {
			if ($pwd == '' || is_null($pwd) || is_null($pwdConfirm) || $pwdConfirm == ''){
				$validation = 'Password cannot be blank';
			} elseif ($pwd != $pwdConfirm){
				$validation = 'Passwords do not match';
			}
			$this->cancelPost($validation,'password'); 
		}
	}
	
	protected function cancelPost($message, $validation){
		//echo 'in cancel post:'.$message;
		//set validation message
		$this->validationMessages[$validation] = span($message,'highlight-validation');
		//display editing form with current validation state
		$this->printPage();
		die;
	}

	protected function saveUpdate(){
			
			$sql = " UPDATE users AS u ";
			$sql .= " SET ";
			$sql .= " u.name_first = '".$this->f->nameFirst->value()."', ";
			$sql .= " u.name_last = '".$this->f->nameLast->value()."', ";
			$sql .= " u.email = '".$this->f->email->value()."', ";
			$sql .= " u.focus = '".$this->f->focus->value()."', ";
			$sql .= " u.interests = '".$this->f->interests->value()."', ";
			$sql .= " u.login_name = '".$this->f->loginName->value."', ";
			$sql .= " u.login_pwd = '".$this->f->loginPwd->value()."', ";
			$sql .= " u.is_admin = '".$this->f->isAdmin->value()."', ";
			$sql .= " u.is_active = '".$this->f->isActive->value()."', ";
			$sql .= " u.must_update_pwd = '".$this->f->mustUpdatePwd->value()."', ";
			$sql .= " u.type_id = ".$this->f->type->id->value()." ";
			$sql .= " WHERE u.id = ".$this->f->id->value()."  ";			

			$result = dbRunSQL($sql);

			$this->mailUser('Your User Profile Has Been Updated');
			
			if ($this->f->loginName == $_SESSION['login-name']){
				$this->setSecurity($this->f->loginName);
			}
	}
	
	protected function saveInsert(){
	
			$sql = " INSERT INTO users ";
			$sql .= " (name_first, ";
			$sql .= " name_last, ";
			$sql .= " email, ";
			$sql .= " focus, ";
			$sql .= " interests, ";
			$sql .= " login_name, ";
			$sql .= " login_pwd, ";
			$sql .= " is_admin, ";
			$sql .= " is_active, ";
			$sql .= " must_update_pwd, ";
			$sql .= " created, ";
			$sql .= " type_id) ";
			$sql .= " VALUES (";
			$sql .= " '".$this->f->nameFirst->value()."', ";
			$sql .= " '".$this->f->nameLast->value()."', ";
			$sql .= " '".$this->f->email->value()."', ";
			$sql .= " '".$this->f->focus->value()."', ";
			$sql .= " '".$this->f->interests->value()."', ";
			$sql .= " '".$this->f->loginName->value()."', ";
			$sql .= " '".$this->f->loginPwd->value()."', ";
			$sql .= " '".$this->f>isAdmin-value()."', ";
			$sql .= " '".$this->f->isActive>value()."', ";
			$sql .= " '".$this->f->mustUpdatePwd->value()."', ";
			$sql .= " CURRENT_TIMESTAMP, ";			
			$sql .= " ".$this->f->type->id->value().") ";
			
			$result = dbRunSQL($sql);

			$this->id = dbInsertedId();
	}
	
	
} 
?>
