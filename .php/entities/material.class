<?php 
/*
 ^_currentUser set to $_SESSION['login-name']
 °_currentTimestamp set to $sessionTime
 
 _fieldsetTaskChild
 id, name, description
 created°, updated°, highlight
 parentEntity, typeEntity
 project, projectType, location
 started°, approved,approvedBy^
 task, taskType, reported°,doneBy^
 notes, linkUrl, linkText
*/

class materialFields extends _fieldsetTaskChild{

 
 public $paidTo;
 public $quantity;	
 public $quantityUnits;
 public $costUnit;	
 public $costEstimated;
 public $costActual;
 

public function __construct(){

	$this->paidTo = new _nameField('paid_to','paid-to','Paid To');
	$this->quantity = new _numberField('quantity','quantity','Quantity');
	$this->quantityUnits = new _fieldIdName('qty_unit_measure_id','qty-units','QtyUnits','qty_unit_measure_name');
	$this->costEstimated = new _numberField('cost_estimated','cost-est','Cost Estimated');			
	$this->costActual = new _numberField('cost_actual','cost-actual','Cost Actual');
	$this->costUnit = new _numberField('cost_unit','cost-unit','Cost Per Unit');
	$this->_register('paidTo',$this->paidTo);
	$this->_register('quantity',$this->quantity);
	$this->_register('quantityUnits',$this->quantityUnits);
	$this->_register('costUnit',$this->costUnit);
	$this->_register('costEstimated',$this->costEstimated);
	$this->_register('costActual',$this->costActual);

}

public function setDefaults(){
	$this->paidTo->setDefault(1);
	$this->quantity->setDefault(1);
	$this->quantityUnits->setDefault(0);
	$this->costUnit->setDefault(0);
	$this->costEstimated->setDefault(0);
	$this->costActual->setDefault(0);		
}

}


class material extends _entity{
protected $_MyClassName = 'Material';
	protected $titleEntity = 'Material';
  	protected $pageSave = 'pr_Material_Save.php';
  	
	public function __construct($mode = 'VIEW', $id = 0, $idParent = 0){
		parent::__construct($mode, $id, $idParent);
		$this->f = new materialFields();
		$this->links = new materialLinks();
		$this->sql = new MaterialSQL();
		
	}

		
	protected function setPageTitle(){	
		$title = openDiv('section-heading-title','none');
		$title .= $this->f->parentProject->name->value().br();
		$title .= 'Task: '.$this->parentTask->name->value();		
		$title .= closeDiv();
		$this->_pageTitle = $title;
	}
	
	
	protected function setPageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';
		
		$projects = new ProjectLinks($menuType,$menuStyle);
		$tasks = new TaskLinks($menuType,$menuStyle);
		$materials = new MaterialLinks($menuType,$menuStyle);
					
		$menu = $projects->openMenu('section-heading-links');

		$menu .= $projects->detailViewHref($this->f->parentProject->id->value());
		if ($this->task->project->materialsCount > 0){
//			$menu .= $projects->resetMenu();
			$menu .= $materials->listingHref(0,'ProjectMaterials',$this->f->parentProject->id->value(),'PROJECT','YES');
		}
		
		$menu .= $projects->resetMenu();
		$menu .= $tasks->detailViewHref($this->f->parentTask->id->value);
		if ($this->task->materialCount > 0){
			$menu .= $materials->listingHref($this->f->parentTask->id->value,'TaskMaterials',0,'TASK','NO');
		}
		$menu .= $projects->resetMenu();
		
		if ($this->pageMode == 'VIEW'){
			$menu .= $materials->detailEditHref($this->id);
		} elseif ($this->pageMode == 'EDIT'){
			
			$menu .= $materials->detailViewHref($this->id);
		}
		
		$menu .= $projects->closeMenu();
		$this->_pageMenu = $menu;
	}

	public function display(){
		parent::display();
		
		if (($this->f->linkText->value() != '') && ($this->f->linkUrl->value() != '')){
			$l = new MaterialLinks('DIV','menu');
			$link = $l->formatHref($this->f->linkText->value(),$this->linkUrl->value(),'_blank');
			$detail .= captionedParagraph('a-weblink','Web Link',$link);
		}		

		
		return $detail;
	}	
	
	protected function setDefaults(){
		parent::setDefaults();
	
		if ($this->pageMode == 'ADD'){		
	
			if (isset($_SESSION['last-material-date'])){
			 $this->dateReported->setDefault($_SESSION['last-material-date']);
			}
			
			if (isset($_SESSION['last-material-paid-to'])){
			 $this->paidTo->setDefault($_SESSION['last-material-paid-to']);
			}
		
			if (isset($_SESSION['last-material-done-by'])){
			 $this->doneBy->setDefault($_SESSION['last-material-done-by']);
			} 
		}
	}
	
	public function editForm(){
	
		$entity = 'material';
		$contextMenu = $this->links->formatToggleLink('formOptional','+Options');		
		$this->f->setEntity($entity);
		$edit = new _inputForm($entity,$this->pageMode,$this->pageSave);
		$edit->open($contextMenu,$this->titleEntity);
		
		$edit->required->addContent($this->f->name->input());
		$edit->required->addContent($this->f->doneBy->input());
		$edit->required->addContent($this->f->reported->input());
		$edit->required->addContent($this->f->paidTo->input());
		
		$edit->required->addContent($this->f->quantity->input());
		$edit->required->addContent($this->f->costUnit->input());
		
		$base = new UnitOfMeasure;
		$select = $base->options($this->f->quantityUnits,$this->f->quantityUnits->env->variable());
		$edit->required->addContent($this->f->quantityUnits->inputChoice($select));

		$type = new materialType('OPTIONS');
		$select = $type->options($this->f->typeEntity->value(),$this->f->typeEntity->env->variable(),'false',true);
		$edit->required->addContent($this->f->typeEntity->inputChoice($select));
		
		$this->f->costEstimated->setCaption('Estimated Cost (Based on unit cost and quantity)');
		$this->f->costActual->setCaption('Actual Cost (reset when task costs are approved)');
		
		$edit->optional->addContent($this->f->costEstimated->input());
		$edit->optional->addContent($this->f->costActual->input());
		$edit->optional->addContent($this->f->linkText->input());
		$edit->optional->addContent($this->f->linkUrl->input());
		
		$edit->optional->addContent($this->f->description->input());
		$edit->optional->addContent($this->f->notes->input());
		
		$edit->hidden->addContent(getHiddenInput('mode', $this->pageMode));
		$edit->hidden->addContent($this->f->task->id->inputHidden());
		$edit->hidden->addContent($this->f->id->inputHidden());
		$edit->submit->addContent(getSaveChangesResetButtons());

		return $edit->close();
	}
	
	public function collectPostValues(){
		parent::collectPostValues();
		$_SESSION['last-material-paid-to'] = $this->paidTo->value();
 		$_SESSION['last-material-done-by'] = $this->doneBy->value();
 		$_SESSION['last-material-date'] = $this->reported->value();
		
		$this->f->costEstimated->set($this->f->costUnit->value() * $this->f->quantity->value());

		$this->setParentTask();
	}

	protected function saveUpdate(){
	

			
			$sql = " UPDATE materials m ";
			$sql .= " SET ";
			$sql .= " m.name = '".$this->f->name->value()."', ";
			$sql .= " m.description = '".$this->f->description->value()."', ";
			$sql .= " m.notes = '".$this->f->notes->value()."', ";
			$sql .= " m.updated = CURRENT_TIMESTAMP, ";
			$sql .= " m.date_reported = '".$this->f->dateReported->value()."', ";
			$sql .= " m.done_by = '".$this->f->doneBy->value()."', ";
			$sql .= " m.paid_to = '".$this->f->paidTo->value()."', ";			
			$sql .= " m.link_text = '".$this->f->linkText->value()."', ";
			$sql .= " m.link_url = '".$this->f->linkUrl->value()."', ";
			$sql .= " m.type_id = ".$this->f->typeEntity->id->value().", ";
			$sql .= " m.location_id = ".$this->f->location->id->value().", ";
			$sql .= " m.quantity = ".$this->f->quantity->value().", ";
			$sql .= " m.qty_unit_measure_id = ".$this->f->quantityUnits->id->value().", ";
			$sql .= " m.cost_unit = ".$this->f->costUnit->value().", ";
			$sql .= " m.cost_estimated = ".$this->f->costEstimated->value()." ";
			$sql .= " m.cost_actual = ".$this->f->costActual->value()." ";
			$sql .= " WHERE m.id = ".$this->f-id." ";

			$result = dbRunSQL($sql);
			
			$this->task->resetMaterialsAuthorization();
			
		}
			
	protected function saveInsert(){
	
			$sql = " INSERT INTO materials ";
			$sql .= " (name, ";
			$sql .= " description, ";
			$sql .= " task_id, ";
			$sql .= " location_id, ";
			$sql .= " date_reported, ";
			$sql .= " done_by, ";
			$sql .= " paid_to, ";
			$sql .= " updated, ";
			$sql .= " link_url, ";
			$sql .= " link_text, ";			
			$sql .= " quantity, ";
			$sql .= " cost_unit, ";
			$sql .= " cost_estimated, ";
			$sql .= " cost_actual, ";
			$sql .= " type_id, ";
			$sql .= " qty_unit_measure_id, ";
			$sql .= " notes) ";
			$sql .= " VALUES (";
			$sql .= "'".$this->f->name->value()."', ";
			$sql .= "'".$this->f->description->value()."', ";
			$sql .= "".$this->f->taskEntity->id->value().", ";
			$sql .= "".$this->f->location->id->value().", ";
			$sql .= " '".$this->f->reported->value()."', ";
			$sql .= " '".$this->f->doneBy->value()."', ";
			$sql .= " '".$this->f->paidTo->value()."', ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= " '".$this->f->linkUrl->value()."', ";
			$sql .= " '".$this->f->linkText->value()."', ";						
			$sql .= "".$this->f->quantity->value().", ";
			$sql .= "".$this->f->costUnit->value().", ";
			$sql .= "".$this->f->costEstimated->value().", ";
			//$sql .= "".$this->f->costActual.", ";
			$sql .= " ".$this->f->typeEntity->id->value().", ";
			$sql .= " ".$this->f->quantityUnits->id->value().", ";
			$sql .= "'".$this->f->notes->value()."') ";
			
			$result = dbRunSQL($sql);
			
			$this->f->id = dbInsertedId();
			$this->f->task->f->resetMaterialsAuthorization();
		
	
	}
	
} 
?>
