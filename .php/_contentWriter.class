<?php 



abstract class _contentWriter{
	protected $_content = '';
 	protected function resetContent($reset = true){
 		if ($reset == true){
 		$this->_content = '';
 		}
 	}
	public function addContent($value = '', $reset = false){
		$this->resetContent($reset);
 		$this->_content .= $value;
 	}
	public function getContent($reset = true){
 		$value = $this->_content;
		$this->resetContent($reset);
 		return $value;
	}
	public function encloseString($value = '', $delimiter = "'"){
		return $delimiter.$value.$delimiter;
	}
}

class _sqlClause extends _contentWriter{
public function __construct(){

	$this->resetContent(true);
}

}

 class _sqlWriter extends _contentWriter{
 protected $sqlType = 'SELECT';
 protected $_cols;
 protected $_tables;
 protected $useWhere = false;
 protected $_where;
 protected $useOrder = false;
 protected $_order;
 protected $useGroup = false;
 protected $_group;
 protected $useLimit = false;
 protected $_limit;
 protected $_values;

 public function __construct($sqlType = 'SELECT'){
 $this->sqlType = $sqlType;
 $this->_tables = new _sqlClause();
 $this->_where = new _sqlClause();
 switch ($this->sqlType){
 case 'SELECT':
 $this->_cols = new _sqlClause();
 $this->_tables = new _sqlClause();

 $this->_group = new _sqlClause();
 $this->_order = new _sqlClause();
 $this->_limit = new _sqlClause();
 break;
 case 'UPDATE':
 $this->_values = new _sqlClause();
 break;
 case 'INSERT';
 $this->_cols = new _sqlClause();
 $this->_values = new _sqlClause();
 break;
 default:
 //nvalid statement type
 }

 }

 protected function lastItem($last = false){
 if ($last == false){
 $lineEnd = ", ";
 } else {
 $lineEnd = " ";
 }
 return $lineEnd;
 }
 public function editColumn($field, $value, $last = false){
 switch($this->sqlType){
 case 'UPDATE':
 $this->_values->addContent($field." = ".$value);
 $this->_values->addContent($this->lastItem($last));
 break;
 case 'INSERT':
 $this->_cols->addContent($field);
 $this->_cols->addContent($this->lastItem($last));
 $this->_values->addContent($value);
 $this->_values->addContent($this->lastItem($last));
 break;
 default:

 }
 }
 public function editField(_field &$fld, $last = false){
 $this->editColumn($fld->dbColumn,$fld->sqlValue(),$last);
 }
 public function where($field,$value,$last = false){
 $this->useWhere = true;
 $this->_where->addContent("(".$field." = ".$value.")");
 if ($last == false){
 $this->_where->addContent(" AND ");
 }
 }
 public function editStatement($table){
 switch($this->sqlType){
 case 'UPDATE':
 $edit = $this->update($table);
 break;
 case 'INSERT':
 $edit = $this->insert($table);
 break;
 default:
 }
 return $edit;
 }

 public function insert($table){
 $this->addContent(" INSERT INTO ".$table." ( ");
 $this->addContent($this->_cols->getContent());
 $this->addContent(") VALUES (");
 $this->addContent($this->_values->getContent());
 return $this->getContent();
 }

 public function update($table){
 $this->addContent(" UPDATE ".$table." SET ");
 $this->addContent($this->_values->getContent());
 if ($this->useWhere == true){
 $this->addContent($this->_where>getContent());
 }
 return $this->getContent();
 }

 }

class _editSection extends _contentWriter{
public $sectionId = '';
public function __construct($sectionId){
$this->sectionId = $sectionId;
}

}

class _editForm extends _contentWriter{
public $entity;
public $mode;
public $url;

public $required;
public $optional;
public $hidden;
public $submit;

public function __construct($entity, $mode, $url){
$this->entity = $entity;
$this->mode = $mode;
$this->url = $url;


$this->required = new _editSection('required');
$this->optional = new _editSection('optional');
$this->hidden = new _editSection('hidden');
$this->submit = new _editSection('submit');
}

public function open($contextMenu = '',$titleEntity = ''){
		$legend = $this->mode.':  '.$titleEntity;
		$form = openEditForm($this-entity,$legend,$this->url, $contextMenu);
		$this->writeContent($form);
	}
	public function close(){
	
		$this->submit->addContent($this->hidden->getContent());
		
		$optional = $this->optional->getContent();
		$required = $this->required->getContent();
		$submit = $this->submit->getContent();
	
		$this->addContent( closeEditForm($entity,$required,$optional,$submit));
		return $this->getContent;
	}


}


 
?>
