<?php 

abstract class _entityTypeFields extends _entityFields{

	public function __construct(){
		parent::__construct();
	
	    $this->notes->setShow('notes',true);
        $this->displayOrder->setShow('order',true);
        $this->highlight->setShow('highlight',true);
    }

/*
	public function setRow($row){
		parent::setRow($row);
	}
	
	public function format(){
		parent::format();
	}
	
	public function listHeading(){
		return parent::listHeading();
	}
	
	public function listDetail(){
		return parent::listDetail();
	}
	
	public function display(){
		return parent::display();
	}
	
	public function getPostVars(){
		parent::getPostVars();
	}
*/
}

abstract class _entityType extends _entity{
	protected $__MyClassName = '_entityType';
	protected $_titleEntity = '[entity] Type';
	protected $pageSave = '[entity]TypeSave.php';
	
	protected function beforeSetDetails(){
		
	}
	
	protected function afterSetDetails(){
			$this->f->name->caption = $this->_titleEntity;
	}
	
	protected function afterDisplay(){
	
	}
	
	protected function setPageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';
		$this->links->saveMenuSettings();
		$this->links->setType($menuType);
		$this->links->setStyle($menuStyle);
		
		$menuL = new MenuLinks($menuType,$menuStyle);
		
		$menu = $this->links->openMenu('section-heading-links');
		$menu .= $menuL->linkReference();
		$menu .= $this->links->resetMenu();
		
		$menu .= $this->links->toggleEdit($this->pageMode,$this->f->id->value(),$this->f->parent->id->value());
		
		$menu .= $this->links->list();
		$menu .= $this->links->closeMenu();
		
		$this->links->restoreMenuSettings();
		
		$this->_pageMenu = $menu;
	}
	
	protected function afterSetDefaults(){
		if ($this->pageMode == 'ADD'){
		/*$this->f->defaults();*/
		
		$s = $this->sql->count();
		$next = dbGetCount($this->sql->count(), 'count_details');
		$next += 1;
		$this->f->displayOrder->set($next);
		}
		
	}
	protected function editForm(){
		$entity = 'entity-type';
		$contextMenu = $this->links->formatToggleLink('formOptional','+Options');
		
		$edit = new _editForm($entity,$this->pageMode,$this->pageSave);
		$edit->open($contextMenu,$this->_titleEntity);
		$edit->required->addContent($this->f->name->input($entity, 'NAME'));
		$edit->required->addContent($this->f->displayOrder->input($entity,'NUMBER'));
		$edit->required->addContent(inputFieldHighlightStyle($entity,$this->f->highlight->value(),'highlight'));
		$edit->optional->addContent($this->f->description->input($entity,'DESCRIPTION'));
		$edit->optional->addContent($this->f->notes->input($entity,'NOTES'));
		$edit->hidden->addContent(getHiddenInput('mode', $this->pageMode));
		$edit->hidden->addContent($this->f->id->inputHidden());
		$edit->submit->addContent(getSaveChangesResetButtons());
		return $edit->close;
	}
	
	protected function afterCollectPostValues(){
	
	}
	protected function saveUpdate(){

			$sql = " UPDATE ".$this->sql->getBaseTable()." AS base ";
			$sql .= " SET ";
			$sql .= " base.name = '".$this->f->name->value()."', ";
			$sql .= " base.description = '".$this->f->description->value()."', ";
			$sql .= " base.updated = CURRENT_TIMESTAMP, ";
			$sql .= " base.highlight_style = '".$this->f->highlight->value()."', ";
			$sql .= " base.display_order = ".$this->f->displayOrder->value().", ";
			$sql .= " base.notes = '".$this->f->notes->value()."' ";
			$sql .= " WHERE base.id = ".$this->f->id->value()."  ";		
				
			$result = dbRunSQL($sql);
	}
	
	protected function saveInsert(){
			$sql = " INSERT INTO ".$this->sql->getBaseTable();
			$sql .= " (name, ";
			$sql .= " created, ";
			$sql .= " updated, ";
			$sql .= " description, ";
			$sql .= " display_order, ";
			$sql .= " highlight_style, ";
			$sql .= " notes) ";
			$sql .= " VALUES (";
			$sql .= "'".$this->f->name->value()."', ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= "'".$this->f->description->value()."', ";
			$sql .= $this->f->displayOrder->value().", ";
			$sql .= "'".$this->f->highlight.value()"', ";
			$sql .= "'".$this->f->notes.value()."') ";
			
			$result = dbRunSQL($sql);
			
			$this->f->id = dbInsertedId();
			$this->synchIds();
	}
	
		
}





?>
