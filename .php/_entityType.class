<?php 

class _entityTypeFields extends _entityFields{
/******
_entityFields    id, name, description, 
highlightStyle, created, updated
idType, idParent,

_entityTypeFields  notes, displayOrder
****/

    public $notes;
	public $displayOrder = 0;

	public function setRowValues($row){
		parent::setRowValues($row);
		$this->notes = ($row["notes"]);
		$this->displayOrder = $row["display_order"];
	}
	
	protected function formatForDisplay(){
		parent::formatForDisplay();
		$this->notes = displayLines($this->notes);
		
	}
	
	public function listHeading(){
		$heading = parent::listHeading();
		$heading .= wrapTh('Display Order');		
		$heading .= wrapTh('Notes');
		return $heading;
	}
	
	public function listDetail(){
		$detail = parent::listDetail();
		$detail .= wrapTd($this->displayOrder);
		$detail .= wrapTd($this->notes);
		return $detail;
	}
	
	public function displayDetail(){
		$detail = parent::displayDetail();
		$detail .= para('display-order', 'Display Order', $this->displayOrder);
		$detail .= para('notes', 'Notes', $this->notes);
		return $detail;
	}

}

class _entityType extends _entity{
	protected $__MyClassName = '_entityType';
	protected $_titleEntity = '[entity] Type';
	protected $pageSave = '[entity]TypeSave.php';
	//standard entity type properties
    public $f;
    public $sql;
	public $links;
 
 
 	public function __construct($mode = 'VIEW', $id = 0, $idParent = 0){
		parent::__construct($mode, $id, $idParent);
		$this->f = new _entityTypeFields;
		$this->sql = new _entityTypeSQL;
		$this->links = new _entityTypeLinks();
	}
	
	protected function setPageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';
		$this->links->saveMenuSettings();
		$this->links->setType($menuType);
		$this->links->setStyle($menuStyle);
		
		$menuL = new MenuLinks($menuType,$menuStyle);
		
		$menu = $this->links->openMenu('section-heading-links');
		$menu .= $menuL->linkReference();
		$menu .= $this->links->resetMenu();
		if ($this->pageMode == 'VIEW'){
			$menu .= $this->links->detailEditHref($this->id);
		} elseif ($this->pageMode == 'EDIT'){
			$menu .= $this->links->detailViewHref($this->id);
		}
		$menu .= $this->links->listingHref();
		$menu .= $this->links->closeMenu();
		
		$this->links->restoreMenuSettings();
		
		$this->_pageMenu = $menu;
	}
	


	public function collectPostValues(){

		$this->f->id = $_POST['id'];
		$this->id = $this->f->id;
		$this->f->name = dbEscapeString($_POST['name']); 
		$this->f->description = dbEscapeString($_POST['description']); 
		$this->f->notes = dbEscapeString($_POST['notes']); 		
		$this->f->highlightStyle = dbEscapeString($_POST['highlightStyle']); 		
		$this->f->displayOrder = $_POST['displayOrder'];
		$this->pageMode = $_POST['mode'];	
	}
	
	protected function setDefaults(){
	
	
	
	}
	


	
	public function editForm(){
		
		$legend = $this->pageMode;
		$legend .= $this->$_titleEntity;
		$entity = 'entity-type';
	
		$contextMenu = $this->links->formatToggleLink('formOptional','+Options');
		$form = openEditForm($entity,$legend,$this->pageSave,$contextMenu);

		//formRequired fields		
		$fields = inputFieldName($entity,$this->f->name,'name',$this->_titleEntity);
		$fields .= inputFieldNumber($entity,$this->f->displayOrder,'displayOrder','Display Order');
		$fields .= inputFieldHighlightStyle($entity,$this->f->highlightStyle,'highlightStyle');
		$formRequired = $fields;
		
		//formOptional fields
		$fields = inputFieldDescription($entity,$this->f->description,'description');
		$fields .= inputFieldNotes($entity,$this->f->notes,'notes');
		$formOptional = $fields;

		//formSubmit fields
		$hidden = getHiddenInput('mode', $this->pageMode);
		$hidden .= getHiddenInput('id', $this->id);
		$input = getSaveChangesResetButtons();
		$formSubmit = $hidden.$input;
	
		$form .= closeEditForm($entity,$formRequired,$formOptional,$formSubmit);	
		return $form;
	}
	
	
	protected function saveUpdate(){

			$sql = " UPDATE ".$this->sql->baseTable." AS base ";
			$sql .= " SET ";
			$sql .= " base.name = '".$this->f->name."', ";
			$sql .= " base.description = '".$this->f->description."', ";
			$sql .= " base.updated = CURRENT_TIMESTAMP, ";
			$sql .= " base.highlight_style = '".$this->f->highlightStyle."', ";
			$sql .= " base.display_order = ".$this->f->displayOrder.", ";
			$sql .= " base.notes = '".$this->f->notes."' ";
			$sql .= " WHERE base.id = ".$this->f->id."  ";		
				
			$result = dbRunSQL($sql);
	}
	
	protected function saveInsert(){
			$sql = " INSERT INTO ".$this->sql->baseTable;
			$sql .= " (name, ";
			$sql .= " created, ";
			$sql .= " updated, ";
			$sql .= " description, ";
			$sql .= " display_order, ";
			$sql .= " highlight_style, ";
			$sql .= " notes) ";
			$sql .= " VALUES (";
			$sql .= "'".$this->f->name."', ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= "'".$this->f->description."', ";
			$sql .= $this->f->displayOrder.", ";
			$sql .= "'".$this->f->highlightStyle."', ";
			$sql .= "'".$this->f->notes."') ";
			
			$result = dbRunSQL($sql);
			
			$this->id = dbInsertedId();
	}
	
		
}





?>
