<?php 

abstract class _entityTypeFields extends _entityFields{

	public function __construct(){
		parent::__construct();
	
	    $this->notes->setShow('notes',true);
        $this->displayOrder->setShow('order',true);
        $this->highlight->setShow('highlight',true);
    }


	public function setRow($row){
		parent::setRow($row);
	}
	
	public function format(){
		parent::format();
	}
	
	public function listHeading(){
	return parent::listHeading();
	/*	$this->addContent(parent::listHeading(),true);
		$this->listTh('Display Order');		
		$this->listTh('Notes');
		return $this->getContent();*/
	}
	
	public function listDetail(){
	return parent::listDetail();
		/*$this->addContent(parent::listDetail(),true);
		$this->listTd($this->displayOrder);
		$this->listTd($this->notes);
		return $this->getContent();*/
	}
	
	public function display(){
	return parent::display();
		/*$this->addContent(parent::display(),true);
		$this->detailPara('Display Order', $this->displayOrder);
		$this->detailPara('Notes', $this->notes);
		return $this->getContent();*/
	}
	
	public function getPostVars(){
		parent::getPostVars();/*
		$this->notes = $this->postString('notes');
		$this->displayOrder = $this->postVar('displayOrder',0);*/
	}

}

abstract class _entityType extends _entity{
	protected $__MyClassName = '_entityType';
	protected $_titleEntity = '[entity] Type';
	protected $pageSave = '[entity]TypeSave.php';
	
	protected function beforeSetDetails(){
		
	}
	
	protected function afterSetDetails(){
	
	}
	
	protected function afterDisplay(){
	
	}
	
	protected function setPageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';
		$this->links->saveMenuSettings();
		$this->links->setType($menuType);
		$this->links->setStyle($menuStyle);
		
		$menuL = new MenuLinks($menuType,$menuStyle);
		
		$menu = $this->links->openMenu('section-heading-links');
		$menu .= $menuL->linkReference();
		$menu .= $this->links->resetMenu();
		
		$menu .= $this->links->toggleEdit($this->pageMode,$this->f->id->value,$this->f->parent->id->value);
		
		$menu .= $this->links->list();
		$menu .= $this->links->closeMenu();
		
		$this->links->restoreMenuSettings();
		
		$this->_pageMenu = $menu;
	}
	
	protected function afterSetDefaults(){
		if ($this->pageMode == 'ADD'){
		$this->f->defaults();
		
		$s = $this->sql->count();
		$next = dbGetCount($s, 'count_details');
		$this->f->displayOrder->set($next + 1);
		}
		
	}
	protected function editForm(){
		
		$legend = $this->pageMode;
		$legend .= $this->$_titleEntity;
		$entity = 'entity-type';
	
		$contextMenu = $this->links->formatToggleLink('formOptional','+Options');
		$form = openEditForm($entity,$legend,$this->pageSave,$contextMenu);

		//formRequired fields		
		$fields = inputFieldName($entity,$this->f->name,'name',$this->_titleEntity);
		$fields .= inputFieldNumber($entity,$this->f->displayOrder->value,'displayOrder','Display Order');
		$fields .= inputFieldHighlightStyle($entity,$this->f->highlight->value,'highlight');
		$formRequired = $fields;
		
		//formOptional fields
		$fields = inputFieldDescription($entity,$this->f->description->value,'description');
		$fields .= inputFieldNotes($entity,$this->f->notes->value,'notes');
		$formOptional = $fields;

		//formSubmit fields
		$hidden = getHiddenInput('mode', $this->pageMode);
		$hidden .= getHiddenInput('id', $this->id);
		$input = getSaveChangesResetButtons();
		$formSubmit = $hidden.$input;
	
		$form .= closeEditForm($entity,$formRequired,$formOptional,$formSubmit);	
		return $form;
	}
	
	protected function afterCollectPostValues(){
	
	}
	protected function saveUpdate(){

			$sql = " UPDATE ".$this->sql->getBaseTable()." AS base ";
			$sql .= " SET ";
			$sql .= " base.name = '".$this->f->name."', ";
			$sql .= " base.description = '".$this->f->description->value."', ";
			$sql .= " base.updated = CURRENT_TIMESTAMP, ";
			$sql .= " base.highlight_style = '".$this->f->highlightStyle."', ";
			$sql .= " base.display_order = ".$this->f->displayOrder.", ";
			$sql .= " base.notes = '".$this->f->notes."' ";
			$sql .= " WHERE base.id = ".$this->f->id."  ";		
				
			$result = dbRunSQL($sql);
	}
	
	protected function saveInsert(){
			$sql = " INSERT INTO ".$this->sql->getBaseTable();
			$sql .= " (name, ";
			$sql .= " created, ";
			$sql .= " updated, ";
			$sql .= " description, ";
			$sql .= " display_order, ";
			$sql .= " highlight_style, ";
			$sql .= " notes) ";
			$sql .= " VALUES (";
			$sql .= "'".$this->f->name."', ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= "'".$this->f->description."', ";
			$sql .= $this->f->displayOrder.", ";
			$sql .= "'".$this->f->highlightStyle."', ";
			$sql .= "'".$this->f->notes."') ";
			
			$result = dbRunSQL($sql);
			
			$this->id = dbInsertedId();
			$this->f->id = $this->id;
	}
	
		
}





?>
