<?php 

class _entityTypeFields extends _entityFields{
/******
_entityFields    id, name, description, 
highlightStyle, created, updated
idType, idParent,

_entityTypeFields  notes, displayOrder
****/

    public $notes;
	public $displayOrder = 0;

	public function setRowValues($row){
		parent::setRowValues($row);
		$this->notes = ($row["notes"]);
		$this->displayOrder = $row["display_order"];
	}
	
	protected function formatForDisplay(){
		parent::formatForDisplay();
		$this->notes = displayLines($this->notes);
		
	}
	
	public listHeading(){
		$heading = parent::listHeading();
		$heading .= wrapTh('Display Order');		
		$heading .= wrapTh('Notes');
		return $heading;
	}
	
	public listDetail(){
		$detail = parent::listDetail();
		$detail .= wrapTd($this->displayOrder);
		$detail .= wrapTd($this->notes);
		return $detail;
	}
	
	public function displayDetail(){
		$detail = parent::displayDetail();
		$detail .= para('display-order', 'Display Order', $this->displayOrder);
		$detail .= para('notes', 'Notes', $this->notes);
		return $detail;
	}

}

class _entityType extends _entity{
	protected $__MyClassName = '_entityType';
	protected $_titleEntity = '[entity] Type';
	protected $pageSave = '[entity]TypeSave.php';
	//standard entity type properties
    public $f;
    public $sql;
	public $links;
 
 
 	public function __construct($mode = 'VIEW', $id = 0, $idParent = 0){
		parent::__construct($mode, $id, $idParent);
		$this->f = new _entityTypeFields;
		$this->sql = new _entityTypeSQL;
		$this->links = new _entityTypeLinks();
	}
	
	protected function setPageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';
		$this->links->saveSettings();
		$this->links->setType($menuType);
		$this->links->setStyle($menuStyle);
		
		$menuL = new MenuLinks($menuType,$menuStyle);
		
		$menu = $this->links->openMenu('section-heading-links');
		$menu .= $menuL->linkReference();
		$menu .= $this->links->resetMenu();
		if ($this->pageMode == 'VIEW'){
			$menu .= $this->links->detailEditHref($this->id);
		} elseif ($this->pageMode == 'EDIT'){
			$menu .= $this->links->detailViewHref($this->id);
		}
		$menu .= $this->links->listingHref();
		$menu .= $this->links->closeMenu();
		
		$this->links->restoreSettings();
		
		this->_pageMenu = $menu;
	}
	

	public function options(
		$selectedId = 0, 
		$idName = 'entityTypeId', 
		$disabled = 'false', 
		$showLink = true){

		$sql = $this->sql->options($selectedId, $disabled);
		$defaultValue = 0;
		$defaultCaption = '-select '.$this->$_titleEntity;
		$allOptions = getSelectOptionsSQL($sql,$selectedId,$disabled,$defaultValue,$defaultCaption);		

		$select = getSelectList($idName,$allOptions,'none',$disabled );
		$select.= $this->optionsLink($showLink, $selectedId);
		
		return $select;
	}	
	
	protected function optionsLink($showLink = true, $selectedId = 0){
		if ($showLink == true){
			$links =$this->links->detailViewEditHref($selectedId);
		} else {
			$links = '';
		}
		return $links;
	}
    

	public function collectPostValues(){

		$this->id = $_POST['id'];
		$this->f->name = dbEscapeString($_POST['name']); 
		$this->description = dbEscapeString($_POST['description']); 
		$this->notes = dbEscapeString($_POST['notes']); 		
		$this->highlightStyle = dbEscapeString($_POST['highlightStyle']); 		
		$this->displayOrder = $_POST['displayOrder'];
		$this->pageMode = $_POST['mode'];	
	}
	
	protected function setDefaults(){
	
	
	
	}
	


	
	public function editForm(){
		
		$legend = $this->pageMode;
		$legend .= $this->$_titleEntity;
		$entity = 'entity-type';
	
		$contextMenu = $this->links->formatToggleLink('formOptional','+Options');
		$form = openEditForm($entity,$legend,$this->pageSave,$contextMenu);

		//formRequired fields		
		$fields = inputFieldName($entity,$this->name,'name',$this->_titleEntity);
		$fields .= inputFieldNumber($entity,$this->displayOrder,'displayOrder','Display Order');
		$fields .= inputFieldHighlightStyle($entity,$this->highlightStyle,'highlightStyle');
		$formRequired = $fields;
		
		//formOptional fields
		$fields = inputFieldDescription($entity,$this->description,'description');
		$fields .= inputFieldNotes($entity,$this->notes,'notes');
		$formOptional = $fields;

		//formSubmit fields
		$hidden = getHiddenInput('mode', $this->pageMode);
		$hidden .= getHiddenInput('id', $this->id);
		$input = getSaveChangesResetButtons();
		$formSubmit = $hidden.$input;
	
		$form .= closeEditForm($entity,$formRequired,$formOptional,$formSubmit);	
		return $form;
	}
	
	
		
}





?>
