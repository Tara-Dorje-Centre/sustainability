<?php 

class TaskList extends __EntityList{
protected $__MyClassName = 'TaskList';



	public $periodicTasks = 'NO';
	public $project;
	private $sql;
	
	public function __construct($mode = 'VIEW', $id = 0, $idParent = 0){
		parent::__construct($mode, $id, $idParent);
		
		$this->project = new Project($this->pageMode, $this->idParent);
		$this->sql = new TaskSQL;	
	}
	
	public function setDetails(){
   		$this->echoState(true, 'setDetails');

	
		$this->project->setDetails();
		$this->setFoundCount();
	}

	public function setPeriodic($periodic = 'NO'){
		$this->periodicTasks = $periodic;
	}
	
	protected function setPageTitle(){

		if ($this->periodicTasks == 'NO'){
			$title = $this->project->name.br();
			$title .= 'Project Tasks';
		} else {
			$title .= 'Periodic Tasks';
		}

		$this->_pageTitle = $title.'[task list]';
	}
	
	protected function setPageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';
		
		$projectL = new ProjectLinks($menuType,$menuStyle);
		$taskL = new TaskLinks($menuType,$menuStyle);
		
		$menu = $taskL->openMenu('section-heading-links');
		if ($this->periodicTasks == 'NO'){
			$menu .= $taskL->detailAddHref($this->project->id);
			$menu .= $taskL->listingHref($this->project->id);
			$menu .= $projectL->detailViewHref($this->project->id);	
		} else {
			
			//$menu .= $taskL->linksPeriodicTasks();
			//$menu .= $taskL->formatOptionsLink();
			//$menu .= $projectL->listingAllProjects();
							
		}
		$menu .= $taskL->closeMenu();
		$this->_pageMenu = $menu;			
	}
	
	private function getPeriodicTasksComplete(){
		if ($this->periodicTasks == 'COMPLETE'){
			$complete = 'YES';
		} elseif ($this->periodicTasks == 'INCOMPLETE'){
			$complete = 'NO';
		}
		return $complete;		
	}
	
	public function setFoundCount(){
		if ($this->periodicTasks == 'NO'){
			$this->found = $this->project->tasksCount;
		} else {
			$sql = $this->sql->countPeriodic($this->getPeriodicTasksComplete());
			$this->found = dbGetCount($sql, 'total_tasks');			
		}
	}
	
	
	public function getListing($pagingBaseLink = 'USE_LISTING'){

		$taskL = new TaskLinks;	
		$projectL = new ProjectLinks;					
		if ($pagingBaseLink == 'USE_LISTING'){
			$base = $taskL->listProject($this->project->id,$this->periodicTasks);
		} else { 
			$base = $pagingBaseLink;
		 }
		$pagingLinks = $taskL->listingPaged($base,$this->found,$this->resultPage,$this->perPage);		
		

			$a = new Activity('ADD',0,$this->project->id);
			$a->setDetails();
		//	$a->task->project->setId($this->project->id);
	//	    $a->task->project->setDetails();
			$quickEdit = $a->editForm();

		$list = openDisplayList('task','Tasks',$pagingLinks,$quickEdit);

		$heading =  wrapTh('Order');
		$heading .=  wrapTh('Task Name');
		$heading .=  wrapTh('Task Type');		
		$heading .=  wrapTh('Description');
		$heading .=  wrapTh('% Done');
		$heading .=  wrapTh('Hours<br/>Estimated');
		$heading .=  wrapTh('Hours<br/>Actual');
		$heading .= wrapTh('Hotlinks');
		if ($this->periodicTasks != 'NO'){
			$heading .= wrapTh('Project');			
		}
		$list .=  wrapTr($heading);

		$activitiesL = new ActivityLinks('DIV','button');
		$materialsL = new MaterialLinks('DIV','button');
		$measuresL = new MeasureLinks('DIV','button');
		$receiptsL = new ReceiptLinks('DIV','button');

		if ($this->periodicTasks == 'NO'){
			$sql = $this->sql->listProject($this->project->id,$this->resultPage,$this->perPage);
		} else {
			$sql = $this->sql->listPeriodic($this->getPeriodicTasksComplete(),$this->resultPage,$this->perPage);	
		}
		
		$result = dbGetResult($sql);
		if ($result){
		while($row = $result->fetch_assoc())
		{	
			$t = new Task('FETCH');
			$t->id = $row["id"];
			$t->order = $row["task_order"];
			$t->pctDone = $row["pct_done"];
			$t->name = ($row["name"]);
			$taskType = ($row["task_type"]);
			$t->description = ($row["description"]);
//			$t->summary = ($row["summary"]);
			$t->hoursNotes = ($row["hours_notes"]);
			$t->hoursEstimated = $row["hours_estimated"];
			$t->hoursActual = $row["hours_actual"];

			if ($this->periodicTasks != 'NO'){
				$t->project->id = $row["project_id"];
				$t->project->name = $row["project_name"];
				$cssItem = $row["project_highlight_style"];
			} else {
				//highlight based on reported activity
				if ($t->hoursActual == 0){
					$cssItem = 'highlight-yellow';
				} else {
					$cssItem = 'none';
				}
			}


			$t->formatForDisplay();
			//for each row, format the table cells

			$detail =  wrapTd($t->order,0);
			$link = $taskL->detailViewEditHref($t->id,$t->name);
			$detail .=  wrapTd($link,0);
			
			$detail .= wrapTd($taskType);
			$detail .=  wrapTd($t->description,0);
			$detail .=  wrapTd($t->pctDone,0);
			$detail .=  wrapTd($t->hoursEstimated,0);
			$detail .=  wrapTd($t->hoursActual,0);

			$menu = $activitiesL->openMenu('hotlinks-list');
			$menu .= $activitiesL->detailAddHref($t->id);
			$menu .= $measuresL->detailAddHref($t->id);
			$menu .= $materialsL->detailAddHref($t->id);
			$menu .= $receiptsL->detailAddHref($t->id);
			$menu .= $activitiesL->closemenu();
			$detail .=  wrapTd($menu);

			if ($this->periodicTasks != 'NO'){
				$link = $projectL->detailViewHref($t->project->id,$t->project->name);
				$detail .= wrapTd($link);
			}
			$list .=  wrapTr($detail,$cssItem);
		}
		
		$result->close();
		}

		$list .= closeDisplayList();
		return $list;
	}
}
?>
