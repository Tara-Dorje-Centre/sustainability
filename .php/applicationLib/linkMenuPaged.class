<?php 
namespace application;

class linkMenuPaged extends linkMenu{
	protected $pageCount = 1;
	protected $perPage = 10;
	protected $currentPage = 1;
	protected $recordCount = 0;
	protected $info = 'display results';
	protected $paramNamePaging = 'results-page';
	public function __construct($perPage = 10,string $paramNamePaging = 'results-page'){
		parent::__construct('paged-linkset','DIV','paged');
		$this->perPage = $perPage;
		$this->paramNamePaging = 'results-page';
	}
	
	protected function setPageCount(){
		$a = ($this->recordCount/$this->$this->perPage);

		if (floor($a) == $a){
			$this->pageCount = $a;
			//.floor($recordCount/$recordsPerPage);
		} else {
			$this->pageCount = floor($a) + 1;
		//	$pages = floor($recordCount/$recordsPerPage) + 1;
		}
	}
	protected function makePageLink($pageIndex,$caption){
		$this->baseUrl->makeParameter($this->paramNamePaging,$pageIndex);
		$this->makeLink($this->baseUrl->print, $caption);
	}
	protected function showResultsInfo(){
		$b = new \html\_br();
		if ($this->pageCount > 1){
			$this->info = 'Found '.$this->recordCount.' results.';
			$this->info .= $b->print();
			$this->info .= '  Page '.$this->currentPage.' of '.$pageCount;
		} else {
			$this->info = 'Displaying '.$this->recordCount.' results. ';
		}
		$this->makeSpan($this->info);
	}
	protected function makePrevLink(){
		if ($this->currentPage > 1){
			$caption = 'Prev';
			$pageIndex = $currentPage - 1;
			$this->makePageLink($pageIndex, $caption);
		}
	}
	protected function makeNextLink(){
		if ($this->currentPage < $this->pageCount){
			$caption = 'Next';
			$pageIndex = $currentPage + 1;
			$this->makePageLink($pageIndex, $caption);
		}
	}
	protected function makeFirstLink($minDisplayPage){

		if ($minDisplayPage > 1){
			$this->makePageLink(1, 'First');
			$this->makeSpan('...');
		}

	}
	protected function makeLastLink($maxDisplayPage){

		if ($maxDisplayPage < $this->pageCount){
			$this->makeSpan('...');
			$this->makePageLink($this->pageCount, 'Last');
		}

	}
	protected function getPageRecordRange($pageIndex){
	
			$minRecord = (($pageIndex - 1) * $this->perPage) + 1;
			$maxRecord = $pageIndex * $this->perPage;
			if ($maxRecord > $this->recordCount){
				$maxRecord = $this->recordCount;
			}
			if ($minRecord==$maxRecord){
				$recordRange = $minRecord;
			} else {
				$recordRange = $minRecord.' to '.$maxRecord;
			}
			return $recordRange;
	
	}
	public function makePagedLinks(url $u, $recordCount = 1, $currentPage = 1){
		$this->recordCount = $recordCount;
		$this->currentPage = $currentPage;
		$this->setPageCount();
		$this->showResultsInfo();
		$this->baseUrl = $u;

		$minDisplayPage = $this->currentPage - 5;
		$maxDisplayPage = $this->currentPage + 5;
		
		$this->makeFirstLink($minDisplayPage);
		$this->makePrevLink();
		$i = 0;
		while ($i <= $this->pageCount){
			$i++;

			
			if (($i < $minDisplayPage) or ($i > $maxDisplayPage)){
				//dont print more than five links foreward or backward
				$showLinks = false;
			} else {
			
				//highlight current page with square brackets and skip hyperlink
				if ($i == $currentPage){
				//$linkCaption = ' ['.$recordRange.'] ';
					$caption = '['.$i.']';
					$css = $this->cssItem.'-current';
					$s = new \html\span($linkCaption,$this->cssItem.'-current');	
					$this->addSpan($s);
				} else {
					//$linkCaption = '('.$recordRange.')';	
					$caption = $i;
				
					$this->makePageLink($i, $caption);
				}
			
			}
			
		}
		$this->makeNextLink();
		$this->makeLastLink($maxDisplayPage);
	}
	
}


?>
