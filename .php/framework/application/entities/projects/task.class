<?php
namespace application\entities;

class taskFields extends _fieldsProjectChild{
	
	
	public $taskOrder;
    public $summary;
    public $pctDone ;	
    public $hoursEstimated ;
    public $hoursActual;
    public $hoursNotes;	
	public $materialsAuthProject;
	public $materialsAuthBy;
	public $receiptsAuthProject;
	public $receiptsAuthBy;
	
public function __construct(){
	parent::__construct();
	$this->taskOrder = new _numberField('task_order','task-order','task_order');						
	$this->summary = new _textField('summary','summary','summary');
	$this->pctDone = new _numberField('pct_done','pct-done','pct_done');	
	$this->hoursEstimated = new _numberField('hours_estimated','hours-estimated','hours_estimated');
	$this->hoursActual = new _numberField('hours_actual','hours-actual','hours_actual');
	$this->hoursNotes = new _notesField('hours_notes','hours-notes','hours_notes');			
	$this->materialsAuthProject = new _yesNoField('materials_auth_project','materials-auth-project','materials_auth_project');
	$this->materialsAuthBy = new _textField('materials_auth_by','materials-auth-by','materials_auth_by');
	$this->receiptsAuthProject = new _yesNoField('receipts_auth_project','receipts-auth-project','receipts_auth_project');
	$this->receiptsAuthBy = new _textField('receipts_auth_by','receipts-auth-by','receipts_auth_by');
		$this->_register('taskOrder', $this->taskOrder);
 		$this->_register('summary', $this->summary);
		$this->_register('pctDone', $this->pctDone);
		$this->_register('hoursEstimated', $this->hoursEstimated);
		$this->_register('hoursActual', $this->hoursActual);
		$this->_register('hoursNotes', $this->hoursNotes);
		$this->_register('materialsAuthProject', $this->materialsAuthProject);
		$this->_register('materialsAuthBy', $this->materialsAuthBy);
		$this->_register('receiptsAuthProject', $this->receiptsAuthProject);
		$this->_register('receiptsAuthBy', $this->receiptsAuthBy);
		
    }
	public function setDefaults(){
    	parent::setDefaults();
    	$this->summary->setDefault('');
    	$this->pctDone->setDefault(0);
    	$this->taskOrder->setDefault(0);
    	$this->hoursEstimated->setDefault(0);
    	$this->hoursActual->setDefault(0);
    	$this->hoursNotes->setDefault('');
    	$this->materialsAuthProject->setDefault('no');
    	$this->materialsAuthBy->setDefault('n/a');
    	$this->receiptsAuthProject->setDefault('no');
    	$this->receiptsAuthBy->setDefault('n/a');
    	
    }

	 

}

class task extends entity{
	 

	public $totals;
	
	public $measureCount = 0;
	
	public $resultsPageActivity = 1;
	public $resultsPageMeasure = 1;
	public $resultsPageMaterial = 1;
	public $resultsPageReceipt = 1;
	
	public function __construct($mode = 'VIEW', $id = 0, $idParent = 0){
		$this->_MyClassName = 'task';
		parent::__construct($mode, $id, $idParent);
	
		$this->entity = 'task';
		$this->titleEntity = 'Task';
		$this->pageSave = 'pr_task_save.pho';
	
		$this->f = new taskFields();
		$this->f->setEntity($this->entity);
		$this->sql = new sql\taskSQL();
		$this->links = new parameters\taskLinks();
		$this->totals = new summaryTotals();
	}
	public function getRequestArguments(){



	}
	public function listHeading($periodicTasks = 'NO'){
		$tr = new html/_tr();
		$th = new html/_th();
		$th->addContent($this->_titleEntity);
		$tr->addContent($th->print());
		$tr->addContent($this->f->listCaption());
		
		$th = new html/_th();
		$th->addContent('Hotlinks');
		$tr->addContent($th->print());
		
		return $tr->print();
	}
	
	
	public function listRowHotLinks(){
	
		$activitiesL = new ActivityLinks('DIV','button');
		$materialsL = new MaterialLinks('DIV','button');
		$measuresL = new MeasureLinks('DIV','button');
		$receiptsL = new ReceiptLinks('DIV','button');
		$id = $this->id->value();
		$menu = $activitiesL->openMenu('hotlinks-list');
		$menu .= $activitiesL->add('Activity',$id);
		$menu .= $measuresL->add('Measures',$id);
		$menu .= $materialsL->add('Materials',$id);
		$menu .= $receiptsL->add('Receipts',$id);
		$menu .= $activitiesL->closemenu();
		return $menu;
	}
	
	protected function listRowProjectLink(){
		$l = new ProjectLinks();
		$link = $l->view($this->f->project->name->value(),$this->f->project->id->value());
		return $link;
	}
	
	
	public function listRowFormat(){
	
		if ($this->periodicTasks != 'NO'){
			$cssItem = $this->f->highlightStyle->value();
		} else {
			//highlight based on reported activity
			if ($this->f->hoursActual->value() == 0){
				$cssItem = 'highlight-yellow';
			} else {
				$cssItem = 'none';
			}
		}
	
		$tr = new html/_tr('data-row',$cssItem);
		
		$td = new html/_td();
		$td->addContent($this->listRowLink());
		$tr->addContent($td->print());
		
		$tr->addContent($thus->f->listDetail());
		
		$td = new html/_td();
		$td->addContent($this->listRowHotLinks());
		$tr->addContent($td->print());
		/*
		if ($this->periodicTasks != 'NO'){
			$detail .= wrapTd($this->listRowProjectLink());
		}
		*/
		return $tr->print();
	}
	
	
	
	public function setDetails(){
   		
		if ($this->pageMode == 'COPY'){
			$this->copyTask();
		}
		
		parent::setDetails();
		
		
		$this->totals->setTaskTotals($this->f->id->value());
		 //if activity records with hours exist
		 //update estimated effort to reflect current average of actual hours
		 if ($this->totals->tasks->count > 0 && $this->totals->tasks->actual > 0){
		 $this->f->hoursEstimated->set(round($this->totals->tasks->actual / $this->totals->tasks->count,2));
		 $this->f->hoursActual->set($this->totals->tasks->actual);
		 }

		$this->setMeasureCount();
		
	}
	

	
	public function setPagingDetails(
		$pageActivity = 1, 
		$pageMaterial = 1, 
		$pageMeasure = 1, 
		$pageReceipt = 1){

		$this->resultsPageMeasure = $pageMeasure;
		$this->resultsPageActivity = $pageActivity;
		$this->resultsPageMaterial = $pageMaterial;
		$this->resultsPageReceipt = $pageReceipt;
	}
	
	protected function setMeasureCount(){
		$this->echoState(true, 'setMeasureCount');
		$s = new MeasureSQL;
		$sql = $s->countTask($this->id);
		$this->measureCount = dbGetCount($sql, 'total_measures', 0);
	}
	
	protected function setPageTitle(){

		$title = $this->f->projectName.br();
		if ($this->pageMode != 'ADD'){
			$title .= 'Task: '.$this->f->name->value();
		} else {
			$title .= 'Add New Task.';
		}

		$this->_pageTitle = $title;	
	}
	
	
	
	protected function setPageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';
		
		$p = new ProjectLinks($menuType,$menuStyle);
		$t = new TaskLinks($menuType,$menuStyle);
		$measure = new MeasureLinks($menuType,$menuStyle);
		$material = new MaterialLinks($menuType,$menuStyle);
		$a = new ActivityLinks($menuType,$menuStyle);	
		$r = new ReceiptLinks($menuType,$menuStyle);
		
		$menu = $p->openMenu('section-heading-links');
		$menu .= $p->detailViewHref($this->f->project->id->value());
		$menu .= $p->resetMenu();

		if ($this->project->materialsCount > 0){
			$menu .= $material->listingHref($this->id,'ProjectMaterials',$this->f->project->id->value(),'PROJECT','yes');
			$menu .= $p->resetMenu();
		}
		if ($this->project->receiptsCount > 0){
			$menu .= $r->listingHref($this->id,'ProjectReceipts',$this->f->project->id->value(),'PROJECT','yes');
			$menu .= $r->resetMenu();
		}
		
		if ($this->pageMode == 'VIEW'){
			$menu .= $t->detailEditHref($this->id);
			$menu .= $t->detailCopyHref($this->id);
		} elseif ($this->pageMode == 'EDIT') {
			//$menu .= $tasks->formatOptionsLink();
			$menu .= $t->detailViewHref($this->id);
		}		
		$menu .= $p->resetMenu();

		if ($this->materialCount > 0){
			$menu .= $materials->listingHref($this->id,'TaskMaterials',0,'TASK');
			$menu .= $p->resetMenu();
		}
		if ($this->receiptCount > 0){
			$menu .= $r->listingHref($this->id,'TaskReceipts',0,'TASK');
			$menu .= $p->resetMenu();
		}

		if ($this->pageMode != 'ADD'){
			$menuStyle = 'button';
			$p->setStyle($menuStyle);
			$a ->setStyle($menuStyle);
			$measure->setStyle($menuStyle);
			$material->setStyle($menuStyle); 
			$r->setStyle($menuStyle);
			$menu .= $p->resetMenu();
			$menu .= $a->detailAddHref($this->id);
			$menu .= $measure->detailAddHref($this->id);
			$menu .= $material->detailAddHref($this->id);
			$menu .= $r->detailAddHref($this->id);
		}
				
		$menu .= $p->closeMenu();
		$this->_pageMenu = $menu;		
	}
	
	protected function displayChildDetails(){
	 //	$l = new TaskLinks();
	 $baseLink = $this->links->detail('VIEW',$this->id);
	 
	 $detail = openDiv('taskDetails');

	 if ($this->totals->tasks->count > 0){
	 $activities = new ActivityList($this->pageMode, 0, $this->id);
	 $activities->setPaging($this->resultsPageActivity);
	 $activities->setDetails();
	 $detail .= $activities->getListing($baseLink);
	 }

	 if ($this->measureCount > 0){
	 $measures = new MeasureList($this->pageMode, 0, $this->id);

	 $measures->setPaging($this->resultsPageMeasure);
	 $measures->setDetails();
	 $detail .= $measures->getListing($baseLink);
	 }

	 if ($this->totals->materials->count > 0){
	 $materials = new MaterialList($this->pageMode, 0, $this->id);
	 $materials->setPaging($this->resultsPageMaterial);

	 $materials->setDisplay('TASK');
	 $materials->setApproved('no');
	 $materials->setCalendar($this->year,$this->month);
	 $materials->setDetails();
	 $detail .= $materials->getListing($baseLink);
	 }

	 if ($this->totals->receipts->count > 0){
	 $receipts = new ReceiptList($this->pageMode, 0, $this->id);
	 $receipts->setPaging($this->resultsPageReceipt);

	 $receipts->setDisplay('TASK');
	 $receipts->setApproved('no');
	 $receipts->setCalendar($this->year,$this->month);
	 $receipts->setDetails();
	 $detail .= $receipts->getListing($baseLink);
	 }
	 $detail .= closeDiv();
	 return $detail();


	 }
	 
	 
	 public function display(){
		$detail = parent::display();
		$detail .= $this->totals->display();
		$detail .= $this->displayChildDetails();

		return $detail;
	}
	
	public function options(
		$selectedValue = 0,
		$idName = 'taskId', 
		$disabled = 'false',
		$showLink = true,
		$onChangeJS = NULL,
		$ajaxEvent = NULL,
		$ajaxEventType = NULL){
	
		
		$sql = $this->sql->optionsProject($this->f->projectId, $selectedValue, $disabled);
		
		$defaultValue = 0;
		$defaultCaption = '-No Task';
		$allOptions = getSelectOptionsSQL($sql,$selectedValue,$disabled,$defaultValue,$defaultCaption);		
		
		$select = getSelectList($idName,$allOptions,'none',$disabled,$onChangeJS, $ajaxEvent, $ajaxEventType);
		if ($showLink === true){
			
			$links =$this->links->detailViewEditHref($selectedValue);
			$select .= $links;
		}
		return $select;
	}	
	
	
	
	public function editForm(){
		$contextMenu = $this->links->formatToggleLink('formOptional','+Options');		
		$this->edit = new _inputForm($this->pageSave, $this->titleEntity);
		$this->edit->open($this->entity,$this->pageMode,$contextMenu);
	
		$this->edit->required->input($this->f->taskOrder);
		$this->edit->required->input($this->f->name);
		
		$l = new taskType();
		$select = $l->options($this->f->typeEntity->id->value(),$this->f->typeEntity->id->env->variable());
		$this->edit->required->choice($this->f->typeEntity, $select);
		
		$l = new project();
		$input = $l->options($this->f->project->id->value(),$this->f->project->id->env->variable());
		$this->edit->required->choice($this->f->project->id, $input);
		
		$l = new location('OPTIONS');
		$select = $l->options($this->f->location->id->value(),$this->f->location->id->env->variable());
		$this->edit->required->choice($this->f->location->id, $select);
		$this->edit->required->input($this->f->description);
		$this->edit->required->input($this->f->started); 		
		$this->edit->required->input($this->f->hoursEstimated);
		
		$this->edit->optional->input($this->f->summary);
		
		$tooltip = 'Add activity details to record hours';
		$this->edit->optional->input($this->f->hoursActual);
		$this->edit->optional->input($this->f->pctDone);
		$this->edit->optional->input($this->f->hoursNotes);
		
		if ($this->totals->materials->count > 0) {
			if ($_SESSION['is-admin'] == 'yes'){
				//current user is admin, allow editing approvals
				$this->edit->optional->input($this->f->materialsAuthProject);
				if ($this->f->materialsAuthProject == 'no'){
					$this->f->materialsAuthBy->set($_SESSION['login-name']);
				}
				$this->edit->optional->input($this->f->materialsAuthBy);
			} else {
				//materials present but user cannot edit approvals
				$this->edit->optional->addContent('Materials Approved:'.$this->f->materialsAuthProject->value());

				$this->edit->hidden->inputHidden($this->f->materialsAuthProject);
				$this->edit->hidden->inputHidden($this->f->materialsAuthBy);	
			}
		} else {
			//no materials under task, dont show authorization fields
			$this->edit->hidden->inputHidden($this->f->materialsAuthProject);
			$this->edit->hidden->inputHidden($this->f->materialsAuthBy);	
			//$this->edit->oprtional->addContent('No Task Materials');
		}
		//$fields .= captionedInput('Costs', $input);


		if ($this->receiptCount > 0) {
			if ($_SESSION['is-admin'] == 'yes'){
				//current user is admin, allow editing approvals
				$this->edit->optional->input($this->f->receiptsAuthProject);
				if ($this->f->receiptsAuthProject == 'no'){
					$this->f->receiptsAuthBy->set($_SESSION['login-name']);
				}
				$this->edit->optional->input($this->f->receiptsAuthBy);
				
			} else {
				//materials present but user cannot edit approvals
				$this->edit->optional->addContent('Receipts Approved:'.$this->f->materialsAuthProject->value());
				$this->edit->hidden->inputHidden($this->f->receiptsAuthProject);
				$this->edit->hidden->inputHidden($this->f->receiptsAuthBy);
			}
		} else {
			//no materials under task, dont show authorization fields
			$this->edit->hidden->inputHidden($this->f->receiptsAuthProject);
			$this->edit->hidden->inputHidden($this->f->receiptsAuthBy);	
			//$optional->addContent('No Task Receipts');
		}
		//$fields .= captionedInput('Receipts',$input);		
		
		
		
		$this->edit->hidden->addContent(getHiddenInput('mode', $this->pageMode));
		$this->edit->hidden->inputHidden($this->f->id);
		
		$this->edit->submit->addContent(getSaveChangesResetButtons());

		return $this->edit->close();
	}
	
		

	
	
	public function updateActivitySummary(){	
		
		$this->summarizeActivity();
				
		$sql = " UPDATE tasks as t ";
		$sql .= " SET ";
		$sql .= " t.updated = CURRENT_TIMESTAMP, ";		
		$sql .= " t.hours_actual = 	".$this->f->hoursActual->value().", ";
		$sql .= " t.hours_estimated = ".$this->f->hoursEstimated->value()." ";
		$sql .= " WHERE t.id = ".$this->f->id->value()." ";
		
		$result = dbRunSQL($sql);

		$this->project->UpdateTaskSummary();

	}

	public function resetMaterialsAuthorization(){	
		$this->f->materialsAuthProject->set('no');
		$this->f->materialsAuthBy->set('Not Approved');
		$project = $this->f->materialsAuthProject->value();
		$by = $this->f->materialsAuthBy->value();
		
		$sql = $this->sql->updateMaterialsAuth($this->f->id->value, $project, $by);
		
		$result = dbRunSQL($sql);
		
		$this->setMaterialsActualCost();
	}
	
	private function setMaterialsActualCost(){
		if ($this->f->materialsAuthProject == 'yes'){
			$sql = " UPDATE materials as m ";
			$sql .= " SET m.cost_actual = m.cost_estimated ";
			$sql .= " WHERE m.task_id = ".$this->f->id->value()." ";
		} else {
			$sql = " UPDATE materials as m ";
			$sql .= " SET m.cost_actual = 0 ";
			$sql .= " WHERE m.task_id = ".$this->f->id->value()." ";			
		}
		$result = dbRunSQL($sql);
	}

	public function resetReceiptsAuthorization(){	
		$this->receiptsAuthProject = 'no';
		$this->receiptsAuthBy = 'Not Approved';
		
		$project = $this->f->receiptsAuthProject;
		$by = $this->f->receiptsAuthBy;
		
		$sql = $this->sql->updateReceiptsAuth($this->f->id->value(), $project, $by);
		$result = dbRunSQL($sql);
	}
	
	protected function afterCollectPostValues(){
	
	}

	private function copyTask(){
	
		$idSource = $this->id;
		
		$sql = $this->sql->copy($idSource);

		$result = dbRunSQL($sql);
		$idCopy = dbInsertedId();
		
			$this->id = $idCopy;
			$this->pageMode = 'EDIT';

	}

	protected function saveUpdate(){
			$sql = " UPDATE tasks AS t ";
			$sql .= " SET ";
			$sql .= " t.project_id = ".$this->f->project->id->value().", ";
			$sql .= " t.task_order = ".$this->f->taskOrder->value().", ";
			$sql .= " t.location_id = ".$this->f->location->id->value().", ";
			$sql .= " t.started = '".$this->f->started->value()."', ";
			$sql .= " t.name = '".$this->f->name->value()."', ";
			$sql .= " t.description = '".$this->f->description->value()."', ";
			$sql .= " t.summary = '".$this->f->summary->value()."', ";
			$sql .= " t.updated = CURRENT_TIMESTAMP, ";
			$sql .= " t.type_id = ".$this->f->type->id->value().", ";
			$sql .= " t.hours_estimated = ".$this->f->hoursEstimated->value().", ";
			$sql .= " t.pct_done = ".$this->f->pctDone->value().", ";
			$sql .= " t.hours_notes = '".$this->f->hoursNotes->value()."', ";
			$sql .= " t.materials_auth_project = '".$this->f->materialsAuthProject->value()."', ";
			$sql .= " t.materials_auth_by = '".$this->f->materialsAuthBy->value()."', ";
			$sql .= " t.receipts_auth_project = '".$this->f->receiptsAuthProject->value()."', ";
			$sql .= " t.receipts_auth_by = '".$this->f->receiptsAuthBy->value()."' ";

			$sql .= " WHERE t.id = ".$this->f->id->value()." ";	
		
			$result = dbRunSQL($sql);
			
			$this->setMaterialsActualCost();			
			$this->project->UpdateTaskSummary();
	}
	
	protected function saveInsert(){
			$sql = " INSERT INTO tasks ";
			$sql .= " (name, ";
			$sql .= " project_id, ";
			$sql .= " location_id, ";
			$sql .= " type_id, ";			
			$sql .= " task_order, ";
			$sql .= " description, ";
			$sql .= " summary, ";
			$sql .= " started, ";
			$sql .= " updated, ";
			$sql .= " hours_estimated, ";
			$sql .= " hours_actual, ";
			$sql .= " hours_notes, ";
			$sql .= " materials_auth_project, ";
			$sql .= " materials_auth_by, ";
			$sql .= " receipts_auth_project, ";
			$sql .= " receipts_auth_by) ";

			$sql .= " VALUES (";
			$sql .= " '".$this->f->name->value()."', ";
			$sql .= " ".$this->f->project->id->value().", ";
			$sql .= " ".$this->f->location->id->value().", ";		
			$sql .= " ".$this->f->type->id->value().", ";			
			$sql .= " ".$this->f->taskOrder->value().", ";
			$sql .= " '".$this->f->description->value()."', ";
			$sql .= " '".$this->f->summary->value()."', ";
			$sql .= " '".$this->f->started->value()."', ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= " ".$this->f->hoursEstimated->value().", ";
			$sql .= " 0, ";
			$sql .= " '".$this->f->hoursNotes->value()."', ";
			$sql .= " '".$this->f->materialsAuthProject->value()."', ";
			$sql .= " '".$this->f->materialsAuthBy->value()."', ";
			$sql .= " '".$this->f->receiptsAuthProject->value()."', ";
			$sql .= " '".$this->f->receiptsAuthBy->value()."') ";
			
		$result = dbRunSQL($sql);
			$this->id = dbInsertedId();

			$this->project->UpdateTaskSummary();
			
	}
	
}
?>
