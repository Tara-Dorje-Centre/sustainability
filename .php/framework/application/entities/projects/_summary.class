<?php
namespace application\entities\projects;

class _summary{
	public $count = 0;
	public $estimated = 0;
	public $actual = 0;
	public $pctDone = 0;
	protected $info = '';
	public $isProject = false;
	public $isTask = false;
	
	public function setProjectTotals($id){
		$this->isProject = true;
	}
	
	public function setTaskTotals($id){
		$this->isTask = true;
		
	}
		
	public function display(){
		return 'Summary.Display';
	}
}

class summaryEffort extends _summary{


	public function setProjectTotals($id){
		$this->isProject = true;
		$s = new TaskSQL;
		$sql = $s->summaryProject($id);
		$result = dbGetResult($sql);
		if($result){
	  	while ($row = $result->fetch_assoc())
		{	
	
			$this->estimated = $row["sum_hours_estimated"];
			$this->actual = $row["sum_hours_actual"];	
			$this->pctDone = $row["overall_pct_done"];			
			$this->count = $row["total_tasks"];	
		}
		$result->close();
		}
		
	}
	
	public function setTaskTotals($id){
			$this->isTask = true;
		$s = new ActivitySQL;
		$sql = $s->summaryTask($id);
		
		$result = dbGetResult($sql);
		if ($result){
		while ($row = $result->fetch_assoc())
		{
			$this->count = $row["total_activities"];	
			$this->actual = $row["total_hours_actual"];
			$this->estimated = $row["total_hours_estimated"];
		}
		$result->close();
		}
		
	}
	
	public function display(){

		$effort = openTable('hours-info','displayListTable');
		
		
		if ($this->isProject == true){
			$noCount = 'No Tasks Created';
			$h = 'Tasks';
		} else {
			$noCount = 'No Activity History';
			$h = 'Activities';
		}
		if ($this->count == 0){
			$item = wrapTh($noCount);
			$effort .= wrapTr($item);
		} else {
			
				$heading = wrapTh($h);
				$heading .= wrapTh('Estimated Hours');
				$heading .= wrapTh('Actual Hours');
				if ($this->isProject == true){
					$heading .= wrapTh('% Done');
				}
				$effort .= wrapTr($heading);
				$row = wrapTd($this->count);
				$row .= wrapTd($this->estimated);
				$row .= wrapTd($this->actual);
				if ($this->isProject == true){
					$row .= wrapTd($this->pctDone);
				}
				$effort .= wrapTr($row);
		}
		$effort .= closeTable();
		return $effort;		
	}
	
} 

class summaryCost extends _summary{

	public function display(){

		$costs = openTable('cost-info','displayListTable');
		
		if ($this->count > 0){

			$item = wrapTh('Items');
			$item .= wrapTh('Actual');
			$item .= wrapTh('Estimated');
		 	$costs .= wrapTr($item);
			$item = wrapTd($this->count);
			$item .= wrapTd($this->actual);
			$item .= wrapTd($this->estimated);
			$costs .= wrapTr($item);
		} else {
			$costs .= wrapTr(wrapTh('No Details'));
		}
		$costs .= closeTable();
		return $costs;
		
	}
}

class summaryMaterials extends summaryCost{

	public function setProjectTotals($id){
	
		$this->isProject = true;
		$s = new MaterialSQL;
		$sql = $s->summaryProject($id, 'yes');

		$result = dbGetResult($sql);
		if($result){
	  	while ($row = $result->fetch_assoc())
		{	
			$this->count = $row["total_materials"];
			$this->actual = $row["sum_cost_actual"];
			$this->estimated = $row["sum_cost_estimated"];
		}
		$result->close();
		}

	}
	
	public function setTaskTotals($id){
		$this->isTask = true;
		$s = new MaterialSQL;
		$sql = $s->summaryTask($id);
		
		$result = dbGetResult($sql);
		if ($result){
		while ($row = $result->fetch_assoc())
		{
			$this->count = $row["total_materials"];	
			$this->actual = $row["sum_cost_actual"];
			$this->estimated = $row["sum_cost_estimated"];
		}
		$result->close();
		}
	
	
		
	}
}

class summaryReceipts extends summaryCost{

	public function setProjectTotals($id){
		$this->isProject = true;
		
		$s = new ReceiptSQL;
		$sql = $s->summaryProject($id, 'yes');

		$result = dbGetResult($sql);

		if($result){
	  	while ($row = $result->fetch_assoc())
		{	
			$this->count = $row["total_receipts"];
			$this->actual = $row["sum_cost_actual"];
			$this->estimated = $row["sum_cost_estimated"];
		}
		$result->close();
		}

	}
	
	public function setTaskTotals($id){
		$this->isTask = true;
	
		$s = new ReceiptSQL;
		$sql = $s->summaryTask($this->id);
		
		$result = dbGetResult($sql);
		if ($result){
		while ($row = $result->fetch_assoc())
		{
			$this->count = $row["total_receipts"];	
			$this->actual = $row["sum_cost_actual"];
			$this->estimated = $row["sum_cost_estimated"];
		}
		$result->close();
		}
		
	 
	 
	 
	}
}

class summaryTotals{
	public $tasks;
	public $materials;
	public $receipts;
	public function __construct(){
		$this->tasks = new summaryEffort();
		$this->materials = new summaryMaterials();
		$this->receipts = new summaryReceipts();
	}
	
	
	public function setProjectTotals($id){
		$this->tasks->setProjectTotals($id);
		if ($this->tasks->count > 0){
		$this->materials->setProjectTotals($id);
		$this->receipts->setProjectTotals($id);	
		}
	}
	
	public function setTaskTotals($id){
		$this->tasks->setTaskTotals($id);
		$this->materials->setTaskTotals($id);
		$this->receipts->setTaskTotals($id);	
	}
	
	public function display(){
	
		$effortAndCost = openTable('effort-and-cost','displayListTable');
		$effortAndCost .= wrapTr(wrapTd($this->tasks->display()));
		$effortAndCost .= wrapTr(wrapTd($this->materials->display()));
		$effortAndCost .= wrapTr(wrapTd($this->receipts->display()));
		$effortAndCost .= closeTable();
		$detail = para('effort-and-cost','Time, Materials and Receipts',$effortAndCost);		
		return $detail;	
	}
	

}

?>
