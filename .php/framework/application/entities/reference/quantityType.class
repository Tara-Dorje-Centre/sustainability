<?php
namespace application\entities;


class quantityTypeFields extends _fieldsEntityType{
    public $symbol;	
    public $type;
    
	public function __construct(){
		parent::__construct();
		$this->symbol = new _nameField('symbol','symbol','Symbol');
		$this->type = new _nameField('type','unit-type','Unit Type');
		$this->_register('symbol',$this->symbol);
		$this->_register('type',$this->type);
	}
	
	public function setDefaults(){
		parent::setDefaults();
		$this->type->setDefault('unit');
		$this->symbol->setDefault('unit');
	}
}

class quantityTypeSQL extends sql\entityTypeSQL{
	public function __construct(){
		$this->baseTable = 'units_of_measure';
	}
	protected function cols(){
		$c = parent::cols();
		$c .= ", et.symbol ";
		return $c;	
	}

	public function options($selectedId = 0, $disabled = 'false'){
	$q = " SELECT ";
	$q .= " um.type, ";
	$q .= " um.id as value, ";
	$q .= " concat(um.name,'(',um.symbol,')') as caption ";
	$q .= " FROM units_of_measure um ";
	if ($disabled == 'true'){
		$q .= " WHERE um.id = ".$selectedId." ";	
	}
	$q .= " ORDER BY type, caption ";
	return $q;	
	}
}

class quantityTypeLinks extends entityTypeLinks {
	protected $context = 'quantityType';
	protected $pageList = 'pr_QuantityType_List.php';
	protected $pageDetail = 'pr_QuantityType_Detail.php';
}

class quantityType extends entityType{
	public function __construct($mode = 'VIEW', $id = 0, $idParent = 0){
		$this->_MyClassName = 'quantityType';
		parent::__construct($mode, $id, $idParent);
		
		$this->entity = 'quantity-type';
		$this->titleEntity = 'Quantity Type';
		$this->pageSave = 'pr_QuantityType_Save.php';
	
		$this->f = new quantityTypeFields();
		$this->f->setEntity($this->entity);
		$this->sql = new quantityTypeSQL();
		$this->links = new quantityTypeLinks();
	}
	
	/*
	protected function pageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';
		
		$units = new UnitOfMeasureLinks($menuType,$menuStyle);
		$measureTypes = new MeasureTypeLinks($menuType,$menuStyle);
		$menuL = new MenuLinks($menuType,$menuStyle);
		
		$menu = $units->openMenu('section-heading-links');
		$menu .= $menuL->linkReference();
		$menu .= $units->resetMenu();
		if ($this->pageMode == 'VIEW'){
			$menu .= $units->detailEditHref($this->id);
		} elseif ($this->pageMode == 'EDIT'){
			$menu .= $units->detailViewHref($this->id);
		}
		$menu .= $units->listingHref();
		//$menu .= $measureTypes->listingHref();
		
		$menu .= $units->closeMenu();
		return $menu;
	}
	*/
	
	
	public function options(
		$selectedValue = 0, 
		$idName = 'unitTypeId', 
		$disabled = 'false', 
		$showLink = true,
		$changeJS = NULL){
	
		$sql = $this->sql->options($selectedValue,$disabled);
		
		$defaultValue = '0';
		$defaultCaption = '-select Unit Type';
		$allOptions = getSelectOptionsSQL($sql,$selectedValue,$disabled,$defaultValue,$defaultCaption);		
				
		$select = getSelectList($idName,$allOptions,'none',$disabled,$changeJS);
		
		if ($showLink == true){
			$links =$this->links->detailViewEditHref($selectedValue);
			$select .= $links;
		}
		return $select;
	}	
	
	
	
	protected function editForm(){
	
		$entity = 'unit-type';
		$contextMenu = $this->links->formatToggleLink('formOptional','+Options');		
		$this->f->setEntity($this->entity);
		$this->edit = new _inputForm($this->pageSave, $this->titleEntity);
		$this->edit->open($this->entity,$this->pageMode,$contextMenu);
	
		$this->edit->required->addContent($this->f->name->input());
		
		$this->edit->required->addContent($this->f->symbol->input());
		$this->edit->required->addContent($this->f->type->input());
		
		$this->edit->required->addContent($this->f->displayOrder->input());
		$this->edit->required->addContent(inputFieldHighlightStyle($entity,$this->f->highlight->value(),'highlight'));
		$this->edit->optional->addContent($this->f->description->input());
		$this->edit->optional->addContent($this->f->notes->input());
		$this->edit->hidden->addContent(getHiddenInput('mode', $this->pageMode));
		$this->edit->hidden->addContent($this->f->id->inputHidden());
		$this->edit->submit->addContent(getSaveChangesResetButtons());
		return $this->edit->close();
		
		
	}
	
	public function saveUpdate(){
	
			$sql = " UPDATE units_of_measure AS p ";
			$sql .= " SET ";
			$sql .= " p.description = '".$this->f->description->value()."', ";
			$sql .= " p.type = '".$this->f->type->value()."', ";
			$sql .= " p.display_order = ".$this->f->displayOrder->value().", ";
			$sql .= " p.highlight_style = '".$this->f->highlight->value()."', ";
			$sql .= " p.name = '".$this->f->name->value()."', ";

			$sql .= " p.symbol = '".$this->f->symbol->value()."', ";
			$sql .= " p.updated = CURRENT_TIMESTAMP, ";
			$sql .= " p.notes = '".$this->f->notes->value()."' ";
			$sql .= " WHERE p.id = ".$this->f->id->value()."  ";			
			$result = dbRunSQL($sql);

	}
	
	protected function saveInsert(){
	
			$sql = " INSERT INTO units_of_measure ";
			$sql .= " (name, ";
			$sql .= " description, ";
			$sql .= " display_order, ";
			$sql .= " highlight_style, ";

			$sql .= " created, ";
			$sql .= " updated, ";
			$sql .= " type, ";
			$sql .= " symbol, ";
			$sql .= " notes) ";
			$sql .= " VALUES (";
			$sql .= "'".$this->f->name->value()."', ";
			$sql .= "'".$this->f->description->value()."', ";
			$sql .= "'".$this->f->displayOrder->value()."', ";
			$sql .= "'".$this->f->highlight->value()."', ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= "'".$this->f->type->value()."', ";
			$sql .= "'".$this->f->symbol->value()."', ";
			$sql .= "'".$this->f->notes->value()."') ";
			
			$result = dbRunSQL($sql);
			
			$this->id = dbInsertedId();
			$this->f->id-set($this->id);
	}
} 

class quantityTypeList extends entityTypeList{
	public function __construct($mode = 'VIEW', $id = 0, $idParent = 0){
		$this->_MyClassName = 'quantityTypeList';
		
		parent::__construct($mode, $id, $idParent);
		$this->titleEntity = 'Quantity Types';
		$this->base = new quantityType($this->pageMode,$this->id,$this->idParent);
	}
}

?>
