<?php
namespace html;

/*
function wrapDivFieldGrouping($entity,$fields,$css = 'fieldGrouping'){
	$div = openDiv($entity.'-'.$css,$css);
	$div .= $fields.closeDiv();
	return $div;
}
*/

class _form extends _element{
	public function __construct($action = 'none', $idName = 'none', $css = 'none'){
		parent::__construct('form', $idName, $css);
		$this->addAttribute('enctype', 'multipart/form-data');
		$this->addAttribute('action', $action);
		$this->addAttribute('method', 'post');
	}
}

class _displayDetails extends _contentWriter{
	protected $entity;
	protected $mode;
	protected $legend;
	protected $_fields;
	protected $_display;
	public function __construct(string $entity = 'entity',string $mode = 'mode',string $legend = 'legend',string $quickEdit = 'none',string $contextMenu = 'none'){
		$this->entity = $entity;
		$this->mode = $mode;
		$this->legend = $legend;
		$this->quickEdit = $quickEdit;
		$this->contextMenu = $contextMenu;
		
		$this->_display = new _div($this->entity.'-display','display'.$this->mode);
		$this->_fields = new html/_fieldset($this->entity.'-fields', $this->legend,'fieldset');
	}
	public function open(){

		$this->addContent($this->_display->open());

		if ($this->quickEdit != 'none'){
			$d = new _div($this->entity.'-quickEdit','quickEdit');
			$this->addContent($d->wrap($this->quickEdit));
		}
		if ($this->contextMenu != 'none'){
			$d = new _div($this->entity.'-contextMenu','contextMenu');
			$this->addContent($d->wrap($this->contextMenu));
		}
	

		$this->addContent($this->_fields->open());
		return $this->getContent();
	
	}
	public function close(){
		$this->addContent($this->_fields->close());
		$this->addContent($this->_display->close());
		return $this->getContent();
	}
}
class _displayList extends _displayDetails{
	protected $_list;
	protected $links;
	public function __construct(string $entity = 'entity',string $links = 'links',string $legend = 'legend',string $quickEdit = 'none',string $contextMenu = 'none'){
		parent::__construct($entity,'list',$legend,$quickEdit,$contextMenu);
		
		$this->links = $links;
		$this->_list = new _table($this->entity.'displayListTable', 'displayListTable');
	
	}

	public function open(){
		$this->addContent(parent::open());
		$this->addContent($this->links);
		$this->addContent($this->_list->open());
		return $this->getContent();
	}
	public function close(){
		$this->addContent($this->_list->close());
		return parent::close();
	}
}

class _fieldset extends _element{
protected $_legend = 'none';
public function __construct(string $name,string $legend = 'none', string $css='none'){
	parent::__construct('fieldset',$name,$css);
	$this->_legend = $legend;
}

public function open(){
	$content = parent::open();
	if ($this->_legend != 'none'){
		$l = new _element('legend','none','fieldset-legend');
		$content .= $l->wrap($this->_legend);
	}
	return $content;
}

}

class _textarea extends _element{
	public function __construct($inputName, $inputValue, $maxLength = 1000, $rows = 4, $cols = 60,$tooltip = 'none',$disabled = 'false',$css = 'editing-input-textarea'){
		parent::__construct('textarea',$inputName, $css);
		$this->addAttribute('title',$tooltipText);
		$this->addAttribute('maxlength',$maxLength);
		$this->addAttribute('rows',$rows);
		$this->addAttribute('cols',$cols);
		if ($disabled != 'false'){
			$this>addAttribute('disabled',$disabled);
		}
		$this->addContent($inputValue);
	}

}
/*
function getTextArea($inputName, $inputValue, $maxLength = 1000, $rows = 4, $cols = 60,$tooltip = 'none',$disabled = 'false',$css = 'editing-input-textarea'){

	$e = new _textArea($inputName,$inputValue,$maxLength,$rows,$cols,$tooltip,$disabled,$css){
	return $e->print();

}*/

		
class _input extends _element{
	public function __construct($inputType, $inputName, $tooltip = 'none', $css = 'editing-input'){
		parent::__construct('input',$inputName, $css);
		$this->addAttribute('type',$type);
		$this->addAttribute('title',$tooltip);
	}
	public function setDisabled($disabled){
		if ($disabled != 'false'){
			$this->addAttribute('disabled',$disabled);
		}
	}
	public function setValue($inputValue){
		$this->addAttribute('value',$inputValue);
	}
	public function setSize($size = 100,$maxLength = 100){
		$this->addAttribute('maxlength',$maxLength);
		$this->addAttribute('size',$size);
	}
	public function print(){
		return $this->empty();
	}
}
class _inputText extends _input{
	public function __construct($inputName, $inputValue, $size = 100, $maxLength = 100, $tooltip = 'none', $css = 'editing-input-text'){
		parent::__construct('text',$inputName,$tooltip,$css);
		$this->setSize($size,$maxLength);
		$this->setValue($inputValue);
	}
}
/*
function getTextInput($inputName, $inputValue, $size = 100, $maxLength = 100, $tooltip = 'none',$css = 'editing-input-text'){
	$e = new _inputText($inputName, $inputValue,$size,$maxLength,$tooltip,,$css);
	return $e->print();
}
*/
class _inputPassword extends _input{
	public function __construct($inputName, $tooltip = 'Enter Password'){
		parent::__construct('password',$inputName,$tooltip,'editing-input-password');
		$this->setSize(10,50);
	}
}
/*
function getPasswordInput($inputName){
	$e = new _inputPassword($inputName);
	return $e->print();
}
*/
class _inputHidden extends _input{
	private $n;
	private $v;
	public function __construct($inputName, $inputValue){
		parent::__construct('hidden',$inputName,'none','editing-input-hidden');

		$this->setValue($inputValue);
		$this->n = $inputName;
		$this->v = $inputValue;
	}
	public function print(){
		$input = parent::print();
		//show values during development
		$input .= $this->n.'['.$this->v.']';
		return $input;
	
	}
}
/*
function getHiddenInput($inputName, $inputValue){
	$e = new _inputHidden($inputName, $inputValue);
	return $e->print();
}

*/
class _inputButton extends _input{
	public function __construct($type, $inputName,$caption)){
		parent::__construct($type,$inputName,'none','editing-button');
		$this->setValue($caption);
	}
}
class _submitButton extends _inputButton{
	public function __construct($inputName = 'submit',$caption = 'Submit')){
		parent::__construct('submit',$inputName, $caption);
	}
}
class _resetButton extends _inputButton{
	public function __construct($caption = 'Reset')){
		parent::__construct('reset','reset', $caption);
	}
}

/*



function getSubmitButton($caption = 'Submit',$name = 'submit'){
	$b = getButton('submit', $caption, $name);
	return $b;	
}

function getResetButton($resetCaption = 'Reset'){
	$b = getButton('reset', $resetCaption, 'reset');
	return $b;	
}	
function getSubmitResetButtons($submitCaption = 'Submit',$submitName = 'submit', $resetCaption = 'Reset'){
	$b = new _submitButton($submitCaption, $submitName);
	$b .= getResetButton($resetCaption, 'reset');
	return $b;	
}
 

function getLoginLogoutButton($submitCaption = 'Login',$submitName='submit-login'){
	$b = getSubmitButton($submitCaption, $submitName);
	return $b;
}

function getSaveChangesResetButtons($submitCaption = 'Save',$submitName = 'submit', $resetCaption = 'Reset'){
	$buttons = getSubmitResetButtons($submitCaption,$submitName, $resetCaption);
	return $buttons;
}
*/
function inputFieldTimestamp($entity, $id, $value, $caption = '',$disabled = 'false'){
	$input = getTimestampSelect($id,$value,$disabled);
	$element = captionedInput($caption,$input);		
	return $element;
}

function inputFieldSelect($entity, $select,$caption){
	$element = captionedInput($caption,$select);
	return $element;
}

function inputFieldText(
	$entity, 
	$value, 
	$id = 'text', 
	$caption = '',
	$size = 50,
	$maxLength = 100,
	$tooltip = NULL,
	$disabled = 'false',
	$css = 'editing-input-text'){

	$input = getTextInput($id, $value, $size,$maxLength,$tooltip,$disabled,$css);
	$element = captionedInput($caption,$input);
	return $element;
}

function inputFieldNumber(
	$entity,
	$value,
	$id = 'numberId',
	$caption = '',
	$tooltip = NULL, 
	$disabled = 'false',
	$css = 'editing-input-number'){
		
	$element = inputFieldText($entity,$value,$id,$caption,4,10,$tooltip,$disabled,$css);
	return $element;

}

function inputFieldName(
	$entity, 
	$value, 
	$id = 'name', 
	$caption = 'Name',
	$tooltip = NULL, 
	$disabled = 'false',
	$css = 'editing-input-name'){

	$element = inputFieldText($entity,$value,$id,$caption,30,100,$tooltip,$disabled,$css);
	return $element;
}
function inputFieldDescription(
	$entity, 
	$value, 
	$id = 'description', 
	$caption = 'Description',
	$tooltip = NULL, 
	$disabled = 'false',
	$css = 'editing-input-description'){

	$element = inputFieldTextArea($entity,$value,$id,$caption,1000,$tooltip,$disabled,$css);
	return $element;
}

function inputFieldUser(
	$entity,
	$value,
	$id = 'user',
	$caption = 'Done By',
	$tooltip = NULL, 
	$disabled = 'false',
	$css = 'editing-input-user'){
		
	$element = inputFieldText($entity,$value,$id,$caption,8,50,$tooltip,$disabled,$css);
	return $element;
	
}

function inputFieldTextArea(
	$entity, 
	$value, 
	$id = 'textArea', 
	$caption = '',
	$maxLength = 1000,
	$tooltip = NULL, 
	$disabled = 'false',
	$css = 'editing-input-textarea'){

	$input = getTextArea($id, $value, $maxLength,4,80,$tooltip,$disabled,$css);
	$element = captionedInput($caption,$input);
	return $element;
}

function inputFieldComments(
	$entity, 
	$value, 
	$id = 'comments', 
	$caption = 'Comments',
	$maxLength = 1000,
	$tooltip = NULL, 
	$disabled = 'false',
	$css = 'editing-input-comments'){


	$element = inputFieldTextArea($entity,$value,$id,$caption,$maxLength,$tooltip,$disabled,$css);
	return $element;
}

function inputFieldNotes(
	$entity, 
	$value, 
	$id = 'notes', 
	$caption = 'Notes',
	$maxLength = 1000,
	$tooltip = NULL, 
	$disabled = 'false',
	$css = 'editing-input-notes'){


	$element = inputFieldTextArea($entity,$value,$id,$caption,$maxLength,$tooltip,$disabled,$css);
	return $element;
}


function inputGroupWebLink(
	$entity,
	$textValue,
	$urlValue,
	$textId = 'linkText',
	$urlId = 'linkUrl',
	$textCaption = 'Link Caption',
	$urlCaption = 'Link Url'){
	
	$css = 'input-webLinkText';
	$webLinkText = inputFieldText($entity,$textValue,$textId,$textCaption,20,50,NULL,'false',$css);
	
	$css = 'input-webLinkURL';
	$webLinkURL = inputFieldText($entity,$urlValue,$urlId,$urlCaption,30,255,NULL,'false',$css);
	
	$linkInfo = wrapDivFieldGrouping($entity,$webLinkText.$webLinkURL,'webLink-fieldGroup');
		
	return $linkInfo;
}

function inputFieldHighlightstyle($entity,$value,$id = 'highlightStyle',$caption = 'Highlight Style',$tooltip = NULL, $disabled = 'false'){
	
		$select = getHighlightStyleSelectList($value,$id);
		$element =inputFieldSelect($entity, $select,$caption);
		return $element;
}



function captionedInput($caption, $input,$messages = ''){
	$s = openDiv('captioned-input');
	if ($caption != ''){
		$s .= wrapDiv($caption,'caption');
	}
	if ($messages != ''){
		$s .= wrapDiv($messages,'validationMessages');
	}
	$s .= wrapDiv($input,'input');
	$s .= closeDiv();
	return $s;
}


function getSelectOption($optionValue = 0, $optionCaption = '', $selectedValue = 0){


	if ( (!is_null($optionValue)) && (!($optionValue == '') )) {
		$v = $optionValue;
	} else {
		$v = 0;
	}
		
	$e = new _element('option');
	$e->addAttribute('value',$optionValue);
	
	if ($selectedValue == $v){
		$e->addAttribute('selected','selected');
	}
	
	return $e->wrap($optionCaption);
	

}

function getSelectList($selectName, $selectOptions, $tooltip = 'none', $disabled = 'false',$onChangeJS = NULL,$css = 'editing-input-select'){
	
	$e = new _element('select',$selectName, $css);
	$e->addAttribute('title',$tooltip);
	
	if ($disabled != 'false'){
		$e->addAttribute('disabled',$disabled);
	}

	$e->addAttribute('onChange',$onChangeJS);	
	
	$select = $e->open();
	$select .= $selectOptions;
	$select .= $e->close();
	return $select;

	
}

function getSelectYesNo($selectName,$value = 'no', $tooltip = 'none', $disabled = 'false',$onChangeJS = NULL){
	$options = getSelectOption('no','no',$value);
	$options .= getSelectOption('yes','yes',$value);
	$select = getSelectList($selectName,$options,$tooltip,$disabled,$onChangeJS);
	return $select;
}

function getSelectRange($max,$selectedValue,$padding = 0,$start=0){
	$range = '';
	$i = $start;
	while ($i < $max){
		$i++;
		$value = str_pad($i,$padding,'0',STR_PAD_LEFT);
		$option = getSelectOption($value,$value,$selectedValue);
		$range .= $option;
	}
	return $range;
}

function getYearSelect($selectName,$selectedYear,$currentYear,$tooltip = 'Year'){
	$minYear = $currentYear - 7;
	$maxYear = $currentYear + 4;
	$years = getSelectRange($maxYear,$selectedYear,4,$minYear);
	$options = getSelectList($selectName, $years,$tooltip,'false',null,'editing-input-date');	
	return $options;	
}

function getMonthSelect($selectName,$selectedMonth,$tooltip = 'Month'){
	$months = getSelectRange(12,$selectedMonth,2);
	$options = getSelectList($selectName, $months,$tooltip,'false',null,'editing-input-date');		
	return $options;
}

function getDaySelect($selectName,$selectedDay,$tooltip = 'Day'){
	$days = getSelectRange(31,$selectedDay,2);
	$options = getSelectList($selectName, $days,$tooltip,'false',null,'editing-input-date');		
	return $options;
}

function getHourSelect($selectName,$selectedHour,$tooltip = 'Hour'){
	$hours = getSelectRange(23,$selectedHour,2,-1);
	$options = getSelectList($selectName,$hours,$tooltip,'false',null,'editing-input-time');		
	return $options;
}

function getMinuteSelect($selectName,$selectedMinute,$tooltip = 'Minutes'){
	$mins = getSelectRange(59,$selectedMinute,2,-1);
	$options = getSelectList($selectName,$mins,$tooltip,'false',null,'editing-input-time');		
	return $options;
}

function getTimestampPart_Year($timestamp){
	$part = substr($timestamp,0,4);
	return $part;
}

function getTimestampSelect($selectName,$time, $disabled = 'false'){
	//timestamp format 
	//0000-00-00 00:00:00
	//0123456789012345678
	//0000-55-88-11-44-77
	$year = getTimestampPart_Year($time);
	$month = substr($time,5,2);
	$day = substr($time,8,2);
	$hour = substr($time,11,2);
	$min = substr($time,14,2);

	global $sessionTime;
	$currentYear = getTimestampPart_Year($sessionTime);

	$select = getYearSelect($selectName.'_YYYY',$year,$currentYear);
	$select .= getMonthSelect($selectName.'_MM',$month);
	$select .= getDaySelect($selectName.'_DD',$day);
	$select .= getHourSelect($selectName.'_HH',$hour);
	$select .= getMinuteSelect($selectName.'_mm',$min);
	return $select;
}

function getTimestampDate($timestamp){
	$date = substr($timestamp,0,10);
	return $date;	
}

function getTimestampMonth($timestamp,$trim = 'NO'){
	$month = substr($timestamp,5,2);
	if ($trim != 'NO'){
		$month = ltrim($month,'0');
	}
	return $month;	
}

function getTimestampYear($timestamp){
	return getTimestampPart_Year($timestamp);
}

function getTimestampDay($timestamp,$trim = 'NO'){
	$day = substr($timestamp,8,2);
	if ($trim != 'NO'){
		$day = ltrim($day,'0');
	}
	return $day;
}
function getTimestampValues($selectName){
	$year = $_POST[$selectName.'_YYYY'];
	$month = $_POST[$selectName.'_MM'];
	$day = $_POST[$selectName.'_DD'];
	$hour = $_POST[$selectName.'_HH'];
	$min = $_POST[$selectName.'_mm'];
	$time = $year.'-'.$month.'-'.$day.' '.$hour.':'.$min.':00';
	return $time;
} 
function getTimestampPostValues($selectName){
	$year = $_POST[$selectName.'_YYYY'];
	$month = $_POST[$selectName.'_MM'];
	$day = $_POST[$selectName.'_DD'];
	$hour = $_POST[$selectName.'_HH'];
	$min = $_POST[$selectName.'_mm'];
	$time = $year.'-'.$month.'-'.$day.' '.$hour.':'.$min.':00';
	return $time;
} 
?>
