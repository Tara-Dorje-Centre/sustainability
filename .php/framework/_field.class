<?php 

interface Ifield{
 	public function setCaption(string $caption = 'no caption');
	public function setEntity(string $entity);
	public function setEnvironment(string $env= 'POST');
 	public function setEnvironmentVariable(string $var = 'not-used');
 	public function setFetchColumn(string $dbCol = 'not_used');
 	public function setEnabled(
 		bool $fetch = false, 
 		bool $display = false, 
 		bool $list = false, 
 		bool $env = false,
 		bool $input = false);
	public function fetchEnabled(bool $use = false);
	public function envEnabled(bool $use = false);
	public function displayEnabled(bool $use = false);
	public function listEnabled(bool $use = false);
	public function inputEnabled(bool $use = false);
 	public function set($value);
 	public function reset($default = NULL);
 	public function get();
   	public function value();
 	public function valueSQL();
 	public function valueRaw();
 	public function read();
 	public function write();
	public function fetch($row);
	public function format();
 	public function listCaption();
 	public function listDetail();
 	public function displayDetail();
 	public function input();
 	public function inputChoice(string $options);
 }

 abstract class _field extends _contentWriter
 implements Ifield, Iecho, IcontentWriter {
 	public $env;
 	protected $_dbCol = 'not_used';
 	protected $_caption = 'no caption';
 	protected  $_dataType = 'TEXT';
 	protected 	$_raw = NULL;
 	protected  $_number = 0;
 	protected  $_text = '';
 	protected  $_date = '';
 	protected  $_fetchEnabled = false;
 	protected  $_envEnabled = false;
 	protected  $_listEnabled = false;
 	protected  $_displayEnabled = false;
  	protected  $_inputEnabled = false;
  	
 	public function __construct(
 		string $dbCol = 'not_used', 
 		string $envVar = 'not-used', 
 		string $caption = 'no caption')
 	{
 		$this->env = new _environmentVariable($envVar,'POST');
 		$this->setFetchColumn($dbCol);
 		$this->setCaption($caption);
 		$this->enabled(true);
 	}
 	
 	public function setCaption(string $caption = 'no caption'){
 		$this->_caption = $caption;
 	}
	public function setEntity(string $entity){
		$this->_entity = $entity;
	}	
	public function setEnvironment(string $env= 'POST'){
	 	$this->env->setEnvironment($env);
	}
 	public function setEnvironmentVariable(string $var = 'not-used'){
 		$this->env->setEnvironmentVariable($var);
 	}
 	public function setFetchColumn(string $dbCol = 'not_used'){
 	 	 	$this->_dbCol = $dbCol;
 	}

 	public function setEnabled(
 		bool $fetch = false, 
 		bool $display = false, 
 		bool $list = false, 
 		bool $env = false,
 		bool $input = false)
 	{
 		$this->fetchEnabled($fetch);
 		$this->envEnabled($env);
 		$this->displayEnabled($display);
 		$this->listEnabled($list);
 		$this->inputEnabled($input);
 	}
 	public function enabled(bool $use = false){
 		$this->setEnabled($use,$use,$use,$use,$use);
 	}
	public function fetchEnabled(bool $use = false){
 		$this->_fetchEnabled = $use;
 	}
	public function envEnabled(bool $use = false){
	 	$this->_envEnabled = $use;
 	}
	public function displayEnabled(bool $use = false){
 		$this->_displayEnabled = $use;
 	}
	public function listEnabled(bool $use = false){
 		$this->_listEnabled = $use;
 	}
	public function inputEnabled(bool $use = false){
 		$this->_inputEnabled = $use;
 	}
	public function set($value){
		$this->_raw = $value;
		switch ($this->_datatype) {
    		case 'NUMBER':
 				$this->_number = $value;
        		break;
    		case 'DATE':
 		 		$this->_date = $value;
        		break;
    		case 'TEXT':
 		 		$this->_text = $value;
        		break;
    		default:
 		 		$this->_text = $value;
		}
	}
  	public function reset($default = NULL){
 			$this->set($default);
 	}
	public function get(){
		switch ($this->datatype) {
    		case 'NUMBER':
 				$val = $this->_number;
        		break;
    		case 'DATE':
 		 		$val = $this->_date;
        		break;
    		case 'TEXT':
 		 		$val = $this->_text;
        		break;
    		default:
 		 		$val = $this->_text;
		}
		return $val;
	}
	
  	public function value(){
 		return $this->get();
 	}

   	public function valueSQL()
   	{
 		$baseValue = $this->get();
 		if ($this->_datatype != 'NUMBER'){
 				$v = new _sqlClause();
    			$value = $v->encloseString($baseValue);
    	} else {
    		if (($baseValue == '') or is_null($baseValue)){
  					$value = 0;
  			} else {
  					$value = $baseValue;
  			}
 		}
		return $value;
 		
 	}
 	
	public function valueRaw(){
 		return $this->_raw;
 	}
	
	public function fetch($row){
		if ($this->_fetchEnabled == true){
 			$this->set($row[$this->dbColumn]);
 		}
	}

	public function listCaption(){
	 	$value = '';
		if ($this->_listEnabled == true){
 			$value = wrapTh($this->_caption);
		}
		return $value;
 	}
 	
 	public function listDetail(){
 	 	$value = '';
 		if ($this->_listEnabled == true){
  		    //$this->format();
 			$value = wrapTd($this->value());
  		}
 		return $value;
 	}

 	public function displayDetail(){
 	 	$value = '';
 		if ($this->_displayEnabled == true){
 			//$this->format();
 			$value = para($this->_caption,$this->value());
 		}
 		return $value;
 	}
 	
 	public function write(){
 	$this->env->set($this->value(),true);
 	}
 	
 	public function remove(){
 	$this->env->remove();
 	}

	public function read(){

  		if ($this->_envEnabled() == true){
  			
  			$this->_raw = $this->env->get(true);
			switch ($this->_datatype) {
    			case 'NUMBER':
  		 			//$this->_raw = $this->env->get(true);
 					$this->_number = $this->_raw;
        			break;
    			case 'DATE':
 		 			$this->_raw = getTimestampPostValues($this->_env->variable);
        			 $this->_date = $this->_raw;
        			break;
    			case 'TEXT':
  		 			//$this->_raw = $this->_env->get(true);
 		 			$this->_text = dbEscapeString($this->_raw);
        			break;
    			default:
  		 			//$this->_raw = $this->_env->get(true);
 		 			$this->_text = dbEscapeString($this->_raw);
			}
 		}
	} 

	

 	public function format(){
 		
 		switch ($this->_datatype) {
    			case 'NUMBER':
  					if (($this->_number == '') or is_null($this->_number)){
  					    $this->_number = 0;
  					}
        			break;
    			case 'DATE':
  		  			$this->_date = getTimestampDate($this->_raw);
        			break;
    			case 'TEXT':
  		  			$this->_text = displayLines($this->_raw);
        			break;
    			default:
  		  			$this->_text = displayLines($this->_raw);
			}
  
 		
 	}
 	

	public function input( ){
		return $this->inputFreeText();
	}
	
	protected function inputFreeText( ){
		return inputFieldText($this->_entity,$this->value(),$this->env->variable,$this->_caption);
	}
	public function inputCaptioned(string $input){
		return captionedInput($this->_caption,$input);
	}
	public function inputChoice(string $options){
		return $this->inputCaptioned($options);
	}
	public function inputHidden( ){
		return getHiddenInput($this->env->variable, $this->value());
	}
	
	
 	
 	
}

 
?>
