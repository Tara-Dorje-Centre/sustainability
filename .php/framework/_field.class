<?php 

interface Ifield{
	public function setEntity(string $entity);
	public function setEnvironment(string $environment = 'POST');
 	public function setEnvironmentVariable(string $var = 'get|post|session-variable');
 	public function setDatabaseColumn(string $dbCol = 'query_alias|column_name');
 	
 	public function setEnabledState(bool $isEnabled = false);
 	public function disable();
 	public function enable();
 	public function setEnabled(bool $fetchDatabase = false, bool $showDetail = false, bool $showList = false, bool $post = false);
 	public function setCaption(string $caption = 'list|detail|input caption');


 	public function set($value);
 	public function reset($default = NULL);
 	public function get();
   	public function value();
 	public function valueSQL();
 	public function valueRaw();
 	
	public function fetch($row);
	
	public function format();
 	public function caption();
 	public function listDetail();
 	public function displayDetail();
 	
 	public function input();
 	public function inputChoice(string $options);
 	public function inputFree();
 	public function inputHidden();
 	public function read();
 	public function readGet();
 	public function readPost();
 	public function readSession();
 	public function writeGet();
 	public function writeSession();
 	public function writePost();
 	public function write();
 	public function remove();
 }

 abstract class _field extends _contentWriter
 implements Ifield, Iecho, IcontentWriter {
 	protected $_env;
 	protected $_dbCol = 'not_used';
 	protected $_caption = 'no caption';
 	protected  $_dataType = 'TEXT';
 	protected 	$_raw = NULL;
 	protected  $_number = 0;
 	protected  $_text = '';
 	protected  $_date = '';
 	protected $_formatted = '';
 	protected  $_fetchEnabled = false;
 	protected  $_envEnabled = false;
 	protected  $_listEnabled = false;
 	protected  $_displayEnabled = false;
 
 	public function __construct(string $dbColumn = 'not_used', string $envVar = 'not-used', string $caption = 'no caption',bool $enable = false){
 		$this->env = new _environmentVariable($envVar,'POST');
 		if ($dbColumn != 'not_used'){
 			$this->setFetch($dbColumn);
 		}
 		if ($postVariable != 'not-used'){
 			$this->setPost($envVar);
 		}
 		if ($caption != 'no caption'){
 			$this->setShow($caption);
 		}
 		$this->enabled($enable);
 	}
	public function setEntity(string $entity);
	public function setEnvironment(string $environment = 'POST');
 	public function setEnvironmentVariable(string $var = 'get|post|session-variable');
 	public function setDatabaseColumn(string $dbCol = 'query_alias|column_name');
 	
 	public function setEnabledState(bool $isEnabled = false);
 	public function disable();
 	public function enable();

 	public function setCaption(string $caption = 'list|detail|input caption');

 	protected  $_fetchEnabled = false;
 	protected  $_envEnabled = false;
 	protected  $_listEnabled = false;
 	protected  $_displayEnabled = false;
 	public function set($value);
 	public function reset($default = NULL);
 	public function get();
   	public function value();
 	public function valueSQL();
 	public function valueRaw();
 	
	public function fetch($row);
	
	public function format();
 	public function caption();
 	public function listDetail();
 	public function displayDetail();
 	
 	public function input();
 	public function inputChoice(string $options);
 	public function inputFree();
 	public function inputHidden();
 	public function read();
 	public function readGet();
 	public function readPost();
 	public function readSession();
 	public function writeGet();
 	public function writeSession();
 	public function writePost();
 	public function write();
 	public function remove();
 	
 	public function setEnabled(bool $fetchDatabase = false, bool $showDetail = false, bool $showList = false);
 	public function setEnabled(bool $fetch = false, bool $show = false, bool $list = false){
 		$this->$_fetchEenabled = $fetch;
 		$this->usePost = $post;
 		$this->showDisplay = $show;
 		$this->showList = $list;
 	}
 	
 	public function enabled(bool $isEnabled = false){
 		$this->setEnabled($isEnabled,$isEnabled,$isEnabled,$isEnabled);
 	}
 	
 	 public function disable(){
 		$this->enabled(false);
 	}
 
 	public function setShow(string $caption){
 	//, bool $display = false, bool $list = false ){
		$this->caption = $caption;
		$this->showList = true;
		$this->showDisplay = true;
 	} 
 
	public function setFetch(string $dbColumn){
		$this->useRow = true;
		$this->dbColumn = $dbColumn;
	}
 
	public function setPost(string $postVariable){
		$this->usePost = true;
		$this->envVar = new _environmentVariable($postVariable,'POST');
		
	}
 
 	protected function canSet(){
 		if (($this->useRow == true) or ($this->usePost == true)){
   		$can = true;
   		} else {
   		$can = false;
   		}
   		return $can;
	}
 
	protected function canShow(){
 		if (($this->showList == true) or ($this->showDisplay == true)){
   			$can = true;
   		} else {
   			$can = false;
   		}
   		return $can;
	}
 
	public function set($value){
		$this->valueRaw = $value;
		switch ($this->type) {
    		case 'NUMBER':
 				$this->valueNumber = $value;
        		break;
    		case 'DATE':
 		 		$this->valueDate = $value;
        		break;
    		case 'TEXT':
 		 		$this->valueText = $value;
        		break;
    		default:
 		 		$this->valueText = $value;
		}
	}
 
 	public function value(){
 		return $this->get();
 	}
 
	public function get(){
	
		switch ($this->type) {
    		case 'NUMBER':
 				$val = $this->valueNumber;
        		break;
    		case 'DATE':
 		 		$val = $this->valueDate;
        		break;
    		case 'TEXT':
 		 		$val = $this->valueText;
        		break;
    		default:
 		 		$val = $this->valueText;
		}
		return $val;
	}
	
 
 	public function reset($default = NULL){
 		if ($this->canSet == true){
 			$this->set($default);
 		}
 	}
 
 
	public function fetchDb($row){
	//could pass optional override column alias here
	
		if ($this->useRow == true){
		//$this->echoPrint(true,'fetching '.$this->dbColumn,'fetch');
 			$this->set($row[$this->dbColumn]);
 		}
	}

	public function listCaption(){
	 	$value = '';
		if ($this->showList == true){
 			$value = wrapTh($this->caption);
		}
		return $value;
 	}
 	
 	public function listDetail(){
 	 	$value = '';
 		if ($this->showList == true){
  		    //$this->format();
 			$value = wrapTd($this->value());
  		}
 		return $value;
 	}

 	public function detail(){
 	 	$value = '';
 		if ($this->showDisplay == true){
 			//$this->format();
 			$value = para($this->caption,$this->value());
 		}
 		return $value;
 	}
 	public function writeEnvVar(){
 	$this->envVar->set($this->get(),true);
 	//$this->envVar->write();
 	}
 	public function readEnvVar(){
 	//$this->envVar->read(true);
 	$this->set($this->envVar->get(true));
 	}
 	public function removeEnvVar(){
 	$this->envVar->remove();
 	}
 	public function setEnvironment(string $env){
 	$this->envVar->setEnvironment($env);
 	}
	public function readPost(){

  		if ($this->usePost() == true){
  			$this->envVar->setEnvironment('POST');
			switch ($this->type) {
    			case 'NUMBER':
    			   // $this->envVar->read();
  		 			$this->valueRaw = $this->envVar->get(true);
 					$this->valueNumber = $this->valueRaw;
        			break;
    			case 'DATE':
 		 			$this->valueRaw = getTimestampPostValues($this->envVar->_var);
        			 $this->valueDate = $this->valueRaw;
        			break;
    			case 'TEXT':
    			  	//$this->envVar->read();
  		 			$this->valueRaw = $this->envVar->get(true);
 		 			$this->valueText = dbEscapeString($this->valueRaw);
        			break;
    			default:
    			  	$this->envVar->read();
  		 			$this->valueRaw = $this->envVar->get(true);
 		 			$this->valueText = dbEscapeString($this->valueRaw);
			}
 		}
	} 

	
  	public function sqlValue(){
 		//if ($this->canSet() == true){
 			$baseValue = $this->get();
 			if ($this->type != 'NUMBER'){
 				$v = new _sqlClause();
    			$value = $v->encloseString($baseValue);
    		} else {
    		  	if (($baseValue == '') or is_null($baseValue)){
  					$value = 0;
  				} else {
  					$value = $baseValue;
  				}
 			}
			return $value;
 		//}
 	}
 	public function format(){
 		if ($this->canShow() == true){
 			switch ($this->type) {
    			case 'NUMBER':
  					if (($this->valueNumber == '') or is_null($this->valueNumber)){
  					    $this->valueNumber = 0;
  					}
        			break;
    			case 'DATE':
  		  			$this->valueDate = getTimestampDate($this->valueDate);
        			break;
    			case 'TEXT':
  		  			$this->valueText = displayLines($this->valueText);
        			break;
    			default:
  		  			$this->valueText = displayLines($this->valueText);
			}
  
 		}
 	}
 	

	public function input(string $entity){
		//default usage is free text
		return $this->inputFree($entity,$this->value(),$this->envVar->variable,$this->caption);
	}
	
	public function inputFree(string $entity){
		return inputFieldText($entity,$this->value(),$this->envVar->variable,$this->caption);
		//$this->value()); password input should always be blank
	}
	public function inputCaptioned(string $entity, string $input){
		return captionedInput($this->caption,$input);
	}
	public function inputChoice(string $entity, string $options){
		return $this->inputCaptioned($entity, $options);
	}
	public function inputHidden(string $entity){
		return getHiddenInput($this->envVar->variable, $this->value());
	}
	
	public function inputPassword(){
		$input = getPasswordInput($this->postVariable, '');
		//$input = getPasswordInput('login-pwd', 10, 50);
		return $this->inputCaptioned('Password',$input);
		//$this->value()); password input should always be blank
	}
 	
 	
}

 
?>
