<?php 

abstract class _entity extends _entityBase
implements Iecho, IcontentWriter{

	protected $_MyClassName = '_entity';
	protected $titleEntity = 'Entity';
	protected $pageSave = 'save.php';
	
  	public $f;
    public $sql;
	public $links;
	protected $entity;
 	protected $edit;
 
 	public function __construct($mode = 'VIEW', $id = 0, $idParent = 0){
		parent::__construct($mode, $id, $idParent);
		
	}
	
	
	
	abstract protected function setPageMenu();
	abstract protected function editForm();
		
	
	public function setDetails(){
		if ($this->id > 0){
			$sql = $this->sql->info($this->id);
			$result = dbGetResult($sql);
			if($result){
				while ($row = $result->fetch_assoc())
				{	
					$this->f->fetch($row);
				}
				$result->close();
				$this->getFieldIds();
			}
			
		}
		
	}	
	
	public function options(
		$selectedId = 0, 
		$idName = 'entityTypeId', 
		$disabled = 'false', 
		$showLink = true){

		$sql = $this->sql->options($selectedId, $disabled);
		$defaultValue = 0;
		$defaultCaption = '-select '.$this->_titleEntity;
		$allOptions = getSelectOptionsSQL($sql,$selectedId,$disabled,$defaultValue,$defaultCaption);		

		$select = getSelectList($idName,$allOptions,'none',$disabled );
		$select.= $this->optionsLink($showLink, $selectedId);
		
		return $select;
	}	
	
	public function optionsField(_field &$f){
		//$m = new receiptType('OPTIONS');
		$select = $this->options($f->value(),$f->env->variable());
		return $f->inputChoice($select);
	}
	
	protected function optionsLink($showLink = true, $selectedId = 0){
		if ($showLink == true){
			$links =$this->links->view('View',$selectedId);
		} else {
			$links = '';
		}
		return $links;
	}
	
	public function listHeading(){
		$heading = wrapTh($this->titleEntity);
		$heading .= $this->f->listCaption();
		$list = wrapTr($heading);
		return $list;
	}
	
	protected function listRowLink(){
		$link = $this->links->itemViewEdit($this->f->name->value(),$this->f->id->value());
		return $link;
	}
	
	protected function listRowFormat(){
		$detail = wrapTd($this->listRowLink());
		$detail .= $this->f->listDetail();		
		$listRow = wrapTr($detail,$this->f->highlight->value());
		return $listRow;
	}
	
	public function listRow($row){
		$this->f->fetch($row);
		return $this->listRowFormat();
	}

	protected function display(){
		$detail = openDisplayDetails('entity', $this->titleEntity.':  Details');
		$detail .= $this->f->displayDetail();
		
		$detail .= closeDisplayDetails();
		return $detail;
	}
	
	protected function setPageTitle(){
		$this->_pageTitle = $this->pageMode.':  '.$this->titleEntity;
	}
	
	protected function setDefaults(){
		if ($this->pageMode == 'ADD'){
	 		$this->f->reset(true);
	 	}
	 	
	}

	public function addForm($idParent = 0){
		$this->pageMode = 'ADD';
		$this->setDefaults();
		if (!is_null($this->f->parentEntity)){
		$this->f->parentEntity->set($idParent);
		}
		return $this->editForm();
	}

	public function collectPostValues(){
		$this->pageMode = $_POST['mode'];	
		$this->f->read();
		$this->getFieldIds();

		$this->echoState(true,'collectPostValues');
	}
				
	protected function getFieldIds(){
		if(!is_null($this->f->id)){
			$this->id = $this->f->id->value();
		}
		if (!is_null($this->f->parentEntity)){
			$this->idParent = $this->f->parentEntity->id->value();
		}
	}
	
	public function printPage(){
		$this->echoState(true, 'printPage');
		$heading = $this->getPageHeading();
		$details = $this->getPageDetails();
		$site = new _htmlSite();
		$site->set($heading, $details);
		$site->print();
	}
	
	protected function getPageHeading(){
		$this->setPageTitle();
		$this->setPageMenu();
		
		$heading = openDiv('section-title');
		$heading .= $this->_pageTitle;
		$heading .= closeDiv();		
		$heading = openDiv('section-menu');
		$heading .= $this->_pageMenu;
		$heading .= closeDiv();		
		
		return $heading;
	}
	
	protected function getPageDetails(){	
		switch($this->pageMode){
		case 'VIEW':
			$details = $this->display();
			break;
		case 'ADD':
			$details = $this->addForm();
			break;
		case 'EDIT':
			$details = $this->editForm();
			break;
		default:
			$details = $this->display();
		}
			
		return $details;
	}
	
	protected function copy(){
		$this->echoState(true, 'copy');
		printLine('__Entity.copy not overridden');
	}
	
	protected function saveUpdate(){
		$this->echoState(true, 'saveUpdate');
		printLine('__Entity.saveUpdate not overridden in child');
	}
	
	protected function saveInsert(){
		$this->echoState(true, 'saveInsert');
		printLine ('__Entity.saveInsert not overridden in child');
	}
	
	public function saveChanges(){
		$this->echoState(true, 'saveChanges');
		
		if ($this->pageMode == 'EDIT'){
			$this->saveUpdate();
		} else {
			$this->saveInsert();
		}
	}
	
	
}


?>
