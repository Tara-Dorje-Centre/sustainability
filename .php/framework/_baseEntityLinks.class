<?php


abstract class _baseEntityLinks extends _linkMenu{
	protected $context = 'entity';
	protected $pageList = 'list.php';
	protected $pageDetail = 'detail.php';
	//protected $_menu;
	//protected $_pagingLinks;
	public function __construct(string $context = 'entity',string $type = 'DIV',string $css = 'menu'){
		parent::__construct($type,$css);
	}
	public function getParameter(string $name,$value){
		$p = new _urlParameter($name,$value);
		return $p;
	}
	protected function pPageAction(string $action){
		return $this->getParameter('page-action',$action);
	}
	protected function pScope(string $scope){
		return $this->getParameter('scope',$scope);
	}
	protected function pContext(string $context){
		return $this->getParameter('context',$context);
	}
	protected function pId( $id){
		return $this->getParameter('id',$id);
	}
	protected function pIdParent( $idParent){
		return $this->getParameter('id-parent',$idParent);
	}
	protected function pIdType( $idType){
		return $this->getParameter('id-type',$idType);
	}
	protected function pYear( $year){
		return $this->getParameter('year',$year);
	}
	protected function pMonth( $month){
		return $this->getParameter('month',$month);
	}
	public function makeCalendarUrl(_url $u, $year, $month){
		$u->addParameter($this->pYear($year));
		$u->addParameter($this->pMonth($month));
		return $u;
	}
	public function makeCalendarLink(_url $u, $caption, $year, $month){
		$u = $this->makeCalendarUrl($u,$year,$month);	
		$l = new \html\_link($url->print(),$caption);
		
		return $l;	
	}
	protected function getBaseUrl(string $page = 'index.php',string $scope = 'detail'){
		$url = new _url($page);
		$url->addParameter($this->pScope($scope));
		$url->addParameter($this->pContext($this->context));
		return $url;
	}
	
	public function urlList( $idParent = 0, $idType = 0){
		$url = $this->getBaseUrl($this->pageList,'list');
		if ($idParent != 0){
			$url->addParameter($this->pIdParent($idParent));
		}
		if ($idType != 0){
			$url->addParameter($this->pIdType($idType));
		}
		return $url;
	}
	
	
	
	public function urlDetail($pageAction = 'VIEW', $id = 0, $idParent = 0){
		$url = $this->getBaseUrl($this->pageDetail,'detail');
		
		$url->addParameter($this->paramPageAction($pageAction));
		if ($id != 0){
			$url->addParameter($this->pId($id));
		}
		if ($idParent != 0){
			$url->addParameter($this->pIdParent($idParent));
		}
		
		return $url;
	}	
	
	public function getListingLink(string $caption = 'Listing', $idParent = 0, $idType = 0){
		$url = $this->urlList($idParent,$idType);
		$l = new \html\_link($url->print,$caption);
		return $l;	
	}	
	
	protected function linkDetail(string $caption = 'View', $pageAction = 'VIEW', $id = 0,$idParent = 0,$idType = 0){
		$url = $this->urlDetail($pageAction,$id,$idParent);
		$l = new \html\_link($url->print,$caption);
		return $l;	
	}	
	public function list($caption,$idParent,$idType){
		return $this->getListingLink($caption,$idParent,$idType);
	}

	public function add($caption = 'New', $idParent = 0,$idType = 0){
		return $this->linkDetail($caption,'ADD',0,$idParent);
	}
	public function view($caption = 'View', $id = 0){
		return $this->linkDetail($caption,'VIEW',$id);
	}
	public function edit($caption = 'Edit', $id = 0){
		return $this->linkDetail($caption,'EDIT',$id);
	}
	public function copy($caption = 'Copy', $id = 0){
		return $this->linkDetail($caption,'COPY',$id);
	}
	public function getListDetailLink($caption = 'View', $id = 0){
		$d = new \html\_div('list-link','list-item-link');
		/*if ($id != 0){*/
			$lView = $this->view($caption,$id);
			$lEdit = $this->edit('[#]',$id);
			$d->addContent($lView->print());
			$d->addContent($lEdit->print());
		/*} else {
			$l = '';
		}*/

		return $d->print();
	}	
	public function setListingLinks($mode = 'LIST',$id,$idParent,$idType){
			$this->addLink($this->add('AddChild',$id));
			$this->addLink($this->add('AddSibling',$idParent));
				
			$this->addLink($this->list('List',$idParent));
			$this->addLink($this->list('ListChildren',$id));
			$this->addLink($this->list('listType',0,$idType));
	}
	public function setEditingLinks($mode = 'VIEW', $id,$idParent,$idType){
		switch ($mode){
		
			case 'VIEW':
				$this->addLink($this->edit('Edit',$id));
				$this->addLink($this->add('AddChild',$id));
				$this->addLink($this->add('AddSibling',$idParent));
				$this->addLink($this->copy('Copy',$id));
				break;
			case 'EDIT':
				$this->addLink($this->view('View',$id));
				
				break;
			case 'ADD':
				$this->addLink($this->list('List',$idParent));
				break;
			default:
				$this->addLink($this->view('View',$id));
		
		}
		
	}
	
	public function getPagingLinks($recordCount, $resultPage = 1, $perPage = 10, $idParent = 0, $idType = 0){
		$p = new _linkMenuPaged($perPage,'results-page');
		$u = $this->urlList($idParent,$idType);
		$p->makePagedLinks($u, $recordCount,$resultPage);
		return $p->print();
	}
	
	public function getCalendarLink(_url $u, $caption, $year, $month){
		$u->addParameter($this->pYear($year));
		$u->addParameter($this->pMonth($month));
		$l = new \html\link($u->print,$caption);
		return $l;	
	}
	
	
}
?>
