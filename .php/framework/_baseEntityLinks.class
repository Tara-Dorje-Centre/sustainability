<?php


abstract class _baseEntityLinks extends _links{
	protected $context = 'baseEntity';
	protected $pageList = 'list.php';
	protected $pageDetail = 'detail.php';
	
	public function __construct($type = 'DIV',$css = 'menu'){
		parent::__construct($type,$css);
	}
	
	protected function parameter($name, $value, $first = false){
		$p = new _urlParameter($name,$value);
		if ($first == true){
			$p = '?';
		} else {
			$p = '&';
		}
		$p .= $name.'='.$value;
		return $p;
	}
	
	protected function nonZeroParameter($name, $value = 0, $first = false){
		if ($value != 0){
			$p  = $this->parameter($name, $value, $first);
		} else {
			$p = '';
		}
		return $p;
	}
	
	protected function getBaseUrl($page = 'index.php', $scope = 'detail'){
		$url = new _url($page);
		$url->makeParameter('scope',$scope);
		$url->makeParameter('context',$this->context);
		return $url;
		
	}
	
	public function urlList($idParent = 0){
		$url = $this->getBaseUrl($this->pageList,'list');
		if ($idParent != 0){
			$url->makeParameter('idParent',$idParent);
		}
		return $url;
	}
	
	public function urlListByParent($idParent = 0){
		$link = $this->urlList($idParent);
		return $link;
	}
	
	public function urlDetail($pageAction = 'VIEW', $id = 0, $idParent = 0){
		$url = $this->urlBase($this->pageDetail,'detail');
		
		$url->makeParameter('pageAction',$pageAction);
		if ($id != 0){
		$url->makeParameter('id',$id);
		}
		if ($idParent != 0){
		$url->makeParameter('idParent',$idParent);
		}
		return $link;
	}	
	
	public function list($caption = 'List', $idParent = 0){
		$url = $this->urlList($idParent);
		$href = $this->formatLink($url->print,$caption);
		return $href;	
	}	
	
	protected function detail($caption = 'View', $pageAction = 'VIEW', $id = 0,$idParent = 0){
		$url = $this->urlDetail($pageAction,$id,$idParent);
		$href = $this->formatLink($url->print,$caption);
		return $href;	
	}	

	public function add($caption = 'New', $idParent = 0){
		return $this->detail($caption,'ADD',0,$idParent);
	}
	public function view($caption = 'View', $id = 0){
		return $this->detail($caption,'VIEW',$id);
	}
	public function edit($caption = 'Edit', $id = 0){
		return $this->detail($caption,'EDIT',$id);
	}
	public function copy($caption = 'Copy', $id = 0){
		return $this->detail($caption,'COPY',$id);
	}
	public function itemViewEdit($caption = 'View', $id = 0){
		
		if ($id != 0){
			$l = $this->view($caption,$id);
			$l .= $this->edit('[#]',$id);
		} else {
			$l = '';
		}
		return $l;
	}	
	
	public function toggleEdit($pageAction = 'VIEW', $id){
		switch ($pageAction){
		
			case 'VIEW':
				$l = $this->edit('Edit',$id);
				$l .= $this->copy('Copy',$id);
				break;
			case 'EDIT':
				$l = $this->view('Cancel',$id);
				
				break;
			case 'ADD':
				$l = $this->list('Cancel',$id);
				break;
			default:
				$l = $this->view('View',$id);
		
		}
		return $l;
	}
	
	
	
	public function pagingLinksChildren($idParent, $found, $resultPage=1, $perPage=10){
		$l = $this->urlList($idParent).'&resultsPage=';
		$ls = $this->getPagedLinks($l, $found,$perPage,$resultPage);
		return $ls;
	}
	
	
	public function pagingLinks($found, $resultPage, $perPage){
		$l = $this->urlList(0).'&resultsPage=';
		$ls = $this->getPagedLinks($l, $found,$perPage,$resultPage);
		return $ls;
	}
	
	public function makeCalendarLink(_url $u, $caption, $year, $month){
		$u->makeParameter('year',$year);
		$u->makeParameter('month',$month);
		$l = new \html\link($u->print,$caption);
		return $l;	
	}
	
	
}
?>
