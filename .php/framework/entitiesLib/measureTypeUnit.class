<?php 


 class measureTypeUnitFields extends _fieldsEntity{
	 public $measureType;
	 public $unitType;

 public function __construct(){
	$this->measureType = new _fieldIdName('measure_type_id','measure-type-id','Measure Type','measure_type_name');
	$this->unitType = new _fieldIdName('unit_type','unit-type-id','Unit Type','unit_type_name');
	$this->_register('measureType',$this->measureType);
	$this->_register('unit_type',$this->unitType);
 }
 //set additional fields
 public function setDefaults(){
 	parent::setDefaults();
 	
 	
 }

}


class measureTypeUnit extends _entity{
	protected $_MyClassName = 'measureTypeUnit';
	
 	public function __construct($mode = 'VIEW', $id = 0, $idParent = 0){
		parent::__construct($mode, $id, $idParent);
		$this->entity = 'measure-type-unit';

		$this->f = new measureTypeUnitFields;
		$this->f->setEntity($this->entity);
		$this->l = new measureTypeUnitLinks;
		$this->sql = new measureTypeUnitSQL;
		
	}
	
	protected function setPageTitle(){	
		$title = openDiv('section-heading-title','none');
		
		
		//$title .= 'Measure Type:&nbsp;'.$this->measureType->name.br();
		$title .= 'Units:'.$this->unitOfMeasure;		
		$title .= closeDiv();
		$this->_pageTitle = $title;
	}
	
	
	protected function setPageMenu(){
		
		$mtul = new MeasureTypeUnitLinks;
		
		$menu = openDiv('section-heading-links','menu-links-list');
		if ($this->pageMode == 'VIEW'){
			$menu .= $mtul->detailEditHref($this->id,'Edit');
		}
		if ($this->pageMode == 'EDIT'){
			$menu .= $mtul->detailViewHref($this->id,'View');
		}
		if ($this->pageMode != 'ADD'){
			$menu .= $mtul->detailAddHref($this->measureType->id);
		}
		$menu .= $mtul->listingHref($this->measureType->id,'MeasureType Units');
		$menu .= $mtul->listingHref(0,'All MeasureType Units');

		$menu .= closeDiv();
		return $menu;
	}
	/*
		
	public function getMeasureTypeAndUnitSymbol(){
		$text = $this->measureTypeName.'('.$this->unitSymbol.')';
		return $text;
	}
	
*/
	
	

	public function options(
		$selectedValue = 0, 
		$idName = 'measureTypeUnitId', 
		$disabled = 'false',
		$showLink = false,
		$changeJS = NULL){
		
		$sql = $this->sql->options($selectedValue,$disabled);
		
		$defaultValue = '0';
		$defaultCaption = '-select Measure Type Units';
		$allOptions = getSelectOptionsSQL($sql,$selectedValue,$disabled,$defaultValue,$defaultCaption);		
		
		$select = getSelectList($idName,$allOptions,'none',$disabled,$changeJS);
		if ($showLink === true){
			$l = new MeasureTypeUnitLinks;
			$links =$l->detailViewEditHref($selectedValue);
			$select .= $links;
		}
		return $select;
	}
		
	public function editForm(){
		
		$contextMenu = $this->links->formatToggleLink('formOptional','+Options');		
		
		$this->edit = new _inputForm($this->pageSave, $this->titleEntity);
		$this->edit->open($this->entity,$this->pageMode,$contextMenu);
	
		$base = new measureType();;
		$select = $base->options($this->measureType->id->value(),$this->measureType->id->env->variable());
		$this->edit->required->choice($this->measureType->id, $select);
		
		$base = new quantityType();;
		$select = $base->options($this->quantityType->id->value(),$this->quantityType->id->env->variable());
		$this->edit->required->choice($this->quantityType->id, $select);
		
		$this->edit->hidden->addContent(getHiddenInput('mode', $this->pageMode));
		//$this->edit->hidden->inputHidden($this->measureType->id);
		$this->edit->hidden->inputHidden($this->f->id);
		
		$this->edit->submit->addContent(getSaveChangesResetButtons());
		
		
		return $this->edit->close();
	
	}

	protected function saveUpdate(){
	
			$sql = " UPDATE measure_type_units m ";
			$sql .= " SET ";
			$sql .= " m.measure_type_id = ".$this->f->measureType->id->value().", ";
			$sql .= " m.unit_measure_id = ".$this->f->unitType->id->value().", ";
			$sql .= " m.updated = CURRENT_TIMESTAMP ";
			$sql .= " WHERE m.id = ".$this->id." ";

			$result = dbRunSQL($sql);
	}
			
	protected function saveInsert(){
	
			$sql = " INSERT INTO measure_type_units ";
			$sql .= " (measure_type_id, ";
			$sql .= " unit_measure_id, ";
			$sql .= " updated, ";
			$sql .= " created) ";
			$sql .= " VALUES (";
			$sql .= " ".$this->measureType->id->value().", ";
			$sql .= " ".$this->unitType->id->value().", ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= " CURRENT_TIMESTAMP) ";
			
			$result = dbRunSQL($sql);
			
			$this->id = dbInsertedId();
	}
	
	
	
} 
?>
