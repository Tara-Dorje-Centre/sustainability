<?php
namespace html;

interface IcollectionItem{
	public function print();
}

interface Icollection{
	public function getItems();
	public function setItems($items = array(),bool $replaceAll = false);
	public function addItem(IcollectionItem $i);
	public function printItems(bool $preserveItems = false);
	public function print();
	public function addContent();
}

abstract class _collection extends _element implements Icollection{
	protected $_items = array();
	
	public function getItems(){
		//direct return would be by reference
		//return $this->innerItems;
		$exportItems = array();
		foreach ($this->_items as $i){
			$exportItems[] = $i;
		}
		return $exportItems;
	}
	public function setItems($items = array(), bool $replaceAll = false){
		if ($replaceAll == true){
			unset($this->_items);
		}
		foreach ($items as $i){
			$this->_items[] = $i;
		}
	}
	
	public function addItem(IcollectionItem $i){
		$this->_items[] = $i;
	}
	public function printItems(bool $preserveItems = false){
		foreach ($this->_items as $i){
			$this->addContent($i->print());
		}
		if ($preserveItems == false){
			unset($this->_items);
		}
	}
	public function print(){
		$this->printItems();
		return parent::print();
	}

}

?>
