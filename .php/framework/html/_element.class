<?php
namespace html;

class _element
{
protected const _NONE = 'none';
protected const _EMPTY = '';
/*using _empty returns empty attributes 
foirmatted as name="" in html*/
protected const _EMPTYATTRIBUTE = '""';
protected const LT = '<';
protected const GT = '>';
protected const SL = '/';
protected const EQ = '=';
protected const SQ = "'";
protected const DQ = '"';
protected const SP = ' ';
protected const _htmlCommentOpen = '<!--';
protected const _htmlCommentClose = '-->';
protected $_content = '';
protected $_markup = '';
protected $_attribs = '';
protected $_tag = '';

protected $_id = '';
protected $_name = '';
protected $_css = '';
protected $_style = '';
protected $_cData = false;

public function __construct($tag, $idName = 'none', $css = 'none') {
	$this->reset();
	$this->setTag($tag);
	$this->setIdName($idName);
	$this->setCSS($css);
}

public function __destruct() {
     $this->reset();
}
public function setContent($content = null){
	if (!is_null($content)){
		$this->_content .= $content;
	} else {
		$this->_content = self::_EMPTY;
	}
}
public function addContent($content = null){
	if (!is_null($content)){
		$this->_content .= $content;
	} else {
		$this->setContent($content);
	}
}
public function reset(){
	$this->_tag = self::_NONE;
	$this->_attribs = self::_EMPTY;
	$this->_markup = self::_EMPTY;
	$this->_content = self::_EMPTY;
	$this->_id = self::_NONE;
	$this->_name = self::_NONE;
	$this->_css = self::_NONE;
	$this->$_cData = false;
}

public function formatAttribute(string $name = 'none',  $value = null){
	if ($name != 'none'){
		if ( !is_null($value) && ($value != 'none')){
			$a = self::SP.$name.self::EQ;
			$a .= self::DQ.$value.self::DQ;
		} else {
			//no attribute value
			$a .= self::DQ.self::DQ;
		}
	} else {
		//no attribute name
		$a = self::_EMPTY;
	}

	return $a;
}

public function addAttribute(string $name = 'none', $value = 'none'){
	$a = $this->formatAttribute($name, $value);
	$this->_attribs .= $a;
}

protected function setTag(string $tag){
	$this->_tag = $tag;
}
//null being passed, typing to string raises error
public function setIdName( $idName){
if (!is_null($idName)){
	$this->_id = $idName;
	$this->_name = $idName;
	$this->addAttribute('id', $this->_id);
	$this->addAttribute('name', $this->_name);
	}
}

public function setCSS(string $css){
		$this->_css = $css;
		$this->addAttribute('class', $this->_css);
}

public function setStyle(string $style){
		$this->_style = $style;
		$this->addAttribute('style', $this->_style);
}

public function setCData(bool $isCData = false){
		$this->$_cData = $isCData;
}

protected function start(){
	$this->_markup = self::LT.$this->_tag;
	if ($this->_attribs != 'none' && !is_null($this->_attribs)){
		$this->_markup .= $this->_attribs;
	}
}

function open(){
	$this->start();
	$this->_markup .= self::GT;
	return $this->_markup;
}

function empty(){
	$this->start();
	$this->_markup .= self::SP.self::SL.self::GT;
	return $this->_markup;
}

public function close(){
	$this->_markup = self::LT.self::SL.$this->_tag.self::GT;
	return $this->_markup;
}

public function print(){

		$value = $this->open();
		$value .= $this->_content;
		$value .= $this->close();

	return $value;
}

public function wrap($content = null){
	$this->setContent($content);

	return $this->print();
}

function commentOpen(){
	return self::_htmlCommentOpen;
}

function commentClose(){
	return self::_htmlCommentClose;
}

}

?>
