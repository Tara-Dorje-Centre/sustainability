<?php
namespace html;

trait valueAttribute{
	public function setValue($value){
		if (!is_null($value)){
			$this->addAttribute('value',$value);
		} else {
			$this->addAttribute('value','');
		}
	}
}

trait valueContent{
	public function setValue($inputValue){
	
		$this->setContent($inputValue);
		
	}
}

trait inputCaption{
	protected $_caption = '';
	protected $_showCaption = false;
	public function setCaption(string $caption = 'none'){
		if ($caption != 'none'){
		$this->_caption = $caption;
		$this->_showCaption = true;
		};
	}
	public function printCaption(){
		if ($this->_showCaption == true){
			$c = new _div('ic','input-caption');
			$c->setContent($this->_caption);
			$value = $c->print();
		} else {
			$value = '';
		}
		return $value;
	}

}

trait validation{
	protected $_validation = '';
	protected $_showValidation = false;

	public function setValidation(string $validation = 'none'){
		if ($validation != 'none'){
		$this->_validation = $validation;
		$this->_showValidation = true;
		};
	}
	public function printValidation(){
		if ($this->_showValidation == true){
			$d = new _div('iv','input-validation');
			$d->addContent($this->_validation);
			$value = $d->print();
		} else {
			$value = '';
		}
		return $value;
	}

}

trait disabled{
	protected $_disabled = 'false';
	public function setDisabled($disabled){
		$this->_disabled = $disabled;
	}
	public function printDisabled(){
		if ($this->_disabled != 'false'){
			$this->addAttribute('disabled',$this->_disabled);
		}
	}
}
trait size{
	protected $_size = 100;
	protected $_showSize = false;
	public function setSize($size = 100){
		$this->_showSize = true;
		$this->_size = $size;
	}
	public function printSize(){
		if ($this->_showSize == true){
			$this->addAttribute('size',$this->_size);
		}
	}

}
trait rows{
	protected $_rows = 40;
	protected $_cols = 80;
	protected $_showRows = false;
	public function setRows($rows,$cols){
		$this->_showRows = true;
		$this->_rows = $rows;
		$this->_cols = $cols;
	}
	public function printRows(){
		if ($this->_showRows == true){
			$this->addAttribute('rows',$this->_rows);
			$this->addAttribute('cols',$this->_cols);
		}
	}
}

trait maxLength{
	protected $_maxLength = 100;
	protected $_showMaxLength = false;
	public function setMaxlength($maxLength = 100){
		$this->_showMaxLength = true;
		$this->_maxLength = $maxLength;
	}
	protected function printMaxlength(){
		if ($this->_showMaxLength == true){
			$this->addAttribute('maxlength',$this->_maxLength);
		}
	}

}
trait dimensionsSize{
use size, maxLength;
	public function setDimensions($maxLength, $size){
		$this->setMaxLength($maxLength);
		$this->setSize($size);
	}
	public function printDimensions(){
		$this->printMaxLength();
		$this->printSize();
	}

}
trait dimensionsRows{
use rows, maxLength;
	public function setDimensions($maxLength,$rows, $columns){
		$this->setMaxLength('maxlength',$maxLength);
		$this->setRows($rows,$columns);
	}
	public function printDimensions(){
		$this->printMaxLength();
		$this->printRows();
	}
}

?>
