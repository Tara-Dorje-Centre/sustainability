<?php 

interface IenvironmentVariable{
	//public function __construct(string $variable, string $environment = 'POST');
	public function environment();
	public function variable();
 	public function setEnvironment(string $environment = 'POST');
 	public function setVariable(string $variable = 'variable-name');
	public function exists();
	public function remove();
	public function read();
	public function write();
	public function set($value = NULL, boolean $write = false);
	public function get(boolean $read = false);
}

class _environmentVariable implements IenvironmentVariable{
	private $_env = 'POST';
	private $_var = 'not-set';
	private $_raw = NULL;
	private $_exists = false;

	public function __construct(string $variable, string $environment = 'POST');
		$this->setVariable($variable);
		$this->setEnvironment($environment);
	}
	public function environment(){
		return $this->_env;
	}
	public function variable(){
		return $this->_var;
	}
	public function setVariable(string $variable = 'variable-name'){
		$this->_var = $variable;
	}
	
	public function setEnvironment(string $environment = 'POST'){
		$this->_env = $environment;
	}
	public function set($value = NULL, boolean $write = false){
		$this->_raw = $value;
		if ($write == true){
			$this->write();
		}
	}

	public function get(boolean $read = false){
		if ($read == true){
			$this->read();
		}
		return $this->_raw;
	}
	public function exists(){
		switch ($this->_env){
			case 'GET':
				$this->_exists = isset($_GET[$this->_var]);
				break;
			case 'POST':
				$this->_exists = isset($_POST[$this->_var]);
				break;
			case 'SESSION':
				$this->_exists = isset($_SESSION[$this->_var]);
				break;
			default:
				$this->error('invalid environment');
		}
		return $this->_exists;
	}
	public function remove(){

		if($this->exists() == true){
			switch ($this->_env){
				case 'GET':
					unset($_GET[$this->_var]);
					break;
				case 'POST':
					unset($_POST[$this->_var]);
					break;
				case 'SESSION':
					unset($_SESSION[$this->_var]);
					break;
			default:				
				$this->error('invalid environment');
			}
			$this->_exists = false;
			$this->_raw = NULL;
		}
	}
	public function read(){

		if ($this->exists() == true){
			switch ($this->_env){
				case 'GET':
					$this->_raw = $_GET[$this->_var];
					break;
				case 'POST':
					$this->_raw = $_POST[$this->_var];
					break;
				case 'SESSION':
					$this->_raw = $_SESSION[$this->_var];
					break;
				default:
				$this->error('invalid environment');
			}
		}
		return $this->_raw;
	}
	public function write(){
		switch ($this->_env){
			case 'GET':
				$_GET[$this->_var] = $this->_raw;
				break;
			case 'POST':
				$_POST[$this->_var] = $this->_raw;
				break;
			case 'SESSION':
				$_SESSION[$this->_var] = $this->_raw;
				break;
		default:				
			$this->error('invalid environment');
		}

	}
	
	private function error($msg){
		$msg .= this->_env.'['.$this->_var.']';
		die($msg);
	}

}


 
?>
