<?php
namespace html;


class _element
{
protected const _NONE = 'none';
protected const _EMPTY = '';
/*using _empty returns empty attributes 
foirmatted as name="" in html*/
protected const _EMPTYATTRIBUTE = '""';
protected const LT = '<';
protected const GT = '>';
protected const SL = '/';
protected const EQ = '=';
protected const SQ = "'";
protected const DQ = '"';
protected const SP = ' ';
protected const _htmlCommentOpen = '<!--';
protected const _htmlCommentClose = '-->';
protected $_content = '';
protected $_markup = '';
protected $_attribs = '';
protected $_tag = '';

protected $_id = '';
protected $_name = '';
protected $_css = '';
protected $_style = '';
protected $_cData = false;

public function __construct($tag, $idName = 'none', $css = 'none') {
	$this->reset();
	$this->setTag($tag);
	$this->setIdName($idName);
	$this->setCSS($css);
}

public function __destruct() {
     $this->reset();
}
public function setContent($content = null){
	if (!is_null($content)){
		$this->_content .= $content;
	} else {
		$this->_content = self::_EMPTY;
	}
}
public function addContent($content = null){
	if (!is_null($content)){
		$this->_content .= $content;
	}
}
public function reset(){
	$this->_tag = self::_NONE;
	$this->_attribs = self::_EMPTY;
	$this->_markup = self::_EMPTY;
	
	$this->_id = self::_NONE;
	$this->_name = self::_NONE;
	$this->_css = self::_NONE;
	$this->$_cData = false;
}

public function formatAttribute(string $name = 'none',  $value = null){
	if ($name != 'none'){
		if ( !is_null($value)){
			$a = self::SP.$name.self::EQ;
			$a .= self::DQ.$value.self::DQ;
		} else {
			//no attribute value
			$a .= self::DQ.self::DQ;
		}
	} else {
		//no attribute name
		$a = self::_EMPTY;
	}

	return $a;
}

public function addAttribute(string $name = 'none', $value = 'none'){
	$a = $this->formatAttribute($name, $value);
	$this->_attribs .= $a;
}

protected function setTag(string $tag){
	$this->_tag = $tag;
}
//null being passed, typing to string raises error
public function setIdName( $idName){
if (!is_null($idName)){
	$this->_id = $idName;
	$this->_name = $idName;
	$this->addAttribute('id', $this->_id);
	$this->addAttribute('name', $this->_name);
	}
}

public function setCSS(string $css){
		$this->_css = $css;
		$this->addAttribute('class', $this->_css);
}

public function setStyle(string $style){
		$this->_style = $style;
		$this->addAttribute('style', $this->_style);
}

public function setCData(bool $isCData = false){
		$this->$_cData = $isCData;
}

protected function start(){
	$this->_markup = self::LT.$this->_tag;
	if ($this->_attribs != 'none' && !is_null($this->_attribs)){
		$this->_markup .= $this->_attribs;
	}
}

function open(){
	$this->start();
	$this->_markup .= self::GT;
	return $this->_markup;
}

function empty(){
	$this->start();
	$this->_markup .= self::SP.self::SL.self::GT;
	return $this->_markup;
}

public function close(){
	$this->_markup = self::LT.self::SL.$this->_tag.self::GT;
	return $this->_markup;
}

public function print(){

		$value = $this->open();
		$value .= $this->_content;
		$value .= $this->close();

	return $value;
}

public function wrap($content = null){
	$this->setContent($content);

	return $this->print();
}

function commentOpen(){
	return self::_htmlCommentOpen;
}

function commentClose(){
	return self::_htmlCommentClose;
}


}
//end class _element

class _meta extends _element{
	public function __construct(string $equiv,string $content){
		parent::__construct('meta');
		$this->addAttribute('http-equiv',$equiv);
		$this->addAttribute('content',$content);
	}
	public function meta(){
		return $this->empty();
	}

}




class _document {
	$html;
	$head;
	$body;
	$title;
	$_styles;
	$_scripts;
	public function __construct($title, $onLoad = 'none'){
	
		$this->html= new _element('html');
		$this->head = new _element('head');
		$this->title = new _element('title');
		$this->title->setContent($title);
		$this->body = new _element('body');
		$this->body->addAttribute('onload', $onLoad);
	}
	public function setStyles($styles = null){
		$this->_styles = $styles;
	
	}
	public function setScripts($scripts = null){
		$this->_scripts = $scripts;
	
	}
	protected function doctype(){
		$declare = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "DTD/xhtml1-transitional.dtd">';
		return $declare;	
	}
	
	protected function equivs(){
		$css = new _meta('Content-Style-Type','text/css');
		$text = new _meta('content-type','text/html; charset=UTF-8');
	
		$m = $css->meta()
		$m .= $text->meta();
		return $m;
	}
	
	public function open(){

		$content = $this->doctype();
		$content .= $this->html->open();
		
		$this->head->addContent($this->equivs());		
		$this->head->addContent($this->_styles);
		$this->head->addContent($this->title->print());
		$this->head->addContent($this->_scripts);
		$content .= $this->head->print());
		
		$content .= $this->body->open();

		return $content;	
	}
	
	public function close(){
		$content = $this->body->close();
		$content .= $this->html->close();
		return $content;	
	}
	
}




class _script extends _element{
	protected $useComment = true;

	public function __construct($language = 'JavaScript', $useComment = true){
		parent::__construct('script');
		$this->useComment = $useComment;
		$this->addAttribute('language', $language);
	}
	public function open(){
		$element = parent::open();
		if ($this->useComment == true){
			$element .= $this->commentOpen();
		}
		return $element;
	}
	public function close(){
		if ($this->useComment == true){
			$element = $this->commentClose();
		} else {
			$element = parent::EMPTY;
		}
		$element .= parent::close();
		return $element;
	}
}
class _inlineStyle extends _element{
	public function __construct(){
		parent::__construct('script');
	}
}

class _resourceLink extends _element{
	public function __construct($rel,$type,$href){
		parent::__construct('link');
		$this->addAttribute('rel',$rel);
		$this->addAttribute('type',$type);
		$this->addAttribute('href',$href);
	}
	public function print(){
		return $this->empty();
	}
}

class _cssLink extends _resourceLink{
	public function __construct($cssFile){
		parent::__construct('stylesheet','text/css',$cssFile);
	}
}




class _span extends _element{
	public function __construct($css = 'none',$style = 'none'){
		parent::__construct('span','',$css);
		$this->setStyle($style);
	}
}

class _div extends _element{
	public function __construct(string $idName = 'none', string $css = 'none',string $style = 'none'){
		parent::__construct('div', $idName, $css);
		$this->setStyle($style);
	}
	public function div(){
		return $this->print();
	}
}

class _ul extends _element{
	public function __construct($idName = 'none', $css = 'none'){
		parent::__construct('ul', $idName, $css);
	}
}

class _ol extends _element{
	public function __construct($idName = 'none', $css = 'none'){
		parent::__construct('ol', $idName, $css);
	}
}
class _li extends _element{
	public function __construct($idName = 'none', $css = 'none'){
		parent::__construct('li', $idName, $css);
	}
}




class _table extends _element{
	public function __construct($idName = 'none', $css = 'none'){
		parent::__construct('table', $idName, $css);
	}
}


class _th extends _element{
	public function __construct($idName = 'none', $css = 'none',$colspan = 0){
		parent::__construct('th', $idName, $css);
		$this->setColspan($colspan);
	}
	
	public function setColspan($colspan = 0){
		if ($colSpan != 0){
			$e->addAttribute('colspan',$colSpan);
		}
	}
	
}

class _tr extends _element{
	public function __construct($idName = 'none', $css = 'none',$width = 0, $colspan = 0){
		parent::__construct('tr', $idName, $css);
		$this->setWidth($width);
		$this->setColspan($colspan);
	}
	public function setWidth($width = 0){
		if ($width!=0){
			$e->addAttribute('width', $width.'%');
		}
	}
	public function setColspan($colspan = 0){
		if ($colSpan != 0){
			$e->addAttribute('colspan',$colSpan);
		}
	}
}

class _td extends _element{
	public function __construct($idName = 'none', $css = 'none',$width = 0,$colspan = 0){
		parent::__construct('td', $idName, $css);
		$this->setWidth($width);
		$this->setColspan($colspan);
	}
	public function setWidth($width = 0){
		if ($width!=0){
			$this->addAttribute('width', $width.'%');
		}
	}
	public function setColspan($colspan = 0){
		if ($colSpan != 0){
			$this->addAttribute('colspan',$colSpan);
		}
	}
}



class _href extends _element{
	protected $displayText = '';

	public function __construct($url, $displayText, $css = 'none',$target = '_self',$onClickJS = NULL){
		parent::__construct('a', 'none', $css);
		$this->addAttribute('href',$url);
		if ($target <> '_self'){
			$this->addAttribute('target',$target);
		}
		if (!is_null($onClickJS)){
			$this->addAttribute('onclick',$onClickJS);
		}
		
		if (is_null($displayText) or ($displayText == '')){
			$content = '[???]';
		} else {
			$content = $displayText;
		}
		$this->displayText = $content;
	}

	public function href(){
		return $this->wrap($this->displayText);
	}
}

class _br extends _element{
	private $lines = 1;
	public function __construct($lines = 1){
		parent::__construct('br');
		$this->lines = $lines;
	}
	public function print(){
		$content = '';
		$i = 0;
		while ($i < $this->lines){
			$i++;
			$content .= $this->empty();
		}
		return $content;
	
	}
	
}

class _hr extends _element{
	public function __construct(){
		parent::__construct('hr');
	}
	public function print(){
		return $this->empty();
	}
	
}

class _p extends _element{
	protected $caption;

	public function __construct(string $caption = 'none', string $id = 'none',string $css = 'none'){
		parent::__construct('p', $id, $css);
		$this->caption = $caption;
	}

	public function open(){
		$result = parent::open();
		if ($this->caption != 'none'){
		$result .= span($this->caption,'paragraph-caption');
		}
		return $result();
	}
	public function p($content){
		$this->setContent($content);
		return $this->print();
	}
	
}


class _img extends _element{
	public function __construct($src,$alt,$idName = 'none', $css = 'none'){
		parent::__construct('img', $idName, $css);
		$this->setSource($src,$alt);
	}
	
	public function setSource($src, $alt){
		$e->addAttribute('src',$src);
		$e->addAttribute('alt',$alt);
	}
	public function setDim($width = 0, $height = 0, $border = 0){
		$e->addAttribute('width',$width);
		$e->addAttribute('height',$height);
		$e->addAttribute('border',$border);
	}
}


?>
