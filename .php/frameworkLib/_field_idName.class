<?php 
namespace framework;
		//$fields = inputFieldUser($entity,$this->f->loginName->value(),'loginName','Login Name');
class _fieldIdName implements Ifield{
	public  $id;
	public  $name;
	
	public function __construct(
		string $dbCol = 'entity_id', 
		string $envVar = 'id-entity', 
		string $caption = 'caption',
		string $dbColName = 'entity_name')
	{
		$this->id = new _idField($dbCol, $envVar,'not-used');
		$this->name = new _nameField($dbColName,'not-used',$caption);
		
		$this->enabled(true);
	}
	public function enabled(bool $use = false){
		if ($use == true){
 	//public function setEnabled( $fetch,  $show,  $list,  $post, $input ){
			$this->name->setEnabled(true,true,true,false,false);
			$this->id->setEnabled(true,false,false,true,true);
		
		} else {
			$this->name->enabled($use);
			$this->id->enabled($use);
		}
	}
 	public function setEnabled(
 		bool $fetch = false, 
 		bool $show = false, 
 		bool $list = false, 
 		bool $post = false,
 		bool $input = false)
 	{
		$this->id->setEnabled($fetch,false,false,$post,$input);
		$this->name->setEnabled($fetch,$show,$list,false,false);
	}
	public function fetchEnabled(bool $use = false){
 		$this->id->fetchEnabled($use);
 		$this->name->fetchEnabled($use);
 	}
	public function envEnabled(bool $use = false){
	 	$this->id->envEnabled($use);
	 	$this->name->envEnabled(false);
 	}
	public function displayEnabled(bool $use = false){
	 	$this->id->displayEnabled(false);
 		$this->name->displayEnabled($use);
 	}
	public function listEnabled(bool $use = false){
 		$this->id->listEnabled(false);
 		$this->name->listEnabled($use);
 	}
	public function inputEnabled(bool $use = false){
 		$this->id->inputEnabled($use);
 		$this->name->inputEnabled(false);
 	}
 	public function setCaption(string $caption = 'no caption'){
 		$this->name->setCaption($caption);
 	}
	public function setEntity(string $entity){
		$this->id->setEntity($entity);
	}
	public function setEnvironment(string $env= 'POST'){
		$this->id->setEnvironment($env);
	}
 	public function setEnvironmentVariable(string $var = 'not-used'){
 	 		$this->id->setEnvironmentVariable($var);
 	}
 	public function env(){
 	
 		return $this->id->env();
 	}
 	public function setFetchColumnName(string $dbCol = 'query_alias|column_name'){
 	 	 	$this->name->setFetchColumn($dbCol);
 	}
 	public function setFetchColumn(string $dbCol = 'query_alias|column_name'){
 	 	 	$this->id->setFetchColumn($dbCol);
 	}
	public function set($value){
	 	$this->id->set($value);
	}
	public function setDefault($value){
	 	$this->id->setDefault($value);
 	 	$this->name->setDefault('');
	}
 	public function reset(bool $useDefault = false){
 		$this->id->reset($useDefault);
 	 	$this->name->reset($useDefault);
 	}
 	public function get(){
 	   	return $this->id->get();
 	}
	public function valueRaw(){
 		return $this->id->valueRaw();
 	}
   	public function value(){
   		return $this->id->value();
   	}
   	public function valueSQL(){
   		return $this->id->valueSQL();
   	}

	public function fetch($row){
		$this->id->fetch($row);
		$this->name->fetch($row);
	}
	public function listCaption(){
		return $this->name->listCaption();
	}
	
 	public function listDetail(){
 		return $this->name->listDetail();
 	}
 	public function displayDetail(){
 		return $this->name->displayDetail();
 	}
 	
 	public function read(){
 	 	$this->id->env->read();
 	}
 	 	
 	public function write(){
 	 	$this->id->env->write();
 	}
 	public function remove(){
 	 	$this->id->env->remove();
 	}
 	public function format(){
 		return $this->name->format();
 	}
	public function input(){
		return $this->id->input();
	}
	public function inputHidden(){
		return $this->id->inputHidden();
	}

	public function inputCaptioned(string $input){
		return $this->id->inputCaptioned($input);
	}
	public function inputChoice(string $options){
		return $this->id->inputChoice($options);
	}

}
 
?>
