<?php

namespace application;

interface IentityLinks{
		
	public function makeEditingMenu($mode, $id, $idParent,$idType);
	public function makeListingMenu($mode,$id,$idParent,$idType);
	public function urlList( $idParent, $idType);
	public function urlDetail($action, $id, $idParent);
	public function linkDetail(string $caption, $action, $id,$idParent);
	public function linkList(string $caption = 'list',$idParent,$idType){
	public function printListLink($idParent, $idType);
	public function printDetailLink($caption, $id);
	public function printPagingLinks($recordCount, $resultPage, $perPage, $idParent, $idType);
	public function printCalendarLink(_url $u, $caption, $year, $month);

}
trait entityParameters {
	protected function setEntityParametersList(url &$u,$idParent,$idType){
		$u->addParameter($this->pPageAction('LIST'));
		$u->addParameter($this->pIdParent($idParent));
		$u->addParameter($this->pIdType($idType));
	} 
	protected function setEntityParametersDetail(_url &$u,$action,$id,$idParent){
		$u->addParameter($this->pPageAction($action));
		$u->addParameter($this->pId($id));
		$u->addParameter($this->pIdParent($idParent));
		$u->addParameter($this->pIdType($idType));
	} 
	protected function pPageAction(string $action){
		return $this->getParameter('page-action',$action);
	}
	
	protected function pId( $id){
		return $this->getParameter('id',$id);
	}
	protected function pIdParent( $idParent){
		return $this->getParameter('id-parent',$idParent);
	}
	protected function pIdType( $idType){
		return $this->getParameter('id-type',$idType);
	}

}

abstract class entityLinks extends baseEntityLinks {
use entityParameters;
	
	protected function setListingLinks($mode = 'LIST',$id,$idParent,$idType){
		$this->addLink($this->add('AddChild',$id));
		$this->addLink($this->add('AddSibling',$idParent));
		$this->addLink($this->list('List',$idParent));
		$this->addLink($this->list('ListChildren',$id));
		$this->addLink($this->list('listType',0,$idType));
	}
	protected function setEditingLinks($mode = 'VIEW', $id,$idParent,$idType){
		switch ($mode){
			case 'VIEW':
				$this->addLink($this->edit('Edit',$id));
				$this->addLink($this->add('AddChild',$id));
				$this->addLink($this->add('AddSibling',$idParent));
				$this->addLink($this->copy('Copy',$id));
				break;
			case 'EDIT':
				$this->addLink($this->view('View',$id));
				
				break;
			case 'ADD':
				$this->addLink($this->list('List',$idParent));
				break;
			default:
				$this->addLink($this->view('View',$id));
		
		}
		
	}
	public function makeEditingMenu($mode, $id, $idParent,$idType){
		$this->setEditingLinks($mode,$id,$idParent,$idType);
	}
	public function makeListingMenu($mode,$id,$idParent,$idType){
		$this->setListingLinks($mode,$id,$idParent,$idType);
	}
	
	public function urlList( $idParent, $idType){
		$url = $this->baseUrlList();
		$this->setEntityParametersList($url$idParent,$idType);
		return $url;
	}
	
	public function urlDetail($action, $id, $idParent){
		$url = $this->baseUrlDetail();
		$this->setEntityParametersDetail($url,$action,$id,$idParent);
		return $url;
	}	
	
	public function linkDetail(string $caption, $action, $id,$idParent){
		$url = $this->urlDetail($action,$id,$idParent);
		$l = $this->getLink($url,$caption);
		return $l;	
	}	
	public function linkList(string $caption,$idParent,$idType){
		$url = $this->urlList($idParent,$idType);
		$l = $this->getLink($url,$caption);
		return $l;	
	}
	
	protected function add($caption = 'New', $idParent){
		return $this->linkDetail($caption,'ADD',0,$idParent);
	}
	protected function view($caption = 'View', $id){
		return $this->linkDetail($caption,'VIEW',$id);
	}
	protected function edit($caption = 'Edit', $id){
		return $this->linkDetail($caption,'EDIT',$id);
	}
	protected function copy($caption = 'Copy', $id){
		return $this->linkDetail($caption,'COPY',$id);
	}
	
	protected function getListLink($idParent, $idType){
		return $this->list($this->context,$idParent,$idType);
	}
	public function printListLink($idParent, $idType){
		$l = $this->getListLink($idParent, $idType);
		return $l->print();
	}
	protected function getDetailLink($caption, $id){
		$d = new \html\_div('list-link','list-item-link');
		$lView = $this->view($caption,$id);
		$lEdit = $this->edit('[#]',$id);
		$d->addContent($lView->print());
		$d->addContent($lEdit->print());
		return $d;
	}	
	public function printDetailLink($caption, $id){
		$d = $this->getDetailLink($caption,$id);
		return $d->print();
	}	
	protected function getPagingLinks($recordCount, $resultPage, $perPage, $idParent, $idType){
		$p = new _linkMenuPaged($perPage,'results-page');
		$u = $this->urlList($idParent,$idType);
		$p->makePagedLinks($u, $recordCount,$resultPage);
		return $p;
	}
	
	public function printPagingLinks($recordCount, $resultPage, $perPage, $idParent, $idType){
		$p = $this->getPagingLinks($recordCount,$resultPage, $perPage,$idParent,$idType);
		return $p->print();
	}
	
	public function printCalendarLink(_url $u, $caption, $year, $month){
		$l = $this->setCalendarLink($u,$caption,$year,$month);
		return $l->print();
	}
		
}
abstract class baseEntityLinks extends linkMenu{
use \application\baseEntityParameters, TcalendarParameters;
	protected $context = 'entity';
	protected $pageList = 'list.php';
	protected $pageDetail = 'detail.php';
	
	public function __construct(string $context = 'entity',string $pageDetail = 'index.php',string $pageList = 'index.php'){
		parent::__construct('LIST','menu');
		$this->setLinkContext($context,$pageList,$pageDetail);
	}
	public function setLinkContext($context,$pageList,$pageDetail){
		$this->context = $context;
		$this->pageList = $pageList;
		$this->pageDetail = $pageDetails;
	}
	
	public function baseUrlList(){
		$url = $this->baseUrl($this->pageList,'list',$this->context);
		return $url;
	}
	
	public function baseUrlDetail(){
		$url = $this->baseUrl($this->pageDetail,'detail',$this->context);
		return $url;
	}	

}


?>
