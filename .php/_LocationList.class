<?php 

class LocationList extends __EntityList{
	protected $__MyClassName = 'LocationList';

	private $sql;
	
	//default listng all locations
	public function __construct($mode = 'VIEW', $id = 0, $idParent = -1){
		parent::__construct($mode, $id, $idParent);
		$this->sql = new LocationSQL;	
	}
	
	public function setDetails(){
		$this->echoState(true, 'setDetails');


	}
	
	protected function setPageTitle(){

		if ($this->parentId <= 0){	
			$title = 'All Locations';
		} else {
			$l = new Location;
			$title = 'Sub Locations: '.$l->getSortKey($this->parentId);
		}

		$this->_pageTitle = $title;	
	}
	
	protected function setPageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';
		
		$locations = new LocationLinks($menuType,$menuStyle);
		$menuL = new MenuLinks($menuType,$menuStyle);
		
		$menu = $locations->openMenu('section-heading-links');
 		$menu .= $menuL->linkReference();
		$menu .= $locations->resetMenu();
		if ($this->parentId > 0){
			$menu .= $locations->detailViewHref($this->parentId,'Up');	
		} else {
			$menu .= $locations->detailAddHref(0);
		}
		$menu .= $locations->listingHref(-1);
				
		if ($this->parentId > 0){
			$menu .= $locations->resetMenu();
			//showing sub locations for a parent
			if ($this->found != 0){	
				$menu .= $locations->listingHref($this->idParent,'SubLocations('.$this->found.')');
			} else {
				$menu .= 'No Sublocations';
			}
			//add new sublocation to current parent
			$menu .= $locations->detailAddHref($this->parentId);
		}
		
		$menu .= $locations->closeMenu();
		$this->_pageMenu = $menu;			
	}
	
	public function setCount(){
		if ($this->idParent == -1){
			// idParent is -1, list all locatons
			$sql = $this->sql->countAll();
			$this->echoPrint(true, 'count all locations','setCount');
		} else {
			// id parent is 0 -- list primary locatons
			// f id s positive -- listdirect children
			$sql = $this->sql->countChildren($this->idParent);

			$this->echoPrint(true, ' count child locations');
		} 
			//locationid = 0, listing on add?
			
			
		//	$l = new Location;
		//	$sortKey = $l->getSortKey($this->idParent);
		
		
		//if ($this->id != 0){
			$this->found = dbGetCount($sql, 'total_locations');
			
		//} else {
			//$this->found = 0;
		//}

	}
	
	
	
	public function getListing(){		
	
		$this->setCount();
		
		if ($this->found > 0){
			$ll = new LocationLinks;
			$pagingLinks = $ll->listingPaged($this->idParent,$this->found,$this->resultPage,$this->perPage);
			$list = openDisplayList('location','Locations',$pagingLinks);

			$heading = wrapTh('Location');
			$heading .= wrapTh('Description');
			$list .= wrapTr($heading);

			$list .= $this->getListingRows();

			$list .= closeDisplayList();
		} else {
			$list = openDiv('location-list','none');
			$list .= 'No Locations Found';
			$list .= closeDiv();
		}
		
		return $list;
		
	}
	
	protected function getListingRows(){
	$this->echoState(true,'getListingRows');
		$ll = new LocationLinks;
		$list = '';
		if ($this->idParent == -1){
			$this->echoPrint(true, 'fetching all','getListingRows');
		
			$sql = $this->sql->listAll($this->resultPage,$this->perPage);
		} else {
			$this->echoPrint(true, 'fetching children','getListingRows');
		
			$sql = $this->sql->listChildren($this->idParent,$this->resultPage,$this->perPage);
			//$l = new Location;
			//$sortKey = $l->getSortKey($this->idParent);
		}
		
		$result = dbGetResult($sql);
		if($result){
	  	while ($row = $result->fetch_assoc())
		{	
			$l = new Location('FETCH');
			$l->id = $row["id"];
			$l->name = ($row["name"]);
			$l->sortKey = ($row["sort_key"]);
			$l->description = ($row["description"]);
			$l->formatForDisplay();
			$link = $ll->detailViewEditHref($l->id,$l->sortKey);
			
			$detail = wrapTd($link);
			$detail .= wrapTd($l->description);
			$list .=  wrapTr($detail);
		}
		$result->close();
		}
		
		return $list;
	}


}
?>
