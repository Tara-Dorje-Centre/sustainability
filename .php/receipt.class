<?php 

/******
_entityFields    id, name, description, 
highlightStyle, created, updated
idType, idParent,

_entityTypeFields  notes, displayOrder
****/

class receipt extends _entity{
protected $__MyClassName = 'Receipt';

    public $activityId = 0;	
	public $typeId = 0;
	public $typeName = '';
	public $name;
    public $description;
    public $dateReported;
	public $receivedBy;
	public $receivedFrom;
    public $updated;
    public $quantity = 1;	
	public $quantityUnitMeasureId = 0;
	public $quantityUnitMeasureName = '';
    public $costUnit = 0;	
	public $costActual = 0;
    public $notes;
	public $task;
	public $sql;

	public function __construct($mode = 'VIEW', $id = 0, $idParent = 0){
		parent::__construct($mode, $id, $idParent);
		$this->task = new Task($this->pageMode, $this->idParent);
		$this->sql = new ReceiptSQL;
	}

	public function setDetails(){
	
		if ($this->id > 0){
	
		$sql = $this->sql->infoReceipt($this->id);
		
		$result = dbGetResult($sql);
		if($result){
		while ($row = $result->fetch_assoc())
		{	
			$this->task->id = $row["task_id"];
			$this->activityId = $row["activity_id"];
			$this->typeId = $row["type_id"];
			$this->typeName = ($row["type_name"]);
			$this->name = ($row["name"]);
			$this->description = ($row["description"]);
			$this->dateReported = $row["date_reported"];
			$this->receivedBy = ($row["received_by"]);
			$this->receivedFrom = ($row["received_from"]);
			$this->updated = $row["updated"];	
			$this->quantity = $row["quantity"];	
			$this->quantityUnitMeasureId = $row["qty_unit_measure_id"];
			$this->quantityUnitMeasureName = ($row["qty_unit_measure_name"]);
			$this->costActual = $row["cost_actual"];
			$this->costUnit = $row["cost_unit"];
			$this->notes = ($row["notes"]);
			
		}
		$result->close();
		}
		
		}

		$this->setParentTask();				
	}	
	
	public function setParentTask(){
		$this->task->setDetails();
	}
		
	protected function setPageTitle(){	

		$title = $this->task->project->name.br();
		$title .= 'Task: '.$this->task->name;		

		$this->_pageTitle = $title;
		
	}
	
	
	protected function setPageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';
		
		$projects = new ProjectLinks($menuType,$menuStyle);
		$tasks = new TaskLinks($menuType,$menuStyle);
		$rL = new ReceiptLinks($menuType,$menuStyle);
					
		$menu = $projects->openMenu('section-heading-links');

		$menu .= $projects->detailViewHref($this->task->project->id);
		if ($this->task->project->receiptsCount > 0){
			$menu .= $rL->listingHref(0,'ProjectReceipts',$this->task->project->id,'PROJECT','YES');
		}
		
		$menu .= $projects->resetMenu();
		$menu .= $tasks->detailViewHref($this->task->id);
		if ($this->task->receiptCount > 0){
			$menu .= $rL->listingHref($this->task->id,'TaskReceipts',0,'TASK','NO');
		}
		$menu .= $projects->resetMenu();
		if ($this->pageMode == 'VIEW'){
			$menu .= $rL->detailEditHref($this->id);
		} elseif ($this->pageMode == 'EDIT'){
			$menu .= $rL->detailViewHref($this->id);
		}
		
		$menu .= $projects->closeMenu();
		$this->_pageMenu = $menu;
	}

		
	public function formatForDisplay(){
		$this->name = displayLines($this->name);
		$this->description = displayLines($this->description);
		$this->notes = displayLines($this->notes);
		$this->dateReported = getTimestampDate($this->dateReported);
		$this->updated = getTimestampDate($this->updated);
	}

	public function display(){
		$this->formatForDisplay();
		
		$detail = openDisplayDetails('receipt','Receipt Details');

		$detail .= captionedParagraph('name','Receipt',$this->name);
		$detail .= captionedParagraph('type-name','Type',$this->typeName);
		$detail .= captionedParagraph('description','Description',$this->description);
		
		$detail .= captionedParagraph('reported','Reported',$this->dateReported);
		$detail .= captionedParagraph('receivedBy','Received By', $this->receivedBy);
		$detail .= captionedParagraph('receivedFrom','Received From', $this->receivedFrom);
		$detail .= captionedParagraph('updated','Updated',$this->updated);	
		$detail .= captionedParagraph('quantity-units','Quantity Units',$this->quantityUnitMeasureName);	
		$detail .= captionedParagraph('quantity','Quantity',$this->quantity);
		$detail .= captionedParagraph('cost-unit','Unit Amount',$this->costUnit);
		$detail .= captionedParagraph('cost-actual','Amount Actual',$this->costActual);
 		$detail .= captionedParagraph('notes','Notes',$this->notes);

		$detail .= closeDisplayDetails();

		
		return $detail;
	}	
	
	protected function setDefaults(){
		global $sessionTime;
		$this->dateReported = $sessionTime;	
		//$this->activityId = $this->task->locationId;
		$this->quantity = 1;
		$this->quantityUnitMeasureId = 0;
		$this->costUnit = 0;
		$this->costActual = 0;		
		$this->receivedBy = $_SESSION['login-name'];
	}
	
	public function editForm(){
		if ($this->pageMode == 'ADD'){		
			$this->setDefaults();
			$legend = 'Add Receipt';
		} else {
			$legend = 'Edit Receipt';
		}
		$entity = 'receipt';
		$c = new ProjectTypeLinks;
		$contextMenu = $c->formatToggleLink('formOptional','+Options');
		$form = openEditForm($entity,$legend,'pr_Receipt_Save.php',$contextMenu);

		//start required fields
		$fields = inputFieldName($entity,$this->name,'name','Receipt');

		$fields .= inputFieldUser($entity,$this->receivedBy,'receivedBy','Received By');

		$fields .= inputFieldUser($entity,$this->receivedFrom,'receivedFrom','Received From');
				
		$fields .= inputFieldNumber($entity,$this->costUnit,'costUnit','Unit Amount');

		$fields .= inputFieldTimestamp($entity, 'dateReported', $this->dateReported, 'Date Reported'); 		

		$fields .= inputFieldDescription($entity,$this->description,'description');

		//end required fields
		$formRequired = $fields;
		
		//start optional fields
		$fields = inputFieldNumber($entity,$this->quantity,'quantity','Quantity');
		
		$u = new UnitOfMeasure(OPTIONS);
		$select = $u->options($this->quantityUnitMeasureId,'quantityUnitMeasureId','false');
		$fields .= captionedInput('Quantity Units', $select);

		$tooltip = 'Set when task costs are approved';
		$fields .= inputFieldNumber($entity,$this->costActual,'costActual','Amount Actual',$tooltip);

		$m = new ReceiptType(OPTIONS);
		$select = $m->options($this->typeId,'typeId','false');
		$fields .= captionedInput('Receipt Type',$select);
		

		$fields .= inputFieldNotes($entity,$this->notes,'notes');

		//end optional fields (hidden by default)
		$formOptional = $fields;

		//hidden fields and submit,reset buttons
		$hidden = getHiddenInput('mode', $this->pageMode);
		$hidden .= getHiddenInput('taskId', $this->task->id);
		$hidden .= getHiddenInput('receiptId', $this->id);
		$hidden .= getHiddenInput('activityId', $this->activityId);
		$input = getSaveChangesResetButtons();
		$formSubmit = $hidden.$input;
			
		$form .= closeEditForm($entity,$formRequired,$formOptional,$formSubmit);	

		return $form;
	}
	
	private function setActualCost(){
			$this->costActual = $this->costUnit * $this->quantity;
	}
	
	public function collectPostValues(){
		//called by save form prior to running adds/updates
		$this->pageMode = $_POST['mode'];
		
		$this->task->id = $_POST['taskId'];
		
		$this->activityId = $_POST['activityId'];

		$this->id = $_POST['receiptId'];
		$this->receiptId = $_POST['receiptId'];
		$this->typeId = $_POST['typeId'];
		$this->name = dbEscapeString($_POST['name']);
		$this->description = dbEscapeString($_POST['description']); 
		$this->notes = dbEscapeString($_POST['notes']); 
		$this->dateReported = getTimestampPostValues('dateReported');
		$this->receivedBy = dbEscapeString($_POST['receivedBy']);
		$this->receivedFrom = dbEscapeString($_POST['receivedFrom']);
		$this->quantity = $_POST['quantity']; 
		$this->quantityUnitMeasureId = $_POST['quantityUnitMeasureId'];
		$this->costUnit = $_POST['costUnit']; 
		
		$this->setActualCost();

		$this->setParentTask();
	}

	protected function saveUpdate(){
	

			
			$sql = " UPDATE receipts m ";
			$sql .= " SET ";
			$sql .= " m.name = '".$this->name."', ";
			$sql .= " m.description = '".$this->description."', ";
			$sql .= " m.notes = '".$this->notes."', ";
			$sql .= " m.updated = CURRENT_TIMESTAMP, ";
			$sql .= " m.date_reported = '".$this->dateReported."', ";
			$sql .= " m.received_by = '".$this->receivedBy."', ";
			$sql .= " m.received_from = '".$this->receivedFrom."', ";			
			$sql .= " m.type_id = ".$this->typeId.", ";
			$sql .= " m.activity_id = ".$this->activityId.", ";
			$sql .= " m.quantity = ".$this->quantity.", ";
			$sql .= " m.qty_unit_measure_id = ".$this->quantityUnitMeasureId.", ";
			$sql .= " m.cost_unit = ".$this->costUnit.", ";
			$sql .= " m.cost_actual = ".$this->costActual." ";
			$sql .= " WHERE m.id = ".$this->id." ";

			$result = dbRunSQL($sql);
			
			$this->task->resetReceiptsAuthorization();
			
	}
			
	protected function saveInsert(){
	
			$sql = " INSERT INTO receipts ";
			$sql .= " (name, ";
			$sql .= " description, ";
			$sql .= " task_id, ";
			$sql .= " activity_id, ";
			$sql .= " date_reported, ";
			$sql .= " received_by, ";
			$sql .= " received_from, ";
			$sql .= " updated, ";
			$sql .= " quantity, ";
			$sql .= " cost_unit, ";
			$sql .= " cost_actual, ";
			$sql .= " type_id, ";
			$sql .= " qty_unit_measure_id, ";
			$sql .= " notes) ";
			$sql .= " VALUES (";
			$sql .= "'".$this->name."', ";
			$sql .= "'".$this->description."', ";
			$sql .= "".$this->task->id.", ";
			$sql .= "".$this->activityId.", ";
			$sql .= " '".$this->dateReported."', ";
			$sql .= " '".$this->receivedBy."', ";
			$sql .= " '".$this->receivedFrom."', ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= "".$this->quantity.", ";
			$sql .= "".$this->costUnit.", ";
			$sql .= "".$this->costActual.", ";
			$sql .= " ".$this->typeId.", ";
			$sql .= " ".$this->quantityUnitMeasureId.", ";
			$sql .= "'".$this->notes."') ";
			
			$result = dbRunSQL($sql);

			$this->id = dbInsertedId();

			$this->task->resetReceiptsAuthorization();
	}
	
	
} 
?>
