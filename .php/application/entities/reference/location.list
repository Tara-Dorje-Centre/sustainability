<?php
namespace application\entities\reference;

class locationList extends \application\entityList{
 	public function __construct(){
		parent::__construct();
		$this->entityTitle = 'Locations';
		$this->base = new location();
	}
	
	public function getRequestArguments(){
		parent::getRequestArguments();


	}
	protected function makePageTitle(){

		if ($this->idParent <= 0){	
			$title = 'All Locations';
		} else {
		//	$l = new Location;
			$title = 'Sub Locations: '.$this->base->getSortKey($this->idParent);
		}

		$this->_pageTitle = $title;	
	}
	
	protected function makePageMenu(){
		
		$s = new \application\links\systemMenuLinks();
		$this->base->links->menu->addLink($s->reference());
		
		//$this->base->links->listingLinks($this->pageMode,$this->id,$this->idParent,$this->idType);
		
		
		
		if ($this->idParent > 0){
			$this->base->links->menu->addLink($this->base->links->view('Up',$this->idParent));	
		} else {
			$this->base->links->menu->addLink($this->base->links->add('New', 0));
		}
		$this->base->links->menu->addLink($this->base->links->list('AllLocations',-1));
				
		if ($this->idParent > 0){

			//showing sub locations for a parent
			if ($this->found != 0){	
				$caption = 'SubLocations ['.$this->found.']';
				$this->base->links->menu->addLink($this->base->links->list($caption,$this->id));
			} else {
				$menu .= 'No Sublocations';
			}
			//add new sublocation to current parent
			$this->base->links->menu->addLink($this->base->links->add('New Sub Location',$this->idParent));
		}
		
		
		$this->_pageMenu = $this->base->links->print();
	}
	
	public function setCount(){
		if ($this->idParent == -1){
			// idParent is -1, list all locatons
			$sql = $this->base->sql->count();
			$this->echoPrint(true, 'count all locations','setCount');
		} else {
			// id parent is 0 -- list primary locatons
			// f id s positive -- listdirect children
			$sql = $this->base->sql->countChildren($this->id);

			$this->echoPrint(true, ' count child locations');
		} 
			
		$this->found = $this->base->sql->getCount($sql, 'count_details');

	}
	
	protected function listingQuickEdit(){
		$this->base->idParent = $this->idParent;
		// new Location('ADD', 0, $this->id);
		$quickEdit = $this->base->addForm();			
		return $quickEdit;
	}
	
	protected function listingSQL(){
	
		 if ($this->idParent == -1){
		 $this->echoPrint(true, 'fetching all','getListingRows');

		 $sql = $this->base->sql->list($this->resultPage,$this->perPage);
		 } else {
		 $this->echoPrint(true, 'fetching children','getListingRows');

		 $sql = $this->base->sql->listChildren($this->id,$this->resultPage,$this->perPage);
		 }
		 
		 return $sql;
	}
	
}
?>
