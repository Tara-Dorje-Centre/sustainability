<?php
namespace application\entities\reference;

class location extends \application\entity{
	
	public $childLocations = 0;
 	public function __construct(){
		parent::__construct();
  	 	$this->entityTitle = 'Location';
  	 	$this->entity = 'location';

		$this->sql = new sql\locationSQL();
		$this->links = new links\locationLinks();
		$this->f = new forms\locationFields();
		$this->f->setEntity($this->entity);
	}
	public function getRequestArguments(){
		parent::getRequestArguments();


	}
	protected function listRowLink(){
		$link = $this->links->viewEdit($this->f->sortKey->value(),$this->f->id->value());
		return $link;
	}
	
    public function setDetails(){
    	parent::setDetails();
			
		$this->setChildCount();
	}	
	
	private function setChildCount(){
		$this->echoState(true,'setChildCount');
		if ($this->id > 0){
			$sql = $this->sql->countChildren($this->id);
			$this->childLocations = $this->sql->getCount($sql, 'count_details');
		} else {
			$this->childLocations = 0;
		}
		$this->echoState(true,'setChildCount');
	}
	
	
	
	protected function makePageTitle(){
		if ($this->pageMode != 'ADD'){
			$heading = $this->f->sortKey->value();
		} else {
			if ($this->idParent <= 0){
				$heading = 'Add New Location';
			} else {
				$heading = $this->getSortKey($this->idParent).': Add Sub Location';	
			}
		}

		$this->_pageTitle = $heading;
	}
	
	protected function makePageMenu(){
		
		$s = new \application\links\systemMenuLinks();
		$this->links->addLink($s->reference());
		$this->links->editingLinks($this->pageMode,$this->id,$this->idParent,$this->idType);

		$this->_pageMenu = $this->links->print();
	}
	

	public function options(
		$selected = 0, 
		$id = 'id-type',
		$caption = 'use-entity'){
		
		if ($caption == 'use-entity'){
			$c = $this->entityTitle;
		} else {
			$c = $caption;
		}
	
		$sql = $this->sql->options($selected);
		$s = new \html\inputs\selectQuery($id,$selected,$sql, $c);
		$s->defaultOption(0,'-No '.$this->entityTitle);
		return $s;
		
	}
	
	protected function setDefaults(){
		parent::setDefaults();
		
		

	}  

	public function editForm(){
		
		$url = $this->links->request->getUrlEntitySave($this->f->id->value(),0,0);
	
		$this->edit = new \application\forms\inputForm($url->print(), $this->entityTitle,$this->pageMode,$this->entity,true);
		
		$this->edit->required->input($this->f->name);
		
		$m = new locationType;
		$select = $m->options($this->f->type->id->value(),$this->f->type->id->env->variable());
		$this->edit->required->inputChoice($this->f->type->id,$select->print());

		$this->edit->optional->input($this->f->description);
		
		if ($this->f->parent->value() == -1){
			$this->f->parent->set(0);
		}
		
		if ($this->idParent > 0){
			$this->f->parent->set($this->idParent);
		}
		//$m = new location;
		$select = $this->options($this->f->parent->value(),$this->f->parent->id->env->variable(),'Parent Location');
		$this->edit->optional->inputChoice($this->f->parent->id,$select->print());
		
		$this->edit->hidden->inputHidden($this->f->id);
		//$this->edit->hidden->inputHidden($this->f->parent->id);
		$this->edit->setRequestMode($this->pageMode);
		$this->edit->setSubmitButtons();
		
		return $this->edit->print();

	}


	public function getSortKey($id){
		$sql = $this->sql->sortKey($id);
		$sortKey = $this->sql->getScalar($sql, 'sort_key');
		return $sortKey;		
	}

	private function buildSortKey($parentId){
		if ($parentId == 0){
			$sortKey = $this->f->name->value();
		} else {
			$sortKey = $this->getSortKey($parentId);
			$sortKey .= '.'.$this->f->name->value();
		}
		return $sortKey;

	}
	private function updateSortKey($id, $parentId){

		$sortKey = $this->buildSortKey($parentId);
		//if ($sortKey != $this->f->sortKey->value()){
			$key = $this->sql->getEscapeString($sortKey);
			$sql = $this->sql->sortKeyUpdate($this->id, $key);
			$result = $this->sql->runStatement($sql);
		//}
	
	}

	protected function saveUpdate(){
	

			$sql = " UPDATE locations AS l ";
			$sql .= " SET ";
			$sql .= " l.name = '".$this->f->name->value()."', ";
			$sql .= " l.type_id = ".$this->f->type->id->value().", ";
			$sql .= " l.parent_id = ".$this->f->parent->id->value().", ";
			$sql .= " l.updated = CURRENT_TIMESTAMP, ";
			$sql .= " l.description = '".$this->f->description->value()."' ";
			$sql .= " WHERE l.id = ".$this->id."  ";			
			
			$result = $this->sql->runStatement($sql);
			
			$this->updateSortKey($this->id,$this->f->parent->id->value());
	}
	
	protected function saveInsert(){
	
			$sql = " INSERT INTO locations ";
			$sql .= " (name, ";
			$sql .= " parent_id, ";
			$sql .= " type_id, ";
			$sql .= " created, ";
			$sql .= " updated, ";
			$sql .= " description, ";
			$sql .= " sort_key) ";
			$sql .= " VALUES (";
			$sql .= "'".$this->f->name->value()."', ";
			$sql .= " ".$this->f->parent->id->value().", ";
			$sql .= " ".$this->f->type->id->value().", ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= "'".$this->f->description->value()."', ";
			//default to timestamp for initial unique value
			$sql .= " CURRENT_TIMESTAMP) ";
			
			$result = $this->sql->runStatement($sql);
			
			$this->id = $this->sql->getInsertedId();
			$this->f->id->set($this->id);
			$this->updateSortKey($this->id,$this->f->parent->id->value());
		
	
	}
	
} 
?>
