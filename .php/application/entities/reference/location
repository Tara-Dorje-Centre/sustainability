<?php
namespace application\entities\reference;

class location extends \application\entity{
	
	public $childLocations = 0;
 	public function __construct(){
		parent::__construct();
  	 	$this->entityTitle = 'Location';
  	 	$this->entity = 'location';

		$this->sql = new sql\locationSQL();
		$this->links = new links\locationLinks();
		$this->f = new forms\locationFields();
		$this->f->setEntity($this->entity);
	}
	public function getRequestArguments(){
		parent::getRequestArguments();


	}
	protected function listRowLink(){
		$link = $this->links->viewEdit($this->f->sortKey->value(),$this->f->id->value());
		return $link;
	}
	
    public function setDetails(){
    	parent::setDetails();
			
		$this->setChildCount();
	}	
	
	private function setChildCount(){
		$this->echoState(true,'setChildCount');
		if ($this->id > 0){
		$sql = $this->sql->countChildren($this->id);
		
		
		$this->childLocations = $this->sql->getCount($sql, 'count_details');
		} else {
		$this->childLocations = 0;
		}
		$this->echoState(true,'setChildCount');
	}
	
	
	
	protected function makePageTitle(){
		if ($this->pageMode != 'ADD'){
			$heading = $this->f->sortKey->value();
		} else {
			if ($this->idParent == 0){
				$heading = 'Add New Location';
			} else {
				$heading = $this->f->sortKeyParent->value().' Add Sub Location';	
			}
		}

		$this->_pageTitle = $heading;
	}
	
	protected function makePageMenu(){
		
		$s = new \application\links\systemMenuLinks();
		$this->links->addLink($s->reference());
		
		$this->links->addLink($this->links->list('All Locations'));	
		
		
		if ($this->idParent > 0){
			$this->links->addLink($this->links->view('Up',$this->idParent));
		}
		if ($this->pageMode == 'VIEW'){
			$this->links->addLink($this->links->edit('Edit', $this->id));
		} elseif ($this->pageMode == 'EDIT'){
			$this->links->addLink($this->links->view('View', $this->id));
		}


		if ($this->pageMode != 'ADD'){
			
			$i = $this->childLocations;
			if ($i != 0){
				$this->links->addLink($this->links->list('Sublocations('.$i.')',$this->id));
			} else {
				$this->links->menu->addTextItem( 'No Sublocations');	
			}
			$this->links->addLink($this->links->add('New',$this->id));
		}
	

		$this->_pageMenu = $this->links->print();
	}
	

	public function options($selected = 0, $id = 'id-type'){
	/*
	public function options(
		$selected = 0, 
		$idName = 'locationId', 
		$disabled = 'false',
		$showLink = true,
		$onChangeJS = NULL){
	*/

		$sql = $this->sql->options($selected);
		$s = new \html\inputs\selectQuery($id,$selected,$sql, $this->entityTitle);
		$s->defaultOption(0,'-select '.$this->entityTitle);
		return $s;

/*
		$this->echoState(true, 'options');
		
		
		$sql = $this->sql->options();
		//selected, $disabled);
		
		$default = 0;
		$defaultCaption = '-No Location';
		$allOptions = getSelectOptionsSQL($sql,$selected,$disabled,$default,$defaultCaption);		
		
		$select = getSelectList($idName,$allOptions,'none',$disabled );	

		if ($showLink == true){
			$ll = new LocationLinks;	
			$links =$ll->itemViewEdit($this->_entityTitle,$selectedValue);
			$select .= $links;	
		}
		return $select;
*/
	}
	
	protected function setDefaults(){
	
		//if add came from all locations default, reset to 0 for no parent
		if ($this->idParent == -1){
			$this->idParent = 0;
		}
		
		parent::setDefaults();
	}  

	public function editForm(){
	
	
		$url = $this->links->request->getUrlEntitySave($this->f->id->value(),0,0);
	
		$this->edit = new \application\forms\inputForm($url->print(), $this->entityTitle,$this->pageMode,$this->entity,true);
		
		$this->edit->required->input($this->f->name);
		
		$m = new locationType;
		$select = $m->options($this->f->type->id->value(),$this->f->type->id->env->variable());
		$this->edit->required->inputChoice($this->f->type->id,$select->print());

		$m = new location;
		$select = $m->options($this->f->parent->id->value(),$this->f->parent->id->env->variable());
		$this->edit->required->inputChoice($this->f->parent->id,$select->print());

		
		
		//$this->edit->required->input($this->f->displayOrder);
		//$this->edit->required->input($this->f->highlight);
		
		$this->edit->optional->input($this->f->description);
		//$this->edit->optional->input($this->f->notes);
		
		$this->edit->hidden->inputHidden($this->f->id);
		//$this->edit->hidden->inputHidden($this->f->parent->id);
		$this->edit->setRequestMode($this->pageMode);
		$this->edit->setSubmitButtons();
		
		return $this->edit->print();

	}


	private function getSortKey($id){
		$sql = $this->sql->sortKey($id);
		$sortKey = $this->sql->getScalar($sql, 'sort_key');
		return $sortKey;		
	}

	private function buildSortKey(){
			if ($this->idParent == 0){
			$sortKey = $this->f->name->value();
		} else {
			$sortKey = $this->f->sortKeyParent->value();
			$sortKey .= '.'.$this->f->name->value();
			}
			return $sortKey;

	}
	private function updateSortKey(){

		$sortKey = $this->buildSortKey();
		if ($sortKey != $this->f->sortKey->value()){
			$key = $this->sql->getEscapeString($sortKey);
			$sql = $this->sql->sortKeyUpdate($this->id, $key);
			$result = $this->sql->runStatement($sql);
		}
	
	}

	protected function saveUpdate(){
	

			$sql = " UPDATE locations AS l ";
			$sql .= " SET ";
			$sql .= " l.name = '".$this->f->name->value()."', ";
			$sql .= " l.type_id = ".$this->f->type->id->value().", ";
			$sql .= " l.parent_id = ".$this->f->parent->id->value().", ";
			$sql .= " l.updated = CURRENT_TIMESTAMP, ";
			$sql .= " l.description = '".$this->f->description->value()."' ";
			$sql .= " WHERE l.id = ".$this->id."  ";			
			
			$result = $this->sql->runStatement($sql);
			
			$this->updateSortKey();
	}
	
	protected function saveInsert(){
	
			$sql = " INSERT INTO locations ";
			$sql .= " (name, ";
			$sql .= " parent_id, ";
			$sql .= " type_id, ";
			$sql .= " created, ";
			$sql .= " updated, ";
			$sql .= " description) ";
			$sql .= " VALUES (";
			$sql .= "'".$this->f->name->value()."', ";
			$sql .= " ".$this->f->parent->id->value().", ";
			$sql .= " ".$this->f->type->id->value().", ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= "'".$this->f->description->value()."') ";
			
			$result = $this->sql->runStatement($sql);
			
			$this->id = $this->sql->getInsertedId();
			
			$this->updateSortKey();
		
	
	}
	
} 
?>
