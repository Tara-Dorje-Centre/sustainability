<?php
namespace application\entities\reference;
 
class measureTypeUnit extends \application\entity{

 	public function __construct($mode = 'VIEW', $id = 0, $idParent = 0){
		parent::__construct($mode, $id, $idParent);
		$this->entity = 'measure-type-unit';
		$this->entityTitle = 'Measure Type Unit';
		$this->f = new forms\measureTypeUnitFields();
		$this->f->setEntity($this->entity);
		$this->links = new links\measureTypeUnitLinks();
		$this->sql = new sql\measureTypeUnitSQL();
		
	}
	
	protected function makePageTitle(){	
/*
		//$title .= 'Measure Type:&nbsp;'.$this->measureType->name.br();
		$title .= 'Units:'.$this->unitOfMeasure;		
*/
		$this->_pageTitle = $title;
	}
	
	
	protected function makePageMenu(){
		$s = new \application\links\systemMenuLinks();
		$this->links->addLink($s->reference());
		$this->links->editingLinks($this->pageMode,$this->id,$this->idParent,$this->idType);

		
		/*
		$mtul = new MeasureTypeUnitLinks;
	
		if ($this->pageMode == 'VIEW'){
			$this->links->addLink( $this->links->edit('Edit', $this->id);
		}
		if ($this->pageMode == 'EDIT'){
			$menu .= $this->links->view($this->id,'View');
		}
		if ($this->pageMode != 'ADD'){
			$menu .= $mtul->add($this->measureType->id);
		}
		$menu .= $mtul->listingHref($this->measureType->id,'MeasureType Units');
		$menu .= $mtul->listingHref(0,'All MeasureType Units');
		*/
		
		$this->_pageMenu = $this->links->print();
		
	}
	/*
		
	public function getMeasureTypeAndUnitSymbol(){
		$text = $this->measureTypeName.'('.$this->unitSymbol.')';
		return $text;
	}
	
*/

	public function editForm(){
		
		$url = $this->links->request->getUrlEntitySave($this->f->id->value(),0,0);
	
		$this->edit = new \application\forms\inputForm($url->print(), $this->entityTitle,$this->pageMode,$this->entity,true);
		
		$base = new measureType();;
		$select = $base->options($this->f->measureType->id->value(),$this->f->measureType->id->env->variable());
		$this->edit->required->inputChoice($this->f->measureType->id, $select->print());
		
		$base = new quantityType();;
		$select = $base->options($this->f->quantityType->id->value(),$this->f->quantityType->id->env->variable());
		$this->edit->required->inputChoice($this->f->quantityType->id, $select->print());
		
		//$this->edit->hidden->inputHidden($this->f->measureType->id);
		
		$this->edit->hidden->inputHidden($this->f->id);
		$this->edit->setRequestMode($this->pageMode);
		$this->edit->setSubmitButtons();
		
		return $this->edit->print();
	}

	protected function saveUpdate(){
	
			$sql = " UPDATE measure_type_units m ";
			$sql .= " SET ";
			$sql .= " m.measure_type_id = ".$this->f->measureType->id->value().", ";
			$sql .= " m.unit_measure_id = ".$this->f->unitType->id->value().", ";
			$sql .= " m.updated = CURRENT_TIMESTAMP ";
			$sql .= " WHERE m.id = ".$this->id." ";

			$result = $this->sql->runStatement($sql);
	}
			
	protected function saveInsert(){
	
			$sql = " INSERT INTO measure_type_units ";
			$sql .= " (measure_type_id, ";
			$sql .= " unit_measure_id, ";
			$sql .= " updated, ";
			$sql .= " created) ";
			$sql .= " VALUES (";
			$sql .= " ".$this->measureType->id->value().", ";
			$sql .= " ".$this->unitType->id->value().", ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= " CURRENT_TIMESTAMP) ";
			
			$result = $this->sql->runStatement($sql);
			
			$this->id = $this->sql->getInsertedId();
	}

} 
?>
