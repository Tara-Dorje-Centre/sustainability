<?php
namespace application\entities\projects;

class activityList 
extends \application\entityList{

	public $myActivity = 'NO';
	//defined in base entity
	//public $showCalendar = 'NO';
	//public $prevCalendarLink = '';
	//public $nextCalendarLink = '';
	
	public function __construct(){
		parent::__construct();
     	$this->entityTitle = 'Activities';
		$this->base = new activity();
	}
	public function getRequestArguments(){
		parent::getRequestArguments();

		$my = 'NO';
		if (isset($_GET['my-activity'])){
			$my = $_GET['my-activity'];
		}
		$this->setMyActivity($my);
		$this->base->setMyActivity($my);
		
		$show = 'NO';
		if (isset($_GET['show-calendar'])){
			$show = $_GET['show-calendar'];
		}
		$this->setShowCalendar($show);
		$this->base->setShowCalendar($show);
	}
	
	public function setMyActivity($my = 'NO'){
		$this->myActivity = $my;
	}
	
	public function setShowCalendar($show = 'NO'){
		$this->showCalendar = $show;
	}
	
	protected function makePageTitle(){
		
		$title = '';
		
		if ($this->myActivity == 'NO'){
			$t = new task();
			$title .= 'Project: '.$t->getProjectName($this->idParent).'<br/>';
			$title .= 'Task: '.$t->getTaskName($this->idParent);
		} elseif ($this->myActivity == 'GROUP') {
			$title .= 'Group Activity History';
		} elseif ($this->myActivity == 'YES') {
			$title .= $_SESSION['login-name'].':  Activity History';
		} elseif ($this->myActivity == 'PROJECT') {
			$t = new task();
			$title .= 'All Project Activity: '.$t->getProjectName($this->idParent);
		}

		$this->_pageTitle = $title;	
	}	

	protected function makePageMenu(){

		if ($this->myActivity == 'NO' AND $this->showCalendar == 'NO'){
		//normal task activity list menu
			$t = new task();
			$projectId = $t->getProjectId($this->idParent);
			$p = new links\projectLinks();
			$t = new links\taskLinks();
			$this->base->links->addLink($p->view('View Project', $projectId));				
			$this->base->links->addLink($t->view('View Task', $this->idParent));
			$this->base->links->addLink($this->base->links->list('List Activities', $this->idParent));
			$this->base->links->addLink($this->base->links->add('New Activity', $this->idParent));

		} elseif ($this->myActivity == 'YES' OR $this->myActivity == 'GROUP') {			
			$this->base->links->addLink($this->base->links->linkMyCalendar());
			$this->base->links->addLink($this->base->links->linkGroupCalendar());
			$this->base->links->addLink($this->base->links->linkMyActivities());
			$this->base->links->addLink($this->base->links->linkGroupActivities());
		} elseif ($this->myActivity == 'PROJECT') {
			//showing project activities
			$t = new task();
			$projectId = $t->getProjectId($this->idParent);
			$p = new links\projectLinks();

			$this->base->links->addLink($p->view('View Project', $projectId));				
			$this->base->links->addLink($this->base->links->linkProjectCalendar($projectId));									
			$this->base->links->addLink($this->base->links->linkProjectActivities($projectId));
		}
		

		$this->_pageMenu = $this->base->links->print();;			
	}	
	
	private function getActivityDoneBy(){
		if ($this->myActivity == 'YES'){
			$doneBy = $_SESSION['login-name'];
		} elseif ($this->myActivity == 'GROUP') {
			$doneBy = 'EVERYONE';
		}
		return $doneBy;		
	}

	public function setFoundCount(){
		$this->echoState(true, 'setFoundCount');
		$this->echoValue(true, 'myActivity',$this->myActivity, 'setFoundCount');
		if ($this->myActivity == 'NO'){
			$sql = $this->base->sql->countTask($this->idParent);
		} else {
			if ($this->myActivity == 'YES' OR $this->myActivity == 'GROUP'){
				$sql = $this->base->sql->countByDoneBy($this->getActivityDoneBy());
			} elseif ($this->myActivity == 'PROJECT') {
				$t = new task();
				$projectId = $t->getProjectId($this->idParent);
				$sql = $this->base->sql->countProjectActivity($projectId);
			}
		}
		
		$this->found = $this->base->sql->getCount($sql,'count_details');
		
	}


//todo
	private function getCalendarLinks(){
		$this->echoState(true, 'getCalendarLinks');
		$t = new task();
		$projectId = $t->getProjectId($this->idParent);
		
		$l = new ActivityLinks('DIV','paged');
		$baseUrl = $l->listing(-1,$this->myActivity,$this->showCalendar,$projectId);
		$links = $l->openMenu('calendar-links');
				
		$this->prevCalendarLink = '';
		$this->nextCalendarLink = '';
		$foundCurrent = false;
		$foundNext = false;
				
		if ($this->myActivity == 'PROJECT') {
		
			$sql = $this->base->sql->calendarLinksProject($projectId);
		} else {
			$sql = $this->base->sql->calendarLinksMyActivity($this->getActivityDoneBy());			
		}

		$result = $this->base->getResult($sql);
		if($result){
	  	while ($row = $result->fetch_assoc())
		{	
			$month = $row["month"];
			$year = $row["year"];
			$caption = $year.'-'.$month;
			if ($year == $this->year AND $month == $this->month){
				//skip link and show caption if link for current display monthyear
				$link = span($caption,$l->cssItem.'-current');
				$foundCurrent = true;
			} else {
				$link = $l->formatCalendarHref($caption,$baseUrl,$year,$month);
				if ($foundCurrent == false){
					$this->prevCalendarLink = $l->formatCalendarHref('Previous',$baseUrl,$year,$month);
				} else {
					if ($foundNext == false){
						$this->nextCalendarLink = $l->formatCalendarHref('Next',$baseUrl,$year,$month);
						$foundNext = true;
					}
				}
			}
			$links .= $link;
		}
		$result->close();
		}
		
		$links .= $l->closeMenu();
		return $links;
	}

	private function buildCalendar(\application\forms\calendar $cal, $name = 'activity-calendar'){
		
		$cal->setLinks($this->nextCalendarLink, $this->prevCalendarLink);			
		
		$d = new \html\div($name);
		$d->addContent($this->getCalendarLinks());	
		$d->addContent($cal->buildCalendar());
		
		return $d->print();	
	}

	private function getCalendarItemHighlight($row){
		//highlight scheduled but incomplete activities
		if ($row["sum_hours"] == 0){
			$highlight = 'highlight-yellow';
		} else {
			$highlight = $row['highlight_style'];
		}
		return $highlight;
	}

	public function getProjectActivityCalendar(){
		$tl = new \links\taskLinks();
		$title = 'Project Activities';
		$cal = new \application\forms\calendar($this->year,$this->month,$title);
		
		$sql = $this->base->sql->calendarSummaryProject($this->task->project->id,$this->year,$this->month);
		
		$result = $this->base->sql->getResult($sql);
		if($result){
	  	while ($row = $result->fetch_assoc())
		{
			$l = $tl->view($row['name'],$row['id']);
			$item = $row['done_by'].' '.$l->print();
			$css = $this->getCalendarItemHighlight($row);
			$cal->addItemByTimestamp($row["started"],$item,$css);
		}
		$result->close();
		}

		return $this->buildCalendar($cal,'project-calendar');	
	}
	
	public function getGroupActivityCalendar(){
		$pl = new ProjectLinks();
		$title = 'Group Activities';
		$cal = new \application\forms\calendar($this->year,$this->month,$title);

		$sql = $this->base->sql->calendarSummaryMyActivity($this->getActivityDoneBy(),$this->year,$this->month);
		
		$result = $this->base->getResult($sql);
		if($result){
	  	while ($row = $result->fetch_assoc())
		{	
			if ($row['id'] != 0){
				$l = $pl->view($row['name'],$row['id']);
				$item = $row['done_by'].' '.$l->print;				
			} else {
				$item = $row["sum_hours"].' '.$row['done_by'];;				
			}
			$css = $this->getCalendarItemHighlight($row);
			$cal->addItemByTimestamp($row["started"],$item,$css);
		}
		$result->close();
		}

		return $this->buildCalendar($cal,'group-calendar');	
	}

	public function getMyActivityCalendar(){
		$pl = new \links\projectLinks();
		$title = 'My Activities: '.$this->getActivityDoneBy();
		$cal = new \application\forms\calendar($this->year,$this->month,$title);

		$sql = $this->base->sql->calendarSummaryMyActivity($this->getActivityDoneBy(),$this->year,$this->month);

		$result = $this->base->getResult($sql);
		if($result){
	  	while ($row = $result->fetch_assoc())
		{
			if ($row['id'] != 0){
				$l = $pl->view($row['name'],$row['id']);
				$item = $row["sum_hours"].' '.$l->print();
			} else {
				$item = $row["sum_hours"].' '.$row['name'];
			}
			$css = $this->getCalendarItemHighlight($row);
			$cal->addItemByTimestamp($row["started"],$item,$css);
		}
		$result->close();
		}

		return $this->buildCalendar($cal,'my-calendar');	
	}

	public function getCalendar(){
		if ($this->myActivity == 'PROJECT'){
			$calendar = $this->getProjectActivityCalendar();
		} elseif ($this->myActivity == 'GROUP'){
			$calendar = $this->getGroupActivityCalendar();
		} else {
			$calendar = $this->getMyActivityCalendar();
		}
		return $calendar;
	}
	
	
	public function getPageDetails(){
		if ($this->showCalendar == 'YES'){
			$content = $this->getCalendar();
		} else {
			$content = $this->getListing();
		}
		return $content;
	}
	
	protected function listingSQL(){
		if ($this->myActivity == 'NO'){
			$sql = $this->base->sql->listTask($this->idParent,$this->resultPage,$this->perPage);
		} elseif ($this->myActivity == 'PROJECT'){
			$t = new task();
			$projectId = $t->getProjecId($this->idParent);
			$sql = $this->base->sql->listProject($projectId,$this->resultPage,$this->perPage);	
		} else {
			$sql = $this->base->sql->listByDoneBy($this->getActivityDoneBy(),$this->resultPage,$this->perPage);			
		}
		return $sql;
	}
	/*
	protected function listingPagingLinks($pagingBaseLink = 'USE_LISTING'){
		if ($pagingBaseLink == 'USE_LISTING'){
			$base = $this->links->list($this->task->id,$this->myActivity,$this->showCalendar,$this->task->project->id);
		} else { 
			$base = $pagingBaseLink;
		}
		$pagingLinks = $this->links>listingPaged($base,$this->found,$this->resultPage,$this->perPage);		
		return $pagingLinks;
	}
	*/
	/*
	protected function listingQuickEdit(){
			$a = new Activity('ADD', 0, $this->task->id);
			$quickEdit = $a->editForm('ActivityList.MyActivity='.$this->myActivity);
			return $quickEdit;
	}
	*/
	/*
	public function getListing($pagingBaseLink = 'USE_LISTING'){
		$pagingLinks = $this->listingPagingLinks($pagingBaseLink);
		$quickEdit = $this->listingQuickEdit();
	//get rows
	}
	*/
}
?>
