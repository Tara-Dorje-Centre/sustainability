<?php
namespace application\entities\projects;

class activityList 
extends \application\entityList{

	public $myActivity = 'NO';
	public $projectId = 0;
	
	public function __construct(){
		parent::__construct();
     	$this->entityTitle = 'Activities';
		$this->base = new activity();
	}
	
	public function getRequestArguments(){
		parent::getRequestArguments();
		//push identifiers to base object
		//sets quickEdit form default idParent
		$this->base->setIdentifiers($this->pageMode,$this->id,$this->idParent,$this->idType);
		
		$my = $this->_GET('my-activity','NO');
		
		$this->setMyActivity($my);

		//showCalendar set in baseEntity
		$this->base->setShowCalendar($this->showCalendar);
		
		$id = $this->_GET('project-id',0);
		$this->setProjectId($id);

	}
	
	public function setMyActivity($my = 'NO'){
		$this->myActivity = $my;
		$this->base->setMyActivity($my);
	}
	
	public function setProjectId($id = 0){
		$this->projectId = $id;
		$this->base->setProjectId($id);
	}
	
	protected function makePageTitle(){
		
		$title = '';
		$br = new \html\_br();
		if ($this->myActivity == 'NO'){
			$t = new task();
			$title .= 'Project: '.$t->getProjectName($this->idParent).$br->print();
			$title .= 'Task: '.$t->getTaskName($this->idParent);
		} elseif ($this->myActivity == 'GROUP') {
			$title .= 'Group Activity History';
		} elseif ($this->myActivity == 'YES') {
			$title .= $_SESSION['login-name'].':  Activity History';
		} elseif ($this->myActivity == 'PROJECT') {
			$p = new project();
			$title .= 'All Project Activity: '.$p->getProjectName($this->projectId);
		}

		$this->_pageTitle = $title;	
	}	

	protected function makePageMenu(){

		if ($this->myActivity == 'NO' AND $this->showCalendar == 'NO'){
		//normal task activity list menu
			$t = new task();
			$projectId = $t->getProjectId($this->idParent);
			$p = new links\projectLinks();
			$t = new links\taskLinks();
			$this->base->links->addLink($p->view('View Project', $projectId));				
			$this->base->links->addLink($t->view('View Task', $this->idParent));
			$this->base->links->addLink($this->base->links->list('List Activities', 0,$this->idParent));
			$this->base->links->addLink($this->base->links->add('New Activity', $this->idParent));
		} elseif ($this->myActivity == 'YES' OR $this->myActivity == 'GROUP') {			
			$this->base->links->addLink($this->base->links->myCalendar());
			$this->base->links->addLink($this->base->links->groupCalendar());
			$this->base->links->addLink($this->base->links->myActivity());
			$this->base->links->addLink($this->base->links->groupActivity());
		} elseif ($this->myActivity == 'PROJECT') {
			$p = new links\projectLinks();
			$this->base->links->addLink($p->view('View Project', $this->projectId));				
			$this->base->links->addLink($this->base->links->projectCalendar($this->projectId));									
			$this->base->links->addLink($this->base->links->projectActivity($this->projectId));
		}
		
		$this->_pageMenu = $this->base->links->print();;			
	}	
	
	private function getActivityDoneBy(){
		if ($this->myActivity == 'YES'){
			$doneBy = $_SESSION['login-name'];
		} elseif ($this->myActivity == 'GROUP') {
			$doneBy = 'EVERYONE';
		}
		return $doneBy;		
	}

	public function setFoundCount(){
		$this->echoState(true, 'setFoundCount');
		$this->echoValue(true, 'myActivity',$this->myActivity, 'setFoundCount');
		if ($this->myActivity == 'NO'){
			$sql = $this->base->sql->countTask($this->idParent);
		} else {
			if ($this->myActivity == 'YES' OR $this->myActivity == 'GROUP'){
				$sql = $this->base->sql->countDoneBy($this->getActivityDoneBy());
			} elseif ($this->myActivity == 'PROJECT') {
				$sql = $this->base->sql->countProject($this->projectId);
			}
		}
		
		$this->found = $this->base->sql->getCount($sql,'count_details');
		
	}

	public function getPageDetails(){
		if ($this->showCalendar == 'YES'){
			$content = $this->getCalendar();
		} else {
			$content = $this->getListing();
		}
		return $content;
	}
	
	
	//override listing start 
	//to add args to paged listing
	//to hide quickedit on activity history
	protected function listingStart(\application\links\url $altUrl = NULL){
		//added arguments for project history
		$paging = $this->base->links->pagedListing($altUrl, $this->found,$this->resultPage,$this->perPage, $this->showCalendar,$this->myActivity,$this->idParent,$this->projectId);	
		$add = '';
		if ($this->myActivity == 'NO'){
			$add = $this->base->addForm($this->idParent);	
		}
		$entity = $this->base->entity;
		$legend = $this->entityTitle.':  Listing';
		$this->_display = new \html\displayList($entity,$paging,$legend,$add,'none');

	}
	
	protected function listingSQL(){
		if ($this->myActivity == 'NO'){
			$sql = $this->base->sql->listTask($this->idParent,$this->resultPage,$this->perPage);
		} elseif ($this->myActivity == 'PROJECT'){
			$sql = $this->base->sql->listProject($this->projectId,$this->resultPage,$this->perPage);	
		} else {
			$sql = $this->base->sql->listDoneBy($this->getActivityDoneBy(),$this->resultPage,$this->perPage);			
		}
		return $sql;
	}


	private function getCalendarLinks(){
		$this->echoState(true, 'getCalendarLinks');
		
		//get baseUrl as url object
		//allows for adding month parameters
		$baseUrl = $this->base->links->urlActivityList(-1, $this->showCalendar, $this->myActivity, 0,$this->projectId);
		
		$links = new \html\_div('calendar-links');
		$this->prevCalendarLink = '';
		$this->nextCalendarLink = '';
		$foundCurrent = false;
		$foundNext = false;
				
		if ($this->myActivity == 'PROJECT') {
			$sql = $this->base->sql->calendarLinksProject($this->projectId);
		} else {
			$sql = $this->base->sql->calendarLinksDoneBy($this->getActivityDoneBy());			
		}

		$result = $this->base->sql->getResult($sql);
		if($result){
	  	while ($row = $result->fetch_assoc())
		{	
			$month = $row["month"];
			$year = $row["year"];
			$caption = $year.'-'.$month;
			if ($year == $this->year AND $month == $this->month){
				//skip link and show caption if link for current display monthyear
				$link = $this->base->links->buildTextItem($caption, 'calendar-links-current');
				$foundCurrent = true;
			} else {
				$link = $this->base->links->buildCalendarLink($caption,$baseUrl,$year,$month);
				if ($foundCurrent == false){
					$prev = $this->base->links->buildCalendarLink('Previous',$baseUrl,$year,$month);
					$this->prevCalendarLink = $prev->print();
				} else {
					if ($foundNext == false){
						$next = $this->base->links->buildCalendarLink('Next',$baseUrl,$year,$month);
						$this->nextCalendarLink = $next->print();
						$foundNext = true;
					}
				}
			}

			$links->addContent($link->print());
		}
		$result->close();
		}
		
		return $links->print();
	}

	private function buildCalendar(\application\forms\calendar $cal, $name = 'activity-calendar'){
		$d = new \html\_div($name);
		$d->addContent($this->getCalendarLinks());	
		$cal->setLinks($this->nextCalendarLink, $this->prevCalendarLink);			
		$d->addContent($cal->buildCalendar());
		
		return $d->print();	
	}

	private function getCalendarItemCSS($hours, $highlight){
		//highlight scheduled but incomplete activities
		if ($hours == 0){
			$css = 'highlight-yellow';
		} else {
			$css = $highlight;
		}
		return $css;
	}

	public function getProjectActivityCalendar(){
		$tl = new links\taskLinks();
		$title = 'Project Activities';
		$cal = new \application\forms\calendar($this->year,$this->month,$title);
		
		$sql = $this->base->sql->calendarSummaryProject($this->projectId,$this->year,$this->month);
		
		$result = $this->base->sql->getResult($sql);
		if($result){
	  	while ($row = $result->fetch_assoc())
		{
		
			$id = $row['id'];
			$name = $row['name'];
			$hours = $row['sum_hours'];
			$doneBy = $row['done_by'];
			$started = $row['started'];
			$highlight = $row['highlight_style'];
		
			$l = $tl->view($name,$id);
			$item = $doneBy.' '.$l->print();
			$css = $this->getCalendarItemCSS($hours,$highlight);
			$cal->addItemByTimestamp($started,$item,$css);
		}
		$result->close();
		}

		return $this->buildCalendar($cal,'project-calendar');	
	}
	
	public function getGroupActivityCalendar(){
		$pl = new links\projectLinks();
		$title = 'Group Activities';
		$cal = new \application\forms\calendar($this->year,$this->month,$title);

		$sql = $this->base->sql->calendarSummaryDoneBy($this->getActivityDoneBy(),$this->year,$this->month);
		
		$result = $this->base->sql->getResult($sql);
		if($result){
	  	while ($row = $result->fetch_assoc())
		{	
		
			$id = $row['id'];
			$name = $row['name'];
			$hours = $row['sum_hours'];
			$doneBy = $row['done_by'];
			$started = $row['started'];
			$highlight = $row['highlight_style'];
		
			if ($id != 0){
				$l = $pl->view($name,$id);
				$item = $doneBy.' '.$l->print();				
			} else {
				$item = $hours.' '.$doneBy;				
			}
			$css = $this->getCalendarItemCSS($hours,$highlight);
			$cal->addItemByTimestamp($started,$item,$css);
		}
		$result->close();
		}

		return $this->buildCalendar($cal,'group-calendar');	
	}

	public function getMyActivityCalendar(){
		$pl = new links\projectLinks();
		$title = 'My Activities: '.$this->getActivityDoneBy();
		$cal = new \application\forms\calendar($this->year,$this->month,$title);

		$sql = $this->base->sql->calendarSummaryDoneBy($this->getActivityDoneBy(),$this->year,$this->month);

		$result = $this->base->sql->getResult($sql);
		if($result){
	  	while ($row = $result->fetch_assoc())
		{
		
			$id = $row['id'];
			$name = $row['name'];
			$hours = $row['sum_hours'];
			$doneBy = $row['done_by'];
			$started = $row['started'];
			$highlight = $row['highlight_style'];
		
			if ($id != 0){
				$l = $pl->view($name,$id);
				$item = $hours.' '.$l->print();
			} else {
				$item = $hours.' '.$name;
			}
			$css = $this->getCalendarItemCSS($hours,$highlight);
			$cal->addItemByTimestamp($started,$item,$css);
		}
		$result->close();
		}

		return $this->buildCalendar($cal,'my-calendar');	
	}

	public function getCalendar(){
		if ($this->myActivity == 'PROJECT'){
			$calendar = $this->getProjectActivityCalendar();
		} elseif ($this->myActivity == 'GROUP'){
			$calendar = $this->getGroupActivityCalendar();
		} else {
			$calendar = $this->getMyActivityCalendar();
		}
		return $calendar;
	}
	
	
	
}
?>
