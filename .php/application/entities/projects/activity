<?php
namespace application\entities\projects;


class activity 
extends \application\entity{       

	public $myActivity = 'NO';
	public $projectId = 0;
	//defined in base entity
	//public $showCalendar = 'NO';
	
	public function __construct(){
		parent::__construct();
		$this->entity = 'activity';
     	$this->entityTitle = 'Activity';

		$this->f = new forms\activityFields();
		$this->sql = new sql\activitySQL();
		$this->links = new links\activityLinks();
	}
	
	public function getRequestArguments(){
		parent::getRequestArguments();
		$_SESSION['currentActivityId'] = $this->id;

		if ($this->id > 0 AND $this->idParent == 0){
			$this->idParent = $this->getTaskId($this->id);
		}

	}
	
	public function setMyActivity($myActivity){
		$this->myActivity = $myActivity;
	}
	
	public function setShowCalendar($show = 'NO'){
		$this->showCalendar = $show;
	}
	
	public function setProjectId($id = 0){
		$this->projectId = $id;
	}
	
	
	public function listHeading($periodicTasks = 'NO'): \html\_tr{
	
		$this->f->project->listEnabled(false);
		$this->f->task->listEnabled(false);
		
		if ($this->myActivity != 'NO'){
			if ($this->myActivity != 'PROJECT'){
				$this->f->project->listEnabled(true);
			}
			$this->f->task->listEnabled(true);
		}
		
		
		$tr = new \html\_tr('table-headings');
		$th = new \html\_th($this->entityTitle);

		$tr->addContent($th->print());
		
		$tr->addContent($this->f->listCaption());
		
		$th = new \html\_th('Hotlinks');
		$tr->addContent($th->print());
		
		
		return $tr;
	}

	public function listRowHotLinks(){
		return 'materials, receipts, measures add links';
		
		//$a = new links\activityLinks();
		//$link = $a->add('New Activity',$this->f->id->value());
		//return $link->print();
		
	}
	
	protected function projectRowlink(){
		$p = new links\projectLinks();
		$link = $p->view($this->f->project->name->value(),$this->f->project->id->value());
		return $link->print();
	}
	
	protected function taskRowlink(){
		$t = new links\taskLinks();
		$link = $t->view($this->f->task->name->value(),$this->f->task->id->value());
		return $link->print();
	}
	
	public function listRowFormat(){
		if ($this->myActivity != 'NO'){
			$this->f->task->name->set($this->taskRowlink());
			if ($this->myActivity != 'PROJECT'){
				$this->f->project->name->set($this->projectRowlink());
			}
		}
		if ($this->f->hoursActual->value() == 0){
			$cssItem = 'highlight-yellow';
		} else {
			$cssItem = $this->f->highlight->value();
		}
		
		
		$tr = new \html\_tr($cssItem);
		
		$td = new \html\_td();
		$td->addContent($this->listRowLink());
		$tr->addContent($td->print());
		

		if (($this->f->linkText->value() != '') AND ($this->f->linkUrl->value() != '')){
		// build link and display in linkText
			$link = $this->links->buildLink($this->f->linkUrl->value(), $this->f->linkText->value());
			$this->f->linkText->set($link->print());
		}
		
		$tr->addContent($this->f->listDetail());
	
		$td = new \html\_td();
		$td->addContent($this->listRowHotLinks());
		$tr->addContent($td->print());
		
		return $tr;
			
	}
	
	public function getProjectId($activityId){
		$sql = $this->sql->getProjectId($activityId);
		$id = $this->sql->getScalar($sql,'project_id',0);
		return $id;
	}
	
	public function getProjectName($activityId){
		$sql = $this->sql->getProjectName($activityId);
		$name = $this->sql->getScalar($sql,'name',0);
		return $name;
	}
	
	public function getTaskId($activityId){
		$sql = $this->sql->getTaskId($activityId);
		$id = $this->sql->getScalar($sql,'task_id',0);
		return $id;
	}
	
	public function getTaskName($activityId){
		$sql = $this->sql->getTaskName($activityId);
		$name = $this->sql->getScalar($sql,'name',0);
		return $name;
	}
	
	public function getActivityName($activityId){
		$sql = $this->sql->getActivityName($activityId);
		$name = $this->sql->getScalar($sql,'name',0);
		return $name;
	}
	
	protected function makePageTitle(){	
		if ($this->pageMode == 'ADD'){
			$t = new task();
			$taskName = $t->getTaskName($this->idParent);
			$projectName = $t->getProjectName($this->idParent);
		} else {
			$projectName = $this->f->project->name->value();
			$taskName = $this->f->task->name->value();
		}
		$title = 'Project: '.$projectName.'<br/>';
		$title .= 'Task: '.$taskName.'<br/>';		
		$title .= $this->pageMode.' Activity';
		$this->_pageTitle = $title;
	}	
	
	protected function makePageMenu(){
		$t = new task();
		$projectId = $t->getProjectId($this->idParent);
		
		$p = new links\projectLinks();
		$t = new links\taskLinks();
		$this->links->addLink($p->view('View Project', $projectId));
		$this->links->addLink($t->view('View Task', $this->idParent));

		$this->links->addLink($this->links->list('List Activities', 0, $this->idParent));
		
		if ($this->pageMode == 'VIEW'){
			$this->links->addLink($this->links->edit('Edit Activity', $this->id));
			$this->links->addLink($this->links->add('New Activity', $this->idParent));
		}		
		
		if ($this->pageMode == 'EDIT'){
			$this->links->addLink($this->links->view('View Activity', $this->id));
		}

		$this->_pageMenu = $this->links->print();

	}
		
	public function display(){
		$detail = parent::display();

		return $detail;
	}
	
	protected function nextActivityOrder(){
		$sql = $this->sql->countTask($this->idParent);
		$count = $this->sql->getCount($sql, 'count_details');
		$count += 1;
		return $count;
	}


	protected function setDefaults(){
		if ($this->pageMode == 'ADD'){
	 		$this->f->reset(true);
	 		//$this->f->activityOrder->set($this->nextActivityOrder());
	 		$this->f->started->set($this->f->currentTimestamp);
	 		$this->f->doneBy->set($this->f->currentUser);
	 		$this->f->hoursActual->set(1);
	 	}
	}
	
	public function editForm($editContext = 'ActivityDetail'){
		
		if ($this->idParent > 0){
			$this->f->task->id->set($this->idParent);
		}
		$url = $this->links->request->getUrlEntitySave($this->f->id->value(),$this->f->task->id->value(),0);
		$this->edit = new \application\forms\inputForm($url->print(), $this->entityTitle,$this->pageMode,$this->entity,true);
		
		
		
		
		/*
		$base = new ProjectType('OPTIONS');
		$changeJs = "ajaxRefresh('PROJECTS_BY_TYPE_SELECT',this,'projectId');";
		$input = $base->options($this->f->parentProjectType->id->value(),$this->f->parentProjectType->id->env->variable(),'false',false,$changeJs);
		$edit->required->addContent($this->f->parentProjectType->inputChoice($input));
		
		$base = new project('OPTIONS');
		$changeJs = "ajaxRefresh('PROJECT_TASKS_SELECT',this,'taskId');";
		$input = $base->options($this->f->parentProject->id->value(),$this->f->parentProject->id->variable(),'false',false,$changeJs);
		$edit->required->addContent($this->f->parentProject->inputChoice($input));
		
		$base = new task('OPTIONS');
		$changeJs = "ajaxRefresh('TASK_EST_EFFORT',this,'activityHoursActual');";		
		$input = $base->options($this->f->task->id->value(),$this->f->task->id->env->variable(),'false',false,$changeJs);
		$edit->required->addContent($this->f->parentTask->inputChoice($input));
		*/
		
		//force activity order before running insert
		//$this->edit->required->input($this->f->activityOrder);
		$m = new \application\entities\reference\activityType;
		$select = $m->options($this->f->type->id->value(),$this->f->type->id->env->variable());
		$this->edit->required->inputChoice($this->f->type->id,$select->print());
		
		$this->edit->required->input($this->f->hoursEstimated);
		$tooltip = 'Hint: Set actual hours to 0 to create a scheduled activity';
		$this->edit->required->input($this->f->hoursActual);
		$this->edit->required->input($this->f->started);
		$this->edit->required->input($this->f->doneBy);
		$this->edit->optional->input($this->f->linkUrl);
		$this->edit->optional->input($this->f->linkText);
		$this->edit->optional->input($this->f->comments);

		//$edit->hidden->addContent(getHiddenInput('editContext',$editContext));
		
		$this->edit->hidden->inputHidden($this->f->id);
		//comment after ajax calls are done
		$this->edit->hidden->inputHidden($this->f->task->id);
		$this->edit->setRequestMode($this->pageMode);
		$this->edit->setSubmitButtons();
		
		return $this->edit->print();
		
		
	}
	
	public function collectPostValues(){
		parent::collectPostValues();
		$this->echoState(true, 'collectPostValues');
	
		$this->idParent = $this->f->task->id->value();
		
	}
	
	
	protected function saveUpdate(){
			$sql = " UPDATE activities a ";
			$sql .= " SET ";
			$sql .= " a.done_by = '".$this->f->doneBy->value()."', ";
			$sql .= " a.comments = '".$this->f->comments->value()."', ";
			$sql .= " a.updated = CURRENT_TIMESTAMP, ";
			$sql .= " a.started = '".$this->f->started->value()."', ";
			$sql .= " a.link_text = '".$this->f->linkText->value()."', ";
			$sql .= " a.link_url = '".$this->f->linkUrl->value()."', ";
			$sql .= " a.hours_actual = ".$this->f->hoursActual->value().", ";			
			//$sql .= " a.activity_order = ".$this->f->activityOrder->value().", ";
			$sql .= " a.type_id = ".$this->f->type->id->value().", ";
			$sql .= " a.task_id = ".$this->f->task->id->value()." ";
			$sql .= " WHERE a.id = ".$this->f->id->value()." ";

			$result = $this->sql->runStatement($sql);
			
			//$this->task->updateActivitySummary();
	}
	
	protected function saveInsert(){
		
		 	$this->f->activityOrder->set($this->nextActivityOrder());
	
			$sql = " INSERT INTO activities ";
			$sql .= " ( ";
			$sql .= " activity_order, ";
			$sql .= " task_id, ";
			$sql .= " type_id, ";
			$sql .= " done_by, ";
			$sql .= " started, ";
			$sql .= " updated, ";
			$sql .= " hours_estimated, ";
			$sql .= " hours_actual, ";
			$sql .= " link_url, ";
			$sql .= " link_text, ";
			$sql .= " comments) ";
			$sql .= " VALUES (";
			$sql .= " ".$this->f->activityOrder->value().", ";
			$sql .= " ".$this->f->task->id->value().", ";
			$sql .= " ".$this->f->type->id->value().", ";
			$sql .= " '".$this->f->doneBy->value()."', ";
			$sql .= " '".$this->f->started->value()."', ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= " ".$this->f->hoursEstimated->value().", ";
			$sql .= " ".$this->f->hoursActual->value().", ";
			$sql .= " '".$this->f->linkUrl->value()."', ";
			$sql .= " '".$this->f->linkText->value()."', ";			
			$sql .= " '".$this->f->comments->value()."') ";
			
			$result = $this->sql->runStatement($sql);
			
			$this->id = $this->sql->getInsertedId();
			$this->f->id->set($this->id);

			//$this->task->updateActivitySummary();
	}
	
	
	
} 
?>
