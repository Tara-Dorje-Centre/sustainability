<?php
namespace application\entities\projects;

class project extends \application\entity{
	
	public $totals;
	
	public function __construct(){
		parent::__construct();
		$this->entityTitle = 'Project';
		$this->entity = 'project';
		$this->f = new forms\projectFields();
		$this->f->setEntity($this->entity);
		$this->sql = new sql\projectSQL();
		$this->links = new links\projectLinks();
		$this->totals = new forms\summaryTotals();
	}
	
	public function getRequestArguments(){
		parent::getRequestArguments();
		$_SESSION['currentProjectId'] = $this->id;
	}
	
	public function setDetails(){
		if ($this->pageMode == 'COPY'){
			$this->copyProject();
			$_SESSION['currentProjectId'] = $this->id;
		}
		parent::setDetails();
		
		//$this->totals->setProjectTotals($this->id);
		
	}
	
	private function setReceiptSummaryByType(){

		$costs = openTable('receipt-info','displayListTable');
		
		if ($this->totals->receipts->count > 0){
			$heading = wrapTh('Receipt Type');
			$heading .= wrapTh('Received');
			$costs .= wrapTr($heading);
		
			$s = new ReceiptSQL;
			$sql = $s->summaryProjectReceiptype($this->id, 'yes');
			
			//global $conn;
			$result = $this->sql->getResult($sql);
			
			
			//$result = dbGetResult($sql);
			if($result){
		  	while ($row = $result->fetch_assoc())
			{	
				$type = ($row["receipt_type"]);
				$costActual = $row["sum_cost_actual"];
				$item = wrapTd($type);
				$item .= wrapTd($costActual);
				$costs .= wrapTr($item);
			}
			$result->close();
			}
			
			$item = wrapTh('Totals');
			$item .= wrapTd($this->receiptsCost);
			$costs .= wrapTr($item);
		} else {
			$costs .= wrapTr(wrapTh('No Income Received'));
		}
		$costs .= closeTable();
		$this->receiptsSummary = $costs;
		
	}

	protected function makePageTitle(){
		if ($this->pageMode != 'ADD'){
			$heading = 'Project: '.$this->f->name->value();
		} else {
			$heading = 'Add New Project';
		}
		$this->_pageTitle = $heading;
	}
	
	protected function display(){
		$detail = parent::display();
		
		/*
		$detail .= openDisplayDetails();
		$detail .= $this->totals->display();
		
		//taskList constructor has no args
		//need to set parentId to current project
		 $tasks = new taskList('VIEW', 0, $this->id);
		 $tasks->setPaging($this->resultPage,10);
		 $link = $this->links->detail('VIEW',$this->id);
		 $detail .= $tasks->getListing($link);
		 $detail .= closeDisplayDetails();
		 */
		 return $detail;
	}
	
	public function options(
		$selected = 0, 
		$id = 'id-type',
		$caption = 'use-entity'){
		
		if ($caption == 'use-entity'){
			$c = $this->entityTitle;
		} else {
			$c = $caption;
		}
	
		$sql = $this->sql->options($selected);
		$s = new \html\inputs\selectQuery($id,$selected,$sql, $c);
		$s->defaultOption(0,'-No '.$this->entityTitle);
		return $s;
		
	}
		
	public function optionsByType(
		$selected = 0, 
		$id = 'id-project',
		$typeId = 0,
		$caption = 'use-entity'){
		
		if ($caption == 'use-entity'){
			$c = $this->entityTitle;
		} else {
			$c = $caption;
		}
	
		$sql = $this->sql->optionsByType($typeId);
		$s = new \html\inputs\selectQuery($id,$selected,$sql, $c);
		$s->defaultOption(0,'-No '.$this->entityTitle);
		return $s;
		
	}

	public function getProjectName($id){
		$sql = 'select name from projects ';
		$sql .= 'where id = '.$id;
		$name = $this->sql->getScalar($sql,'name','[project name]');
		return $name;
	}


	protected function setDefaults(){
		if ($this->pageMode == 'ADD'){
	 		$this->f->reset(true);
	 		$this->f->started->set($this->f->currentTimestamp);
	 	}
	}


	public function editForm(){

		$url = $this->links->request->getUrlEntitySave($this->f->id->value(),0,0);
		$this->edit = new \application\forms\inputForm($url->print(), $this->entityTitle,$this->pageMode,$this->entity,true);
		
		$this->edit->required->input($this->f->name);
		
		$m = new \application\entities\reference\projectType;
		$select = $m->options($this->f->type->id->value(),$this->f->type->id->env->variable());
		$this->edit->required->inputChoice($this->f->type->id,$select->print());

		$this->edit->required->input($this->f->started);
		$this->edit->required->input($this->f->priority);
		$this->edit->optional->input($this->f->pctDone);
		
		$m = new \application\entities\reference\location;
		$select = $m->options($this->f->location->value(),$this->f->location->id->env->variable(),'Location');
		$this->edit->optional->inputChoice($this->f->location->id,$select->print());
		
		if ($this->idParent > 0){
			$this->f->parent->set($this->idParent);
		}
		
		$select = $this->options($this->f->parent->value(),$this->f->parent->id->env->variable(),'Parent Project');
		$this->edit->optional->inputChoice($this->f->parent->id,$select->print());
		
		
		$this->edit->optional->input($this->f->showAlways);
		
		$this->edit->optional->input($this->f->description);
		$this->edit->optional->input($this->f->summary);
		$this->edit->optional->input($this->f->purpose);
		$this->edit->optional->input($this->f->goals);
		$this->edit->optional->input($this->f->lessons);

		$this->edit->optional->input($this->f->hoursEstimated);
		$this->edit->optional->input($this->f->hoursNotes);
		//$this->edit->optional->input($this->f->hoursActual);
		$this->edit->optional->input($this->f->budgetEstimated);
		$this->edit->optional->input($this->f->budgetNotes);

		$this->edit->hidden->inputHidden($this->f->id);
		//$this->edit->hidden->inputHidden($this->f->parent->id);
		$this->edit->setRequestMode($this->pageMode);
		$this->edit->setSubmitButtons();
		
		return $this->edit->print();
		
	}

    public function UpdateTaskSummary(){
		
		//refresh current project task summary values
		$this->setTaskSummary();
		if ($this->totals->tasks->count > 0){
		
			$sql = " update projects p ";
			$sql .= " set p.pct_done = ".$this->totals->tasks->pctDone.", ";
			$sql .= " p.updated = CURRENT_TIMESTAMP, ";
			$sql .= " p.hours_estimated = ".$this->totals->tasks->estimated.",  ";
			$sql .= " p.hours_actual = ".$this->totals->tasks->actual." ";
			$sql .= " where p.id = ".$this->id." ";
			
			$result = $this->sql->runStatement($sql);
	
		}
	}


	protected function copyProject(){
		$sourceId = $this->id;
		$copyId = 0;
		
			$sql = $this->sql->copy($sourceId);
			
			$result = $this->sql->runStatement($sql);
			$copyId = $this->sql->getInsertedId();
			
			$sql = copyTasks($sourceId, $copyId);
			$result = $this->sql->runStatement($sql);
		
			//reset page mode from COPY to EDIT
			//continue in setdetails using the copied id
			$this->setId($copyProjectId);
			$this->setPageMode('EDIT');
	}


	protected function saveUpdate(){
	
			$sql = " UPDATE projects AS p ";
			$sql .= " SET ";
			$sql .= " p.name = '".$this->f->name->value()."', ";
			$sql .= " p.location_id = ".$this->f->location->value().", ";
			$sql .= " p.priority = ".$this->f->priority->value().", ";
			$sql .= " p.pct_done = ".$this->f->pctDone->value().", ";
			//$sql .= " p.started = '".$this->f->started->value()."', ";			
			$sql .= " p.updated = CURRENT_TIMESTAMP, ";

			$sql .= " p.show_always = '".$this->f->showAlways->value()."', ";
			$sql .= " p.location_id = ".$this->f->location->value().", ";
			$sql .= " p.type_id = ".$this->f->type->id->value().", ";
			$sql .= " p.parent_id = ".$this->f->parent->id->value().", ";
			
			$sql .= " p.hours_estimated = ".$this->f->hoursEstimated->value().", ";
			$sql .= " p.budget_estimated = ".$this->f->budgetEstimated->value().", ";
			$sql .= " p.hours_notes = '".$this->f->hoursNotes->value()."', ";
			$sql .= " p.budget_notes = '".$this->f->budgetNotes->value()."', ";
		
			$sql .= " p.description = '".$this->f->description->value()."', ";
			$sql .= " p.purpose = '".$this->f->purpose->value()."', ";
			$sql .= " p.goals = '".$this->f->goals->value()."', ";
			$sql .= " p.lessons_learned = '".$this->f->lessons->value()."', ";
			$sql .= " p.summary = '".$this->f->summary->value()."' ";
			$sql .= " WHERE p.id = ".$this->id."  ";			
			
			$result = $this->sql->runStatement($sql);
			
	}
			
	protected function saveInsert(){
	
			$sql = " INSERT INTO projects ";
			$sql .= " (name, ";
			$sql .= " parent_id, ";
			$sql .= " location_id, ";
			$sql .= " type_id, ";
			$sql .= " priority, ";
			$sql .= " pct_done, ";
			$sql .= " hours_estimated, ";
			$sql .= " budget_estimated, ";
			$sql .= " show_always, ";
			$sql .= " started, ";
			$sql .= " updated, ";
			$sql .= " description, ";
			$sql .= " hours_notes, ";
			$sql .= " budget_notes, ";
			$sql .= " summary, ";
			$sql .= " lessons_learned, ";
			$sql .= " goals, ";
			$sql .= " purpose) ";
			$sql .= " VALUES (";
			$sql .= "'".$this->f->name->value()."', ";
			$sql .= " ".$this->f->parent->value().", ";
			$sql .= " ".$this->f->location->value().", ";
			$sql .= " ".$this->f->type->value().", ";
			$sql .= " ".$this->f->priority->value().", ";
			$sql .= " ".$this->f->pctDone->value().", ";
			$sql .= " ".$this->f->hoursEstimated->value().", ";
			$sql .= " ".$this->f->budgetEstimated->value().", ";
			$sql .= "'".$this->f->showAlways->value()."', ";
			//$sql .= " '".$this->f->started->value()."', ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= "'".$this->f->description->value()."', ";
			$sql .= "'".$this->f->hoursNotes->value()."', ";
			$sql .= "'".$this->f->budgetNotes->value()."', ";
			$sql .= "'".$this->f->summary->value()."', ";
			$sql .= "'".$this->f->lessons->value()."', ";
			$sql .= "'".$this->f->goals->value()."', ";
			$sql .= "'".$this->f->purpose->value()."') ";
			
			$result = $this->sql->runStatement($sql);
			
			$this->id = $this->sql->getInsertedId();
	
	}
	
} 
?>
