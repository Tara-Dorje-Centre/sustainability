<?php
namespace application\entities\projects;

class taskList extends \application\entityList{

	public $periodicTasks = 'NO';
	public $taskStatus = 'INCOMPLETE';
	public $statusComplete = false;
	public function __construct(){
		parent::__construct();
		$this->entityTitle = 'Tasks';
		$this->base = new task();

	}
	
	public function getRequestArguments(){
		parent::getRequestArguments();
		//push identifiers to base object
		//sets quickEdit form default idParent
		$this->base->setIdentifiers($this->pageMode,$this->id,$this->idParent,$this->idType);
		
		$p = $this->_GET('periodic-tasks','NO');
		$this->setPeriodic($p);

		$s = $this->_GET('task-status','INCOMPLETE');
		$this->setStatus($s);
		
	}
	
	
	public function setPeriodic($periodic = 'NO'){
		$this->periodicTasks = $periodic;
		$this->base->setPeriodic($periodic);
	}
	
	public function setStatus($status = 'INCOMPLETE'){
		$this->taskStatus = $status;
		$this->base->setStatus($status);
		
		if ($status == 'COMPLETE'){
			$this->statusComplete = true;
		} else {
			$this->statusComplete = false;
		}
	}
	
	protected function makePageTitle(){
		$title = 'Periodic Tasks: ';
		$br = new \html\_br();
		if ($this->periodicTasks == 'NO'){
			$p = new project();
			$name = $p->getProjectName($this->idParent);
			$title = 'Project: '.$name.$br->print();
			$title .= 'All Tasks';
		} else {
		
			$title .= $this->taskStatus;
		}
		$this->_pageTitle = $title;
	}
	
	
	protected function makePageMenu(){
		$s = new \application\links\systemMenuLinks();
		$this->base->links->addLink($s->modules());
		$this->base->links->addLink($s->reference());
		
		
		$p = new links\projectLinks();
		
		if ($this->periodicTasks == 'NO'){
			$this->base->links->addLink($p->view('View Project',$this->idParent));
			$this->base->links->addLink($this->base->links->list('List Tasks',0,$this->idParent,0));
			$this->base->links->addLink($this->base->links->add('New Task',$this->idParent));

		} else {
			$this->base->links->addLink($this->base->links->periodicTasks(!$this->statusComplete));
			$this->base->links->addLink($p->contextList('Active Projects'));
		}
		$this->_pageMenu = $this->base->links->print();
	}

	
	private function getPeriodicTasksComplete(){
		$complete = 'NO';
		if ($this->statusComplete == true){
			$complete = 'YES';
		}
		return $complete;		
	}
	
	public function setFoundCount(){
	
		if ($this->periodicTasks == 'YES'){
			$sql = $this->base->sql->countPeriodic($this->getPeriodicTasksComplete());
		} else {
			$sql = $this->base->sql->countProject($this->idParent);
		}
		
		$this->found = $this->base->sql->getCount($sql,'count_details');
		
	}
	
	public function listingSQL(){
	
		if ($this->periodicTasks == 'YES'){
			$sql = $this->base->sql->listPeriodic($this->getPeriodicTasksComplete(),$this->resultPage,$this->perPage);	
		} else {
			$sql = $this->base->sql->listProject($this->idParent,$this->resultPage,$this->perPage);
		}
		
		return $sql;
	}
	
	//override listing start 
	//to hide quickedit on periodic tasks
	protected function listingStart(\application\links\url $altUrl = NULL){

		$paging = $this->base->links->pagedListing($altUrl, $this->found,$this->resultPage,$this->perPage,$this->id, $this->idParent);	
		$add = '';
		if ($this->periodicTasks == 'NO'){
			$add = $this->base->addForm($this->idParent);	
		}
		$entity = $this->base->entity;
		$legend = $this->entityTitle.':  Listing';
		$this->_display = new \html\displayList($entity,$paging,$legend,$add,'none');


		if ($this->periodicTasks == 'YES'){
			$this->base->f->project->listEnabled(true);
		}

	}
	
	
	
		
}
?>
