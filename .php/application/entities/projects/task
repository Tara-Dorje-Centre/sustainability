<?php
namespace application\entities\projects;

class task extends \application\entity{
	
	public $periodicTasks = 'NO';
	public $taskStatus = 'INCOMPLETE';
	public $statusComplete = false;
	public $resultsPageActivity = 1;
	//public $resultsPageMeasure = 1;
	//public $resultsPageMaterial = 1;
	//public $resultsPageReceipt = 1;
	
	public function __construct(){
		parent::__construct();
	
		$this->entity = 'task';
		$this->entityTitle = 'Task';
	
		$this->f = new forms\taskFields();
		$this->f->setEntity($this->entity);
		$this->sql = new sql\taskSQL();
		$this->links = new links\taskLinks();
		//$this->totals = new forms\summaryTotals();
	}
	
	public function getRequestArguments(){
		parent::getRequestArguments();

		$_SESSION['currentTaskId'] = $this->id;
		
		if ($this->id > 0 AND $this->idParent == 0){
			$this->idParent = $this->getProjectId($this->id);
		}
	}
	
	
	public function setPeriodic($periodic = 'NO'){
		$this->periodicTasks = $periodic;
	}
	
	public function setStatus($status = 'INCOMPLETE'){
		$this->taskStatus = $status;
		if ($status == 'COMPLETE'){
			$this->statusComplete = true;
		} else {
			$this->statusComplete = false;
		}
	}
	
	public function listHeading($periodicTasks = 'NO'): \html\_tr{
		$tr = new \html\_tr('table-headings');
		$th = new \html\_th($this->entityTitle);

		$tr->addContent($th->print());
		$tr->addContent($this->f->listCaption());
		
		$th = new \html\_th('Hotlinks');
		$tr->addContent($th->print());
		
		if ($this->periodicTasks != 'NO'){
			$th = new \html\_th('Project');
			$tr->addContent($th->print());
		}
		return $tr;
	}
	
	
	public function listRowHotLinks(){
		$a = new links\activityLinks();
		$link = $a->add('New Activity',$this->f->id->value());
		return $link->print();
	}
	
	protected function listRowProjectLink(){
		$p = new links\projectLinks();
		$link = $p->view($this->f->project->name->value(),$this->f->project->id->value());
		return $link->print();
	}
	
	
	public function listRowFormat(){
		
		$cssItem = $this->f->highlight->value();
		if ($this->f->hoursActual->value() == 0){
			$cssItem = 'highlight-yellow';
		}
	
		$tr = new \html\_tr($cssItem);
		
		$td = new \html\_td();
		$td->addContent($this->listRowLink());
		$tr->addContent($td->print());
		
		$tr->addContent($this->f->listDetail());
		
		$td = new \html\_td();
		$td->addContent($this->listRowHotLinks());
		$tr->addContent($td->print());
		
		if ($this->periodicTasks == 'YES'){
			$td = new \html\_td();
			$td->addContent($this->listRowProjectLink());
			$tr->addContent($td->print());
		}
		

		return $tr;
	}
	
	
	
	public function setDetails(){
		if ($this->pageMode == 'COPY'){
			$this->copyTask();
		}
		
		parent::setDetails();
	}
	
	public function setPagingDetails(
		$pageActivity = 1){
		$this->resultsPageActivity = $pageActivity;
	}
	
	public function getProjectId($taskId){
		$sql = $this->sql->getProjectId($taskId);
		$id = $this->sql->getScalar($sql,'project_id',0);
		return $id;
	}
	
	public function getProjectName($taskId){
		$sql = $this->sql->getProjectName($taskId);
		$name = $this->sql->getScalar($sql,'name',0);
		return $name;
	}
	
	public function getTaskName($taskId){
		$sql = $this->sql->getTaskName($taskId);
		$name = $this->sql->getScalar($sql,'name',0);
		return $name;
	}
	
	public function getTaskHoursEstimated($taskId){
		$sql = $this->sql->getTaskHoursEstimated($taskId);
		$hours = $this->sql->getScalar($sql,'hours_estimated',0);
		return $hours;
	}
	
	
	protected function makePageTitle(){
		$br = new \html\_br();
		$p = new project();
		$name = 'Project: '.$p->getProjectName($this->idParent);
		$title = $name.$br->print();

		if ($this->pageMode != 'ADD'){
			$title .= $this->pageMode.' Task: '.$this->f->name->value();
		} else {
			$title .= 'Add New Task.';
		}

		$this->_pageTitle = $title;	
	}
	 
	protected function display(){
		$detail = parent::display();
		//$detail .= $this->totals->display();
		
		//display activitylist with correct paging link
		$a = new activityList();
		$a->idParent = $this->id;
		$a->base->idParent = $this->id;
		$a->setFoundCount();
		$a->setPaging($this->resultPage,10);
		$u = $this->links->viewUrl($this->id);
		$detail .= $a->getListing($u);
		 return $detail;
	}
	
	public function optionsByProject(
		$selected = 0, 
		$id = 'id-project',
		$projectId = 0,
		$caption = 'use-entity',
		$onChangeJS = null){
		
		if ($caption == 'use-entity'){
			$c = $this->entityTitle;
		} else {
			$c = $caption;
		}
	
		$sql = $this->sql->optionsByProject($projectId);
		$s = new \html\inputs\selectQuery($id,$selected,$sql, $c, $onChangeJS);
		$s->defaultOption(0,'-No '.$this->entityTitle);
		return $s;
		
	}
	
	
	protected function nextTaskOrder(){
		$sql = $this->sql->countProject($this->idParent);
		$count = $this->sql->getCount($sql, 'count_details');
		$count += 1;
		return $count;
	}
	
	protected function setDefaults(){
		if ($this->pageMode == 'ADD'){
	 		$this->f->reset(true);
	 		$this->f->taskOrder->set($this->nextTaskOrder());
	 		$this->f->started->set($this->f->currentTimestamp);
	 		
	 		$p = new project();
	 		$locationId = $p->getLocationId($this->idParent);
	 		$this->f->location->id->set($locationId);
	 		
	 	}
	}
	
	public function editForm(){
		if ($this->idParent > 0){
			$this->f->project->set($this->idParent);
		}
		$url = $this->links->request->getUrlEntitySave($this->f->id->value(),$this->f->project->id->value(),0);
		$this->edit = new \application\forms\inputForm($url->print(), $this->entityTitle,$this->pageMode,$this->entity,true);
		
		$this->edit->required->input($this->f->taskOrder);
		$this->edit->required->input($this->f->name);
		$this->edit->required->input($this->f->started);
		$this->edit->required->br();

		$m = new \application\entities\reference\taskType;
		$select = $m->options($this->f->type->id->value(),$this->f->type->id->env->variable());
		$this->edit->required->inputChoice($this->f->type->id,$select->print());


		$this->edit->required->input($this->f->hoursEstimated);
		$this->edit->required->input($this->f->pctDone);
		$this->edit->required->br();
		
		$m = new \application\entities\reference\location;
		$select = $m->options($this->f->location->value(),$this->f->location->id->env->variable(),'Location');
		$this->edit->required->inputChoice($this->f->location->id,$select->print());
		
		$m = new project();
		$select = $m->options($this->f->project->value(),$this->f->project->id->env->variable(),'Parent Project');
		$this->edit->required->inputChoice($this->f->project->id,$select->print());
		
		$this->edit->optional->input($this->f->description);
		$this->edit->optional->input($this->f->summary);
		

		$this->edit->optional->input($this->f->hoursNotes);
		$this->edit->required->br();
		
		/*
		$tooltip = 'Add activity details to record hours';

		if ($this->totals->materials->count > 0) {
			if ($_SESSION['is-admin'] == 'yes'){
				//current user is admin, allow editing approvals
				$this->edit->optional->input($this->f->materialsAuthProject);
				if ($this->f->materialsAuthProject == 'no'){
					$this->f->materialsAuthBy->set($_SESSION['login-name']);
				}
				$this->edit->optional->input($this->f->materialsAuthBy);
			} else {
				//materials present but user cannot edit approvals
				$this->edit->optional->addContent('Materials Approved:'.$this->f->materialsAuthProject->value());

				$this->edit->hidden->inputHidden($this->f->materialsAuthProject);
				$this->edit->hidden->inputHidden($this->f->materialsAuthBy);	
			}
		} else {
			//no materials under task, dont show authorization fields
			$this->edit->hidden->inputHidden($this->f->materialsAuthProject);
			$this->edit->hidden->inputHidden($this->f->materialsAuthBy);	
			//$this->edit->oprtional->addContent('No Task Materials');
		}
		//$fields .= captionedInput('Costs', $input);


		if ($this->receiptCount > 0) {
			if ($_SESSION['is-admin'] == 'yes'){
				//current user is admin, allow editing approvals
				$this->edit->optional->input($this->f->receiptsAuthProject);
				if ($this->f->receiptsAuthProject == 'no'){
					$this->f->receiptsAuthBy->set($_SESSION['login-name']);
				}
				$this->edit->optional->input($this->f->receiptsAuthBy);
				
			} else {
				//receipts present but user cannot edit approvals
				$this->edit->optional->addContent('Receipts Approved:'.$this->f->materialsAuthProject->value());
				$this->edit->hidden->inputHidden($this->f->receiptsAuthProject);
				$this->edit->hidden->inputHidden($this->f->receiptsAuthBy);
			}
		} else {
			//no receipts under task, dont show authorization fields
			$this->edit->hidden->inputHidden($this->f->receiptsAuthProject);
			$this->edit->hidden->inputHidden($this->f->receiptsAuthBy);	
			//$optional->addContent('No Task Receipts');
		}
		//$fields .= captionedInput('Receipts',$input);		
		
		*/
		
		$this->edit->hidden->inputHidden($this->f->id);
		//$this->edit->hidden->inputHidden($this->f->project->id);
		$this->edit->setRequestMode($this->pageMode);
		$this->edit->setSubmitButtons();
		
		return $this->edit->print();
		
	}
	
	public function updateActivitySummary(){	
		
		$this->summarizeActivity();
				
		$sql = " UPDATE tasks as t ";
		$sql .= " SET ";
		$sql .= " t.updated = CURRENT_TIMESTAMP, ";		
		$sql .= " t.hours_actual = 	".$this->f->hoursActual->value().", ";
		$sql .= " t.hours_estimated = ".$this->f->hoursEstimated->value()." ";
		$sql .= " WHERE t.id = ".$this->f->id->value()." ";
		
		$result = dbRunSQL($sql);

		$this->project->UpdateTaskSummary();

	}

	public function resetMaterialsAuthorization(){	
		$this->f->materialsAuthProject->set('no');
		$this->f->materialsAuthBy->set('Not Approved');
		$project = $this->f->materialsAuthProject->value();
		$by = $this->f->materialsAuthBy->value();
		
		$sql = $this->sql->updateMaterialsAuth($this->f->id->value, $project, $by);
		
		$result = dbRunSQL($sql);
		
		$this->setMaterialsActualCost();
	}
	
	private function setMaterialsActualCost(){
		if ($this->f->materialsAuthProject == 'yes'){
			$sql = " UPDATE materials as m ";
			$sql .= " SET m.cost_actual = m.cost_estimated ";
			$sql .= " WHERE m.task_id = ".$this->f->id->value()." ";
		} else {
			$sql = " UPDATE materials as m ";
			$sql .= " SET m.cost_actual = 0 ";
			$sql .= " WHERE m.task_id = ".$this->f->id->value()." ";			
		}
		$result = dbRunSQL($sql);
	}

	public function resetReceiptsAuthorization(){	
		$this->receiptsAuthProject = 'no';
		$this->receiptsAuthBy = 'Not Approved';
		
		$project = $this->f->receiptsAuthProject;
		$by = $this->f->receiptsAuthBy;
		
		$sql = $this->sql->updateReceiptsAuth($this->f->id->value(), $project, $by);
		$result = dbRunSQL($sql);
	}
	
	protected function afterCollectPostValues(){
	
	}

	private function copyTask(){
	
		$idSource = $this->id;
		
		$sql = $this->sql->copy($idSource);

		$result = dbRunSQL($sql);
		$idCopy = dbInsertedId();
		
			$this->id = $idCopy;
			$this->pageMode = 'EDIT';

	}

	protected function saveUpdate(){
			$sql = " UPDATE tasks AS t ";
			$sql .= " SET ";
			$sql .= " t.project_id = ".$this->f->project->id->value().", ";
			$sql .= " t.task_order = ".$this->f->taskOrder->value().", ";
			$sql .= " t.location_id = ".$this->f->location->id->value().", ";
			$sql .= " t.started = '".$this->f->started->value()."', ";
			$sql .= " t.name = '".$this->f->name->value()."', ";
			$sql .= " t.description = '".$this->f->description->value()."', ";
			$sql .= " t.summary = '".$this->f->summary->value()."', ";
			$sql .= " t.updated = CURRENT_TIMESTAMP, ";
			$sql .= " t.type_id = ".$this->f->type->id->value().", ";
			$sql .= " t.hours_estimated = ".$this->f->hoursEstimated->value().", ";
			$sql .= " t.pct_done = ".$this->f->pctDone->value().", ";
			$sql .= " t.hours_notes = '".$this->f->hoursNotes->value()."', ";
			$sql .= " t.materials_auth_project = '".$this->f->materialsAuthProject->value()."', ";
			$sql .= " t.materials_auth_by = '".$this->f->materialsAuthBy->value()."', ";
			$sql .= " t.receipts_auth_project = '".$this->f->receiptsAuthProject->value()."', ";
			$sql .= " t.receipts_auth_by = '".$this->f->receiptsAuthBy->value()."' ";

			$sql .= " WHERE t.id = ".$this->f->id->value()." ";	
		
			$result = $this->sql->runStatement($sql);
			
			//$this->setMaterialsActualCost();			
			//$this->project->UpdateTaskSummary();
	}
	
	protected function saveInsert(){
			$sql = " INSERT INTO tasks ";
			$sql .= " (name, ";
			$sql .= " project_id, ";
			$sql .= " location_id, ";
			$sql .= " type_id, ";			
			$sql .= " task_order, ";
			$sql .= " description, ";
			$sql .= " summary, ";
			$sql .= " started, ";
			$sql .= " updated, ";
			$sql .= " hours_estimated, ";
			//$sql .= " hours_actual, ";
			$sql .= " hours_notes, ";
			$sql .= " materials_auth_project, ";
			$sql .= " materials_auth_by, ";
			$sql .= " receipts_auth_project, ";
			$sql .= " receipts_auth_by) ";

			$sql .= " VALUES (";
			$sql .= " '".$this->f->name->value()."', ";
			$sql .= " ".$this->f->project->id->value().", ";
			$sql .= " ".$this->f->location->id->value().", ";		
			$sql .= " ".$this->f->type->id->value().", ";			
			$sql .= " ".$this->f->taskOrder->value().", ";
			$sql .= " '".$this->f->description->value()."', ";
			$sql .= " '".$this->f->summary->value()."', ";
			$sql .= " '".$this->f->started->value()."', ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= " ".$this->f->hoursEstimated->value().", ";
			//$sql .= " 0, ";
			$sql .= " '".$this->f->hoursNotes->value()."', ";
			$sql .= " '".$this->f->materialsAuthProject->value()."', ";
			$sql .= " '".$this->f->materialsAuthBy->value()."', ";
			$sql .= " '".$this->f->receiptsAuthProject->value()."', ";
			$sql .= " '".$this->f->receiptsAuthBy->value()."') ";
			
			$result = $this->sql->runStatement($sql);
			
			$this->id = $this->sql->getInsertedId();
			$this->f->id->set($this->id);
			//$this->project->UpdateTaskSummary();
			
	}
	
}
?>
