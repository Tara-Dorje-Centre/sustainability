<?php
namespace application\entities\projects\links;

class measureLinks extends \application\links\entityLinks {
	public function __construct(){
		$context = 'measure';
		parent::__construct($context);
	}
	public function setRequest(){
		$this->request = new measureRequest($this->entityContext,$this->pagePortal);
	}
	
	public function urlMeasureList($idActivity,$idTask,$idProject,$displayLevel='ACTIVITY'){
		$url = $this->request->getUrlMeasureList($idActivity,$idTask,$idProject,$displayLevel);
		return $url;
	}
	
	
	public function projectMeasures($idProject){
		$u = $this->urlMeasureList(0, 0, $idProject,'PROJECT');
		$caption = 'Project Measures';
		return $this->getLink($u,$caption);
	}
	
	public function taskMeasures($idTask){
		$u = $this->urlMeasureList(0, $idTask, 0,'TASK');
		$caption = 'Task Measures';
		return $this->getLink($u,$caption);
	}
	
	public function activityMeasures($idActivity){
		$u = $this->urlMeasureList($idActivity, 0, 0,'ACTIVITY');
		$caption = 'Activity Measures';
		return $this->getLink($u,$caption);
	}
	
	
	public function pagedListing(\application\links\url $altUrl = NULL, $count = 0, $page = 1, $rows = 10, $idActivity = 0, $idTask = 0,$idProject = 0,$displayLevel='ACTIVITY'){
		$p = new \application\links\linkMenuPaged($rows,'measure-results-page');
		if (is_null($altUrl)){
			$url = $this->urlMeasureList($idActivity,$idTask,$idProject,$displayLevel);
		} else {
			$url = $altUrl;
		}
		
		return $p->makePagedLinks($url, $count,$page);
	}
	



	//?summaries for project and task and activity

}
?>
