<?php
namespace application\entities\projects\links;



class activityLinks extends \application\links\entityLinks {
	public function __construct(){
		$context = 'activity';
		parent::__construct($context);
	}
	public function setRequest(){
		$this->request = new activityRequest($this->entityContext,$this->pagePortal);
	}
	
	public function urlActivityList($idParent, $idType, $showCalendar, $myActivity, $idTask,$idProject){
		$url = $this->request->getUrlActivityList('LIST',0,$idParent,$idType, $showCalendar, $myActivity,$idTask,$idProject);
		return $url;
	}
	
	public function urlActivityDetail($action, $id, $idParent,$showCalendar,$myActivity,$idTask,$idProject){
		$url = parent::urlDetail($action,$id,$idParent);
		$this->setActivityParametersDetail($url, $showCalendar, $myActivity, $idTask,$idProject);
		return $url;
	}	
	
	public function myActivity(){
		$showCalendar = 'NO';
		$myActivity = 'YES';
		$u = $this->urlActivityList(-1, 0, $showCalendar, $myActivity, 0, 0);
		$caption = 'My History';
		return $this->getLink($u, $caption);
	}
	public function groupActivity(){
		$showCalendar = 'NO';
		$myActivity = 'GROUP';
		$u = $this->urlActivityList(-1, 0, $showCalendar, $myActivity, 0, 0);
		$caption = 'Group History';
		return $this->getLink($u,$caption);
	}
	public function myCalendar(){
		$showCalendar = 'YES';
		$myActivity = 'YES';
		$u = $this->urlActivityList(-1, 0, $showCalendar, $myActivity, 0, 0);
		$caption = 'My Calendar';
		return $this->getLink($u,$caption);
	}
	public function groupCalendar(){
		$showCalendar = 'YES';
		$myActivity = 'GROUP';
		$u = $this->urlActivityList(-1, 0, $showCalendar, $myActivity, 0, 0);
		$caption = 'Group Calendar';
		return $this->getLink($u,$caption);
	}
	
	public function projectActivity($idProject){
		$showCalendar = 'NO';
		$myActivity = 'PROJECT';
		$u = $this->urlActivityList(-1, 0, $showCalendar, $myActivity, 0,$idProject);
		$caption = 'Project History';
		return $this->getLink($u,$caption);
	}
	
	public function projectCalendar($idProject){
		$showCalendar = 'YES';
		$myActivity = 'PROJECT';
		$u = $this->urlActivityList(-1, 0, $showCalendar, $myActivity, 0,$idProject);
		$caption = 'Project Calendar';
		return $this->getLink($u,$caption);
	}
	
	
	public function taskActivity($idTask){
		$showCalendar = 'NO';
		$myActivity = 'TASK';
		$u = $this->urlActivityList(-1, $idTask, $showCalendar, $myActivity, $idTask,0);
		$caption = 'Task History';
		return $this->getLink($u,$caption);
	}
	public function taskCalendar($idTask){
		$showCalendar = 'YES';
		$myActivity = 'TASK';
		$u = $this->urlActivityList(-1, $idTask, $showCalendar, $myActivity, $idTask,0);
		$caption = 'Task Calendar';
		return $this->getLink($u,$caption);
	}

	//override paged listing adding activity arguments
	public function pagedListing(\application\links\url $altUrl = NULL, $count = 0, $page = 1, $rows = 10, $idParent = 0, $showCalendar = 'NO', $myActivity = 'NO',$idTask = 0,$idProject = 0){
		$p = new \application\links\linkMenuPaged($rows,'results-page');
		if (is_null($altUrl)){
			$url = $this->urlActivityList($idTask,0,$showCalendar,$myActivity,$idTask,$idProject);
		} else {
			$url = $altUrl;
		}
		
		return $p->makePagedLinks($url, $count,$page);
	}
	
	
	public function buildCalendarLink($caption,$baseUrl,$year,$month){
		$this->request->setUrlCalendarParameters($baseUrl,$year,$month);
		return $this->getLink($baseUrl,$caption,'calendar-links-item');
	}
	
}
?>
