<?php 
namespace application;

abstract class entity extends baseEntity{
//implements \application\Ientity{
//use sql\connectionFunctions;
	protected $entity;
	protected $entityTitle = 'Undefined Entity';
	protected $site;
	protected $pageSave = 'portal.php';
  	public $f;
    public $sql;
	public $links;
	protected $_display;
 	protected $_edit;
 	public $_submit;
	public $_reset;
	public $_mode;

 	public function __construct(){
		parent::__construct();
	}
	final public function printRequest(){
		$this->getRequestArguments();
		$this->setDetails();
		$this->printPage();
	}
	public function getRequestArguments(){
		$this->getRequestIdentifiers();
		$this->getRequestPaging();
		$this->getRequestCalendar();
	}
	
	protected function makePageMenu(){
		$s = new \application\links\systemMenuLinks();
		$this->links->menu->addLink($s->modules());
		$this->links->menu->addLink($s->reference());
		$this->links->editingLinks($this->pageMode,$this->id,$this->idParent,$this->idType);
		$this->_pageMenu = $this->links->menu->print();
	}
	
	protected function makePageTitle(){
		$this->_pageTitle = $this->entityTitle;
	}
	
	abstract public function editForm();
	/*implement per entity*/
	
	
	final protected function setEntity($entity,$title){
	 	$this->entity = $entity;
	 	$this->entityTitle = $title;
	}
	public function setDetails(){
		if ($this->id > 0){
			$sql = $this->sql->info($this->id);
			global $conn;
			$result = $conn->getResult($sql);
			//$result = $this->sql->getResult($sql);
			
			if($result){
				while ($row = $result->fetch_assoc())
				{	
					$this->f->fetch($row);
				}
				$result->close();
				$this->getFieldIds();
			}
			
		}
		
	}	
	
	public function options($selected, $id = 'id-type'){
		$sql = $this->sql->options($selected);
		$s = new \html\inputs\selectQuery($id,$selected,$sql);
		$s->makeDefault(0,'-select '.$this->entityTitle);
		return $s;
	}	
	
	public function optionsField(_field &$f){
		//$m = new receiptType('OPTIONS');
		$s = $this->options($f->value(),$f->env->variable());
		return $f->setSelect($s);
	}
	
	 public function listHeading(): \html\_tr{
		$tr = new \html\_tr('table-headings');

		$tr->makeHeading('table-heading',$this->entityTitle);

		$tr->addContent($this->f->listCaption());
		return $tr;
	}
	
	 protected function listRowLink(){
		return $this->links->viewEdit($this->f->name->value(),$this->f->id->value());
	}
	
	protected function listRowFormat(){
		$tr = new \html\_tr($this->f->highlight->value());

		$tr->makeData($this->listRowLink());
		$tr->addContent($this->f->listDetail());		
		return $tr;
	}
	
	final public function listRow($row){
		$this->f->fetch($row);
		return $this->listRowFormat();
	}

	protected function display(){
		$this->_display = new \html\displayDetails($this->entity,$this->pageMode,$this->titleEntity.':  Details');

		$this->_display->setContent($this->f->displayDetail());

		return $this->_display->print();
	}
	
	
	
	protected function setDefaults(){
		if ($this->pageMode == 'ADD'){
	 		$this->f->reset(true);
	 	}
	}

	 public function addForm($idParent = 0){
		$this->pageMode = 'ADD';
		$this->setDefaults();
		if (!is_null($this->f->parentEntity)){
			$this->f->parentEntity->set($idParent);
		}
		
		$edit = $this->editForm();
		if (is_null($edit)){
		     $edit = '';
		}
		//return $this->editForm();
		return $edit;
	}

	 public function collectPostValues(){
		$this->pageMode = $_POST['mode'];	
		$this->f->setEnvironment('POST');
		$this->f->read();
		$this->getFieldIds();
		$this->echoState(true,'collectPostValues');
	}
				
	protected function getFieldIds(){
		if(!is_null($this->f->id)){
			$this->id = $this->f->id->value();
		}
		if (!is_null($this->f->parentEntity->id->value())){
			$this->idParent = $this->f->parentEntity->id->value();
		}
	}
	
	final public function printPage(){
		$this->echoState(true, 'printPage');
		
		$this->site = new \application\site($this->pageMode);
		if ($this->site->validLogin == true){
			$heading = $this->getPageHeading();
			$details = $this->getPageDetails();
		} else {
		//invalid login state, site will display login form
		//dont run page queries or build objects
			$heading = 'invalid login state';
			$details = 'invalid login state';
		}
		$this->site->set($heading, $details);
		$this->site->print();
	}
	
	final protected function getPageHeading(){
		$this->makePageTitle();
		$this->makePageMenu();
		
		$title = new \html\_div('section-heading-title');
		$menu = new \html\_div('section-heading-menu');
		$title->setContent($this->_pageTitle);
		$menu->setContent($this->_pageMenu);
		$heading = $title->print();
		$heading .= $menu->print();
		return $heading;
	}
	
	protected function getPageDetails(){	
		switch($this->pageMode){
		case 'VIEW':
			$details = $this->display();
			break;
		case 'ADD':
			$details = $this->addForm();
			break;
		case 'EDIT':
			$details = $this->editForm();
			break;
		default:
			$details = $this->display();
		}
			
		return $details;
	}
	
	protected function copy(){
		$this->echoState(true, 'copy');
		printLine('__Entity.copy not overridden');
	}
	
	protected function saveUpdate(){
		$this->echoState(true, 'saveUpdate');
		printLine('__Entity.saveUpdate not overridden in child');
	}
	
	protected function saveInsert(){
		$this->echoState(true, 'saveInsert');
		printLine ('__Entity.saveInsert not overridden in child');
	}
	
	final public function saveChanges(){
		$this->echoState(true, 'saveChanges');
		switch($this->pageMode){
			case 'COPY':
			
			case 'EDIT':
			$this->saveUpdate();
			break;
			case 'ADD':
			$this->saveInsert();
		}
	}
	
	
}


?>
