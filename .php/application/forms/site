<?php 
namespace application;

interface Isite {
	public function set(string $heading = 'page heading', string $details = 'page details');
}

class site extends \html\page
implements Isite{
	public $settings;
	public $validLogin = false;
	protected $pageMode = 'VIEW';

	public function __construct($mode = 'VIEW'){
	
		$this->pageMode = $mode;
		$this->settings = new system\siteSettings();
		$this->verifyLoginState();
	}
	
	public function set(string $heading = 'page heading', string $details = 'page details'){
		$this->settings->setDetails();
		$this->setDocumentValues();
		$links = $this->getLinks();
		parent::setMainLinks($links);
		$this->setContents($heading,$details);	
		$this->setFooterValues();	

	}
	protected function verifyLoginState(){
		if 
		(
			isset($_SESSION['logged-in'])
			 && 
		 	($_SESSION['logged-in'] == true)
		 ){
			$this->validLogin = true;
		}
	}
	
	
	public function setDocumentValues(){
		$title = $this->getTitle();
		$styles = $this->getStyles();
		$scripts = $this->getScripts();
		$onLoad = $this->getOnLoadScripts();
		parent::setDocument($title, $styles, $scripts, $onLoad);
	}
	protected function setFooterValues(){
		$links = $this->getFooterLinks();
		$notices = $this->getFooterNotices();
		$logo = 'none';
		parent::setFooter($links,$notices,$logo);
	}

	protected function getLinks(){
		if ($this->validLogin == false){
			//user is not logged in, siteContent will display login form, display no links
			$content = 'not logged in';
			
		} else {
			
			
			$m = new links\systemMenuLinks('site-menu','LIST','site-menu');
			
			$p = new \application\entities\projects\links\projectLinks();
			
			$t = new \application\entities\projects\links\taskLinks();
			
			$a = new \application\entities\projects\links\activityLinks();
			
			if ($this->settings->f->showPublicSite->value() == 'yes'){
				$m->addLink($m->library());
			}
		
		$m->addLink($m->modules());
		
		if (isset($_SESSION['currentView'])){
		switch($_SESSION['currentView']){
			case 'PERIODIC_TASKS':
				//user just viewed current open tasks;
				$m->addLink($t->periodicTasksOpen());
				break;
			case 'MY_CALENDAR':
				//user just viewed myCalendar;
				$m->addLink($a->myCalendar());
				break;
			case 'GROUP_CALENDAR':
				//user just viewed groupCalendar;
				$m->addLink($a->groupCalendar());
				break;
			case 'MY_ACTIVITY'::
				//user just viewed myActivity;
				$m->addLink($a->myActivities());
				break;
			case 'GROUP_ACTIVITY':
				//user just viewed groupActivity;
				$m->addLink($a->groupActivities());
				break;
			default:
		}
		}
		//always show current open tasks;
		$m->addLink($t->periodicTasksOpen());		
		//always show projects link
		$m->addLink($p->allProjects(false));
		$m->addLink($m->logout());
		
		$content = $m->print();
		
	}
	

	return $content;
}

	protected function setContents($heading,$details){ 

		if ($this->validLogin == false){
			$l = new system\userLogin('LOGIN-FORM');
			$content = $l->loginForm();
		} else {

			//section-heading div commented out to allow section-links to float closer to section details
			//  pageHeading contains section-title and section-links div containers
			//  wrap title and links in section-heading div
			$h = new \html\_div('section-heading');
			$h->setContent($heading);
			$d = new \html\_div('section-details');
			$d->setContent($details);
		
			$content = $h->print();
			$content .= $d->print();
		}
	

		
		parent::setMain($content);
		
	}
	
	protected function getNoticeTiming(){
		
		global $conn, $sessionTime, $sessionTimeZone;
		$conn->setSessionTimeZone();
		$sessionTimeZone = $conn->getSessionTimeZone();
		$sessionTime = $conn->getSessionTime();
		
		$timezone = '';
		$timing = 'Request Time: '.$sessionTime.'(UTC'.$sessionTimeZone.')';
		$t = new \html\_div('display-request-time');
		$t->setContent($timing);
		
		if (isset($_SESSION['client-time-zone'])){
			$timeZone = '@UTC'.$_SESSION['client-time-zone'];	
		} else {
			$timeZone = ' Time Zone set to UTC';	
		}
		$t->addContent($timeZone);
		return $t->print();
	}
	
	protected function getNoticeLoginName(){
		if (isset($_SESSION['login-name'])){
			$loginName = $_SESSION['login-name'];
		} else {
			$loginName = 'Not logged in.';	
		}
		$l = new \html\_div('login-name');
		$l->setContent($loginName);
		return $l->print();
	}
	protected function getNoticeOrg(){
		$o = new \html\_div('site-organization');
		$org = $this->settings->f->organization->value();
		$orgUrl = $this->settings->f->organizationUrl->value();
		
		$year = date('Y',time());
		$copyright = '&copy;'.$year;
		$copyright.= \html\spacer();
		$o->addContent($copyright);
		
		if (($orgUrl == '') || is_null($orgUrl)){
			$content = $org;
		} else {
			$l = new \html\_href($orgUrl, $org, 'menu-links-item', '_blank');
			$content = $l->print();
		}
		$o->addContent($content);
		return $o->print();
	}
	protected function getFooterNotices(){
		$n = new \html\_div('login-notices');
		$n->addContent($this->getNoticeTiming());
		$n->addContent($this->getNoticeLoginName());
		$n->addContent($this->getNoticeOrg());
		return $n->print();
	}

	protected function getFooterLinks(){
		$url = 'https://sourceforge.net/projects/sustainability';
		$text = 'Sustainability OpenSource';
		$l = new \html\_href($url,$text,'menu-links-item','_blank');
		return $l->print();
	}
	
	
	
	
	protected function getOnLoadScripts(){
		//if ($this->validLogin == true){
			//$onLoad = 'none';
		//} else {
			$onLoad='displayClientTime();';
		//}
		return $onLoad;
	//	parent::setOnLoad($onLoad);
	}


	protected function getTitle(){
		if ($this->validLogin == true){
			$title = $this->settings->f->siteTitle->value();
		} else {
			$title = 'Login';
		}
		return $title;
	}
	

	protected function getStyles(){
		//use internal stylesheet
		//$content = $this->buildInternalStyles();

		//use external stylesheet
		$css = new \html\_cssLink('./css/styles.css');
		$content = $css->print();
		
		$override = new \html\_cssLink('./css/override.css');
		$content .= $override->print();
		
		return $content;
		
	}

	protected function getScripts(){
		$js = new \html\_script();
		$js->loadFile('./_siteJavascriptFunctions.inc');		
		return $js->print();
		
	}
	
}

?>
