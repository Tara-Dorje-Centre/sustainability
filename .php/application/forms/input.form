<?php 
namespace application\forms;



class inputForm {
	protected $_form;
	protected $_fields;
	protected $_display;
	protected $_fieldset;
	protected $_context;
	
	protected $entity;
	protected $mode;
	protected $url;
	protected $title;
	protected $useContextMenu = false;
	public $required;
	public $optional;
	public $hidden;
	public $submit;

	public function __construct(string $url,string $title,string $mode, string $entity, bool $useContextMenu = false){
		$this->url = $url;
		$this->title = $title;
		$this->entity = $entity;
		$this->mode = $mode;
		$this->useContextMenu = $useContextMenu;

		$this->setDisplayObjects();
		$this->required = new inputFormSection('form-required','show');
		$this->optional = new inputFormSection('form-optional','hide');
		//force optional fields to start hidden
		$this->optional->setStyle('display:none');
		$this->hidden = new inputFormSection('form-hidden','hide');
		$this->submit = new inputFormSection('form-submit','show');
	}
	protected function setContextMenu(){

		if ($this->useContextMenu == true){
			$elementId = 'form-optional';
			$u = new \application\links\url('#!');
			$js = "toggle('".$elementId."');";

			$l = new \application\links\link($u, '+Options','toggle-link',$js);
			$l->setOnClickScript($js);
			$name = $this->entity.'-context-menu';
			$this->_context = new \html\_div($name,'contextMenu');
			$this->_context->setContent($l->print());
		}	
	}
	protected function setDisplayObjects(){
	
		$name = $this->entity.'-display-'.$this->mode;
		$css = 'display-'.$this->mode;
		$this->_display = new \html\_div($name,$css);
		
		$legend = $this->mode.':  '.$this->title;
		$this->_fieldset = new \html\_fieldset($legend);
		
		$name = $this->entity.'-edit-form';
		$this->_form = new \html\_form($this->url, $name,'editForm');
		
		$name = $this->entity.'-fields';
		$this->_fields = new \html\_div($name,'editFields');
		
		
	}
	
	protected function printSections(){ 
		$this->_fields->addContent($this->required->print());
		$this->_fields->addContent($this->optional->print());
		$this->_fields->addContent($this->submit->print());
		$this->_fields->addContent($this->hidden->print());
	}
	public function setRequestMode($pageMode){
		$mode = new requestPageMode($pageMode);
		$this->hidden->inputHidden($mode);
	}


	public function setSubmitButtons(){
		$_submit = new submitButton('submit','Save'); 
		$_reset = new resetButton('reset','Cancel'); 
		$this->submit->addContent($_submit->button());
		$this->submit->addContent($_reset->button());
	}
	protected function printDisplayObjects(){
	
		if ($this->useContextMenu == true){
			$this->setContextMenu();
			$this->_display->setContent($this->_context->print());
		}
		
		$this->_form->setContent($this->_fields->print());
		$this->_fieldset->setContent($this->_form->print());
		$this->_display->addContent($this->_fieldset->print());
		
	}
	
	public function print(){ 
		$this->printSections();
		$this->printDisplayObjects();
		return $this->_display->print();
	}

}

class _inputForm extends inputForm{

}


?>
