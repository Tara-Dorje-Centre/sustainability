<?php 
namespace application\links;

class linkMenuPaged extends linkMenu{
	protected $pageCount = 1;
	protected $perPage = 10;
	protected $currentPage = 1;
	protected $recordCount = 0;
	protected $info = 'display results';
	protected $paramPaging = 'results-page';
	public function __construct($perPage = 10,string $paramPaging = 'results-page'){
		parent::__construct('paging-linkset','DIV','paging');
		$this->perPage = $perPage;
		$this->paramPaging = $paramPaging;
		$this->setCSS('paging');
	}
	
	protected function setPageCount(){
		$count = $this->recordCount;
		$per = $this->perPage;
	
		if ($per == 0){
			$per = 10;
		}
		$a = ($count/$per);

		if (floor($a) == $a){
			$this->pageCount = $a;
		} else {
			$this->pageCount = floor($a) + 1;
		}
	}
	protected function makePageLink($pageIndex,$caption,$css='paging-links-item'){
		$this->baseUrl->makeParameter($this->paramPaging,$pageIndex);
		$this->baseUrl->makeParameter('per-page',$this->perPage);
		$this->makeLink($this->baseUrl, $caption,$css);
	}
	protected function showResultsInfo(){
		$b = new \html\_br();
		if ($this->pageCount > 1){
			$this->info = 'Found '.$this->recordCount.' results.';
			$this->info .= ' Displaying page '.$this->currentPage.' of '.$this->pageCount;
			$this->info .= $b->print();
		} else {
			$this->info = 'Displaying '.$this->recordCount.' results. ';
		}
		$this->addTextItem($this->info, 'paging-links-text');
	}
	protected function makePrevLink(){
		if ($this->currentPage > 1){
			$caption = 'Prev';
			$pageIndex = $this->currentPage - 1;
			$this->makePageLink($pageIndex, $caption);
		}
	}
	protected function makeNextLink(){
		if ($this->currentPage < $this->pageCount){
			$caption = 'Next';
			$pageIndex = $this->currentPage + 1;
			$this->makePageLink($pageIndex, $caption);
		}
	}
	protected function makeFirstLink($minDisplayPage){
		if ($minDisplayPage > 1){
			$this->makePageLink(1, 'First');
			//$this->addTextItem('...');
		}
	}
	protected function makeLastLink($maxDisplayPage){
		if ($maxDisplayPage < $this->pageCount){
			//$this->addTextItem('...');
			$this->makePageLink($this->pageCount, 'Last('.$this->pageCount.')');
		}
	}
	/*
	protected function getPageRecordRange($pageIndex){
	
			$minRecord = (($pageIndex - 1) * $this->perPage) + 1;
			$maxRecord = $pageIndex * $this->perPage;
			if ($maxRecord > $this->recordCount){
				$maxRecord = $this->recordCount;
			}
			if ($minRecord==$maxRecord){
				$recordRange = $minRecord;
			} else {
				$recordRange = $minRecord.' to '.$maxRecord;
			}
			return $recordRange;
	}
	*/
	public function makePagedLinks(url $u, $recordCount = 1, $currentPage = 1){
		$this->recordCount = $recordCount;
		$this->currentPage = $currentPage;
		$this->echoValue(true, 'recordCount', $this->recordCount,'makePagedLinks');
		$this->echoValue(true, 'currentPage', $this->currentPage,'makePagedLinks');
		$this->setPageCount();
		$this->showResultsInfo();
		$this->baseUrl = $u;
		if ($this->pageCount > 1){
			//skip paging links for single page results
		
		
		//dont print more than four links foreward or backward
		$minDisplayPage = $this->currentPage - 4;
		$maxDisplayPage = $this->currentPage + 4;
		if ($minDisplayPage < 1){
			$minDisplayPage = 1;
		}
		if ($maxDisplayPage > $this->pageCount){
			$maxDisplayPage = $this->pageCount;
		}
		
		$this->makeFirstLink($minDisplayPage);
		$this->makePrevLink();
		
		$i = $minDisplayPage - 1;
		while ($i < $maxDisplayPage){
			$i++;

			if ($i == $this->currentPage){
				//highlight current page with square brackets and skip hyperlink
				$caption = '[Page '.$i.']';
				$css = 'paging-links-item-current';
				$this->addTextItem($caption, $css);
			} else {
				$caption = $i;
				$css = 'paging-links-item';
				$this->makePageLink($i, $caption,$css);
			}
		}
		
		$this->makeNextLink();
		$this->makeLastLink($maxDisplayPage);
		
		}
		return $this->print();
	}
	
}


?>
