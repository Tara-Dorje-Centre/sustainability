<?php
namespace application;
use entities\projects\links as l;
class systemMenu extends \framework\_echo{
	public $displayMode;
	public $year;
	public $month;
	protected $main;
	protected $links;
	protected $modules = array();
	protected $reference = array();
	
	public function __construct(){
		$this->displayMode = new forms\textField('not_used','displayMode','mode');
		$this->year = new forms\numberField('not_used','year','mode');;
		$this->month = new forms\numberField('not_used','month','mode');
		$this->main = new links\systemMenuLinks('section-content-links');
		$this->links = new links\systemMenuLinks('section-heading-links');
	}
	
	
	public function getRequestArguments(){
		$this->displayMode->setEnvironment('GET');
		$this->year->setEnvironment('GET');
		$this->month->setEnvironment('GET');
		$this->displayMode->setDefault('MY_LINKS');
		$this->year->setDefault(0);
		$this->month->setDefault(0);
		$this->displayMode->read();
		$this->year->read();
		$this->month->read();
	}
	public function setDetails($displayMode = 'REFERENCE', $year = 0, $month = 0){
		$this->displayMode->set($displayMode);
		$this->year->set($year);
		$this->month->set($month);

	}
	
	public function PageTitle(){
		$t = new \html\_div('section-heading-title');
		switch($this->displayMode->value()){
			case 'REFERENCE':
			$title = 'Reference';		
			break;	
		case 'CALENDAR':
			$title = 'Calendar';
			break;
		case 'SYSTEM-UPDATES':
			$title = 'System Updates';
			break;
		case 'TESTING':
			$title = 'Testing';
			break;
		case 'MY_LINKS':
			$title = 'My Links';
			break;
		default:
			$title = 'Sustainable Planning Tools';						
		}
		
		$t->setContent($title);
	
		return $t->print();	
	}

	public function PageMenu(){
		

		//$m = new links\systemMenuLinks('section-heading-links');
		return $this->links->getPageMenu();	
	}
	
	public function getPageHeading(){
		$heading = $this->pageTitle();
		$heading .= $this->pageMenu();
		return $heading;
	}	
	protected function loadReferences(){
	
		$e = new entities\reference\links\locationTypeLinks();
		$this->addReference($e);
		$e = new entities\reference\links\locationLinks();
		$this->addReference($e);
		$e = new entities\reference\links\quantityTypeLinks();
		$this->addReference($e);
		$e = new entities\reference\links\measureTypeLinks();
		$this->addReference($e);
		/*$e = new CropLinks();
		$this->addReference($e);*/
		$e = new entities\reference\links\projectTypeLinks();
		$this->addReference($e);
		$e = new entities\reference\links\taskTypeLinks();
		$this->addReference($e);
		$e = new entities\reference\links\activityTypeLinks();
		$this->addReference($e);
		$e = new entities\reference\links\materialTypeLinks();
		$this->addReference($e);
		$e = new entities\reference\links\receiptTypeLinks();
		$this->addReference($e);
		if ($_SESSION['is-admin'] == 'yes'){
		$e = new system\links\userLinks();
		$this->addReference($e);
		$e = new entities\reference\links\userTypeLinks();
		$this->addReference($e);
		$e = new system\links\siteSettingsLinks();
		$this->addReference($e);
		}
	}
	protected function addReference(links\entityLinks $e){
		$this->reference[$e->context] = $e;
	}
	protected function makeReferenceLinks(){
		$this->loadReferences();
		foreach($this->reference as $m){
			$link = $m->contextList();
			$this->main->addLink($link);
		}
	
		$this->main->addLink($this->main->calendars());
	}
	
	
	protected function  makeModuleLinks(){
		$p = new entities\projects\links\projectLinks();
		//$this->main->addLink($p->myProjects());
		$this->main->addLink($p->allProjects());
		
		$t = new entities\projects\links\taskLinks();
		$this->main->addLink($t->periodicTasks());
		
		$a = new entities\projects\links\activityLinks();
		$this->main->addLink($a->groupCalendar());
		$this->main->addLink($a->groupActivity());
	
	}
	
	
	
	protected function makeMyLinks(){
		$p = new entities\projects\links\projectLinks();
		$this->main->addLink($p->myProjects());
		$this->main->addLink($p->allProjects());
		
		$t = new entities\projects\links\taskLinks();
		$this->main->addLink($t->periodicTasks());
		
		$a = new entities\projects\links\activityLinks();
		$this->main->addLink($a->myCalendar());
		$this->main->addLink($a->myActivity());
		
		if (isset($_SESSION['logged-in']) && $_SESSION['logged-in'] == true){
			if ($_SESSION['must-update-pwd'] == 'yes'){
				$this->main->makeSpan('Please update your profile password.');
			}
			$u = new system\links\userLinks();
			$this->main->addLink($u->view('My Profile', $_SESSION['user-id']));
		}
	
	}
	
	
	
	public function printPage(){
		$this->site = new \application\site('MENU');
		if ($this->site->validLogin == true){
			$heading = $this->getPageHeading();
			$details = $this->getPageDetails();
		} else {
		//invalid login state, site will display login form
		//dont run page queries or build objects
			$heading = 'invalid login state';
			$details = 'invalid login state';
		}
		$this->site->set($heading, $details);
		$this->site->print();
	}

	public function getPageDetails(){
	
		$details = $this->display();
		return $details;
		
	}
	
	
	protected function display(){
	$this->echoPrint(true,'start','display');
	$this->echoValue(true,'displayMode', $this->displayMode->value(), 'display');
	
		switch($this->displayMode->value()){
			case 'REFERENCE':
				$content = $this->displayReference();
				break;
			case 'CALENDAR':
				$content = $this->displayCalendar();
				break;
			case 'MY_LINKS':
				$content = $this->displayMyLinks();
				break;
			case 'SYSTEM-UPDATES':
				$content = $this->displaySystemUpdates();
				break;
			case 'TESTING':
				$content = $this->displayTesting();		
				break;				
			default:
				$content = $this->displayModules();
		}
		return $content;
		
	}
	
	private function displayReference(){
		$this->echoPrint(true,'start','displayReference');
		$this->makeReferenceLinks();
		

		
		return $this->main->print();			
		
	}
	private function displayMyLinks(){
		$this->makeMyLinks();
		return $this->main->print();
		
	}
	private function displayModules(){
		$this->makeModuleLinks();
		return $this->main->print();
	}

	private function displayCalendar(){
		if ($this->month->value() == 0 || $this->year->value() == 0){
			global $sessionTime;
			$t = new \framework\timestamp($sessionTime);
			$this->year->set($t->getYear(true));
			
			$this->month->set($t->getMonth(true));
			
		}
		if ($this->month->value() == 12){
			$nextMonth = 1;
			$nextYear = $this->year->value() + 1;
		} else {
			$nextMonth = $this->month->value() + 1;
			$nextYear = $this->year->value();
		}
		if ($this->month->value() == 1){
			$prevMonth = 12;
			$prevYear = $this->year->value() - 1;
		} else {
			$prevMonth = $this->month->value() - 1;
			$prevYear = $this->year->value();
		}

		//$menuL = new \application\links\linkMenu('LIST','menu');
		$p = $this->links->calendars('Previous', $prevYear, $prevMonth);
		$n = $this->links->calendars('Next', $nextYear, $nextMonth);

		$c = new forms\calendar($this->year->value(),$this->month->value(),'Calendar');	
		$c->setLinks($n->print(), $p->print());
		return $c->buildCalendar();
	}

	private function displayTesting(){
	
		include_once("sys_UnitTesting_Class.php");
		$tests = new _UnitTest;
		$tests->setDetails($this->displayMode->value,$this->year->value,$this->month->value);
		$content = $tests->display();
		
		return $content;
	
	}

	private function displaySystemUpdates(){
	
		include_once("sys_SystemUpdates.php");
		$update = new _SystemUpdate;
		$update->setDetails($this->displayMode->value,$this->year->value,$this->month->value);
		$content = $update->display();
		
		return $content;
	
		
	}

}
?>
