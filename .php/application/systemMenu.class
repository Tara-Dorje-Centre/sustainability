<?php
namespace application;

class systemMenu extends \framework\_echo{
	public $displayMode;
	public $year;
	public $month;
	protected $_MyClassName = '_menu';
	
	public function __construct(){
		$this->displayMode = new _textField('not_used','displayMode','mode');
		$this->year = new _numberField('not_used','year','mode');;
		$this->month = new _numberField('not_used','month','mode');
	}
	
	public function getRequestArguments(){



	}
	public function readRequest(){
		$this->displayMode->setEnvironment('GET');
		$this->year->setEnvironment('GET');
		$this->month->setEnvironment('GET');
		$this->displayMode->setDefault('MY_LINKS');
		$this->year->setDefault(0);
		$this->month->setDefault(0);
		$this->displayMode->read();
		$this->year->read();
		$this->month->read();
	}
	public function setDetails($displayMode = 'REFERENCE', $year = 0, $month = 0){
		$this->displayMode->set($displayMode);
		$this->year->set($year);
		$this->month->set($month);

	}
	
	public function PageTitle(){
		$t = new \html\_div('section-heading-title');
		switch($this->displayMode->value()){
			case 'REFERENCE':
			$title = 'Reference';		
			break;	
		case 'CALENDAR':
			$title = 'Calendar';
			break;
		case 'SYSTEM-UPDATES':
			$title = 'System Updates';
			break;
		case 'TESTING':
			$title = 'Testing';
			break;
		case 'MY_LINKS':
			$title = 'My Links';
			break;
		default:
			$title = 'Sustainable Planning Tools';						
		}
		
		$t->setContent($title);
	
		return $t->print();	
	}

	public function PageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';

		$m = new sysMenuLinks('section-heading-links');
		return $m->getPageMenu();	
	}
	
	public function getPageHeading(){
		$heading = $this->pageTitle();
		$heading .= $this->pageMenu();
		return $heading;
	}	
	
	
	private function displayReference(){
	$this->echoPrint(true,'start','displayReference');
		
		$m = new sysMenuLinks('section-content-links');

		$locationTypeL = new locationTypeLinks();
		$locationL = new locationLinks();
		$unitL = new quantityTypeLinks();
		$measureTypeL = new measureTypeLinks();
		$cropL = new CropLinks();
		$projectTypeL = new projectTypeLinks();
		$taskTypeL = new taskTypeLinks();
		$activityTypeL = new activityTypeLinks();
		$materialTypeL = new materialTypeLinks();
		$receiptTypeL = new receiptTypeLinks();
		
		$userL = new userLinks();
		$userTypeL = new userTypeLinks();
		$sitewideSettingsL = new siteSettingsLinks();

		$m->addLink($locationL->list());
		$m->addLink($locationTypeL->list());
		$m->addLink($projectTypeL->list());
		$m->addLink($taskTypeL->list());
		$m->addLink($activityTypeL->list());
		$m->addLink($materialTypeL->list());
		$m->addLink($receiptTypeL->list());
		$m->addLink($unitL->list());
		$m->addLink($measureTypeL->list());
		//$m->addLink($cropL->list());
		if ($_SESSION['is-admin'] == 'yes'){
			//only show userlist to admins
			$m->addLink($userL->list());
			$m->addLink($userTypeL->list());
			$m->addLink($sitewideSettingsL->view());
		}
		$m->addLink($m->calendar());
		
		return $m->print();			
		
	}
		
	private function displayMyLinks(){
		$projectL = new ProjectLinks();
		$activityL = new ActivityLinks();
		$taskL = new TaskLinks();
		$userL = new UserLinks();
				
		$m = new sysMenuLinks('section-content-links');
		
		$m->addLink($taskL->linksPeriodicTasks());
		$m->addLink($projectL->listingMyProjects());
		$m->addLink($projectL->listingAllProjects());
		$m->addLink($activityL->linkMyCalendar());
		$m->addLink($activityL->linkMyActivities());
		
		if (isset($_SESSION['logged-in']) && $_SESSION['logged-in'] == true){
			if ($_SESSION['must-update-pwd'] == 'yes'){
				$m->makeSpan('Please update your profile password.');
			}
			$m->addLink($userL->view('My Profile', $_SESSION['user-id']));
		}
		return $m->print();
		
	}
	private function displayModules(){
		$m = new sysMenuLinks('section-content-links');

		$projectL = new ProjectLinks();
		//$menuType,$menuStyle);
		$taskL = new TaskLinks();
		//$menuType,$menuStyle);
		$activityL = new ActivityLinks();
		//$menuType,$menuStyle);
		//$cropPlanL = new CropPlanLinks($menuType,$menuStyle);
		
		$m->addLink($taskL->linksPeriodicTasks(true));
		$m->addLink($projectL->listingAllProjects(true));		
		$m->addLink($activityL->linkGroupCalendar());
		$m->addLink($activityL->linkGroupActivities());
		//$m->addLink($cropPlanL->list());

		return $m->print();					
	}
	
	public function printPage(){
		
		$heading = $this->getPageHeading();
		$details = $this->getPageDetails();

		$site = new _htmlSite('MENU');
		$site->set($heading, $details);
		$site->print();
		
	}

	public function getPageDetails(){
	
		$details = $this->display();
		return $details;
		
	}
	
	
	protected function display(){
	$this->echoPrint(true,'start','display');
	$this->echoValue(true,'displayMode', $this->displayMode->value(), 'display');
	
		switch($this->displayMode->value()){
			case 'REFERENCE':
				$content = $this->displayReference();
				break;
			case 'CALENDAR':
				$content = $this->displayCalendar();
				break;
			case 'MY_LINKS':
				$content = $this->displayMyLinks();
				break;
			case 'SYSTEM-UPDATES':
				$content = $this->displaySystemUpdates();
				break;
			case 'TESTING':
				$content = $this->displayTesting();		
				break;				
			default:
				$content = $this->displayModules();
		}
		return $content;
		
	}

	private function displayCalendar(){
		if ($this->month->value() == 0 || $this->year->value() == 0){
			global $sessionTime;
			$t = new _timestamp($sessionTime);
			$this->year->set($t->getYear(true));
			
			$this->month->set($t->getMonth(true));
			
		}
		if ($this->month->value() == 12){
			$nextMonth = 1;
			$nextYear = $this->year->value() + 1;
		} else {
			$nextMonth = $this->month->value() + 1;
			$nextYear = $this->year->value();
		}
		if ($this->month->value() == 1){
			$prevMonth = 12;
			$prevYear = $this->year->value() - 1;
		} else {
			$prevMonth = $this->month->value() - 1;
			$prevYear = $this->year->value();
		}

		$menuL = new MenuLinks('LIST','menu');
		$prevMonthLink = $menuL->detailHref('CALENDAR', 'Previous', $prevYear, $prevMonth);
		$nextMonthLink = $menuL->detailHref('CALENDAR', 'Next', $nextYear, $nextMonth);

		$c = new _calendar($this->year->value(),$this->month->value(),'Calendar');	
		$c->setLinks($nextMonthLink, $prevMonthLink);
		return $c->buildCalendar();
	}

	private function displayTesting(){
	
		include_once("sys_UnitTesting_Class.php");
		$tests = new _UnitTest;
		$tests->setDetails($this->displayMode->value,$this->year->value,$this->month->value);
		$content = $tests->display();
		
		return $content;
	
	}

	private function displaySystemUpdates(){
	
		include_once("sys_SystemUpdates.php");
		$update = new _SystemUpdate;
		$update->setDetails($this->displayMode->value,$this->year->value,$this->month->value);
		$content = $update->display();
		
		return $content;
	
		
	}

}
?>
