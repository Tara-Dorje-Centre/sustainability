<?php 
namespace application;

abstract class baseEntity 
extends \framework\_contentWriter 
implements IbaseEntity{

	public $pageMode = 'VIEW';
	public $id = 0;
	public $idParent = 0;
	public $idType = 0;
	
	public $isPagingSet = false;
	public $resultPage = 1;
	public $perPage = 10;
	
	public $isCalendarSet = false;
	public $month = -1;
	public $year = -1;
	public $showCalendar = 'NO';
	public $prevCalendarLink = '';
	public $nextCalendarLink = '';

	public $countAll = 0;
	public $countChildren = 0;
	public $isCountSet = false;
	
	protected $_pageTitle;
	protected $_pageMenu;
	
	public function __construct(){
	
	}
	
	
	 
	public function setIdentifiers($mode, $id = 0, $idParent = 0, $idType=0){
		$this->pageMode = $mode;
		$this->id = $id;
		$this->idParent = $idParent;
		$this->idType = $idType;
		$this->echoState_ids(true, 'setIdentifiers');
	}
	protected function getRequestIdentifiers(){
		$action = $_GET['pageAction'];
		$id = $_GET['id'];
		$idParent = $_GET['idParent'];
		$idType = $_GET['idType'];
		$this->setIdentifiers($action,$id,$idParent,$idType);
	}
	
	
	public function setPaging($page = 1, $perPage = 10){
		$this->resultPage = $page;
		$this->perPage = $perPage;
		$this->isPagingSet = true;
		$this->echoState_paging(true, 'setPaging');
	 }
	 public function getRequestPaging(){
		$page = $_GET['resultPage'];
		$rows = $_GET['perPage'];
		$this->setPaging($page,$rows);
	}
	
	
	public function setCalendar($year = -1, $month = -1, $show = 'NO'){
		$this->showCalendar = $show;
	
		 if ($year != 0 && $year != -1){
		 	$this->year = $year;
		 	$this->month = $month;
		 } else {
		 //dates not set, use current month and year
		 	global $sessionTime;
		 	$t = new \framework\timestamp($sessionTime);
		 	$this->year = $t->getYear(true);
		 	$this->month = $t->getMonth(true);
		 }
		 
		$this->isCalendarSet = true;
		$this->echoState_calendar(true, 'setCalendar');
	}
	protected function getRequestCalendar(){
		$year = $_GET['year'];
		$month = $_GET['month'];
		$show = $_GET['showCalendar'];
		$this->setCalendar($year,$month,$show);
	}
	
	public function setCounts($count = 0, $countChildren = 0){
		$this->countAll = $count;
		$this->countChildren = $countChildren;
		
		$this->isCountSet = true;
		$this->echoState_count(true, 'setCount');
	}
	
	
	
	protected function echoState($show = true, $f = '-use-current-', $c= '-use-current-'){
		if ($show == true){
			$this->echoState_ids($show, $f, $c);
			$this->echoState_paging($show, $f, $c);
			$this->echoState_calendar($show, $f, $c);
			$this->echoState_count($show, $f, $c);
		}
	}
	
	protected function echoState_ids($show = true, $f = '-use-current-', $c= '-use-current-'){
		$this->echoLocale($f, $c);
		$s = $show;
		$this->echoValue($s, 'id', $this->id);
		$this->echoValue($s, 'idParent', $this->idParent);
		$this->echoValue($s, 'pageMode', $this->pageMode);
	}
	
	protected function echoState_calendar($show = true, $f = '-use-current-', $c= '-use-current-'){

		if ($this->isCalendarSet == true){
			$s = false;
			$this->echoLocale($f, $c);
			$this->echoValue($s, 'month', $this->month);
			$this->echoValue($s, 'year', $this->year);
			$this->echoValue($s, 'showCalendar', $this->showCalendar);
		}
	}
	
	protected function echoState_count($show = true, $f = '-use-current-', $c= '-use-current-'){

		if ($this->isCountSet == true){
			$s = $show;
			$this->echoLocale($f, $c);
			$this->echoValue($s, 'count', $this->count);
			$this->echoValue($s, 'countChilden', $this->countChildren);
		}
	}
	
	
	protected function echoState_paging($show = true, $f = '-use-current-', $c= '-use-current-'){

		if ($this->isPagingSet == true){
			$s = false;
			$this->echoLocale($f, $c);
			$this->echoValue($s, 'resultPage', $this->resultPage);
			$this->echoValue($s, 'perPage', $this->perPage);
		}
	}
    
	
}

?>
