<?php
namespace application\system;

class user extends \application\entity{
	public $validationMessages;
	public function __construct(){
		parent::__construct();
		$this->entity = 'user';
		$this->entityTitle = 'User Profile';

		$this->f = new UserFields();
		$this->f->setEntity($this->entity);
		$this->sql = new UserSQL();
		$this->links = new UserLinks();
	}
	
	public function getRequestArguments(){
	
	parent::getRequestArguments();
	
	}
	
	public function display(){
		$detail = parent::display;
		if (($_SESSION['is-admin'] == 'yes') && ($_SESSION['user-id'] != $this->id)){		
			$detail .= $this->requestPasswordResetForm();
		}

		return $detail;
	}
	

	public function setUserType($id){
		$this->f->type->id->set($id);
	}
	
		
	protected function makePageTitle(){

		if ($this->pageMode != 'ADD'){
			$heading = $this->f->loginName->value();
			if (($_SESSION['user-id'] == $this->id) && ($_SESSION['must-update-pwd'] == 'yes')){
				$heading .= br().'Please update your profile password.';
			}

		} else {
			$heading = 'Add User Profile';
		}

		$this->_pageTitle = $heading;
	}
	
	
	protected function makePageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';
		$userL = new UserLinks($menuType,$menuStyle);		
		$menuL = new MenuLinks($menuType,$menuStyle);
		
		$menu = $userL->openMenu('section-heading-links');
		$menu .= $menuL->linkReference();
		$menu .= $userL->resetMenu();
		if ($this->pageMode == 'VIEW'){
			if ($_SESSION['is-admin'] == 'yes' || $_SESSION['user-id'] == $this->id){
				//user is admin or self, show edit link
				$menu .= $userL->edit('edit profile',$this->id);
			}
		} elseif ($this->pageMode == 'EDIT'){
			$menu .= $userL->view('view',$this->id);
		}
		$menu .= $userL->listingHref();
		
		$menu .= $userL->closeMenu();
		$this->_pageMenu = $menu;
	}
	

	public function getPageDetails(){			
		if ($_SESSION['is-admin'] == 'yes'){
			//is admin allow edit others and add users
		} else {
			//not admin allow edit self only
			if ($this->pageMode == 'ADD'){
				//non admin trying to add a user
				//revert to viewing self
				$this->setDetails($_SESSION['user-id'],0,'VIEW');
			} elseif ($this->pageMode == 'EDIT' && $_SESSION['user-id'] == $this->id){
				//editing self, ok
			} else {
				$this->pageMode = 'VIEW';
			}	 
		}

		if ($this->pageMode == 'EDIT' or $this->pageMode == 'ADD'){
			$details = $this->editForm();
		} else {
			$details = $this->display();
		}
		return $details;
		
	}
	



	private function generatePassword($length = 11) {
		$chars = '.!%^&*#@';
		$clen = mb_strlen($chars);
		$base = md5(microtime());
		$password = substr(base_convert(substr($base,1),16,36),0,$length);
		$len = mb_strlen($password);
		for($i = 0;$i < $len;$i++)
		{
			if(rand(0,1) && 1){
				$password[$i] = strtoupper($password[$i]);
			} elseif(rand(0,2) && 1 && $clen){
				$password[$i] = $chars[rand(0,$clen - 1)];
			}
		}
		return $password;
	}
	
	
	
	public function resetPassword($loginName, $loginEmail){
		
		//verify that login and email exist for an active account
		//if ($this->validateLoginAndEmail($loginName,$loginEmail) == true){
			//login and email are valid and account is active 
			$this->f->email->set($loginEmail);
		
			$newPass = $this->generatePassword();
			$newPassCrypt = $this->obfuscate(dbEscapeString($newPass),$loginName);
		
		
			$sql = $this->sql>updatePass($loginName, $newPassCrypt);
		
			$result = dbRunSQL($sql);
			
			$links = new UserLinks;	
			$message = $_SESSION['site-title'].br();
			$message .= $links->formatHref($_SESSION['site-org'],$_SESSION['site-org-url']).br();
			$message .= "Profile password has been reset".br();
			$message .= "Login Name = ".$loginName.br();
			$message .= "New Password = ".$newPass.br();
			$message .= $links->formatHref($_SESSION['site-url'],$_SESSION['site-url']).br();
			$this->mailUser($message,'Password Reset');
			$_SESSION['login-messages'] = 'Profile password reset';
	/*	} else {
			$_SESSION['login-messages'] = 'Active profile not found, contact an administrator';	
		}*/
	}

	private function mailUser($message = '', $subject = 'User Notification'){

		$fromAddress = ini_get('sendmail_from');
		$headers = "From: ".$fromAddress."\n";
		$headers .= "X-Mailer: PHP/".phpversion()."\n"; 
		$headers .= "MIME-Version: 1.0\n"; 
		$headers .= "Content-Type: text/html; charset=utf-8\n"; 
		$headers .= "Content-Transfer-Encoding: 8bit\n"; 
		$newSubject = $_SESSION['site-title'].':'.$subject;
		mail($this->f->email,$newSubject,$message,$headers, '-f '.$fromAddress);
	}
	
	private function obfuscate($pass,$login){
		//$salt = crypt($login);
		$hash = md5($pass.$login);
		return $hash;	
	}

	
	private function setSecurity($loginName){
		$sql = $this->sql->securityUser($loginName);

		$result = dbGetResult($sql);
		if($result){
	  		while ($row = $result->fetch_assoc())
			{
				$_SESSION['user-id'] = $row["id"];
				$_SESSION['is-admin'] = $row["is_admin"];  
				$_SESSION['must-update-pwd'] = $row["must_update_pwd"];
			}
		$result->close();
		}
			
	}
	
	private function getLoginMessages(){
		if (isset($_SESSION['login-messages']) && $_SESSION['login-messages'] != ''){
			$messages = $_SESSION['login-messages'].br();
			unset($_SESSION['login-messages']);
		} else {
			$messages = '';
		}
		return $messages;
	}
	
	public function requestPasswordResetForm(){
		$entity = 'user-password-reset';
		$contextMenu = null;
		$request = new _editForm($entity,$this->pageMode,$this->pageSave);
		$request->open($contextMenu,$this->_titleEntity);

		$request->hidden->addContent($this->f->id->inputHidden());
		$request->hidden->addContent($this->f->email->inputHidden());	
		$request->hidden->addContent($this->f->loginName->inputHidden());
		$request->submit->addContent(getSubmitButton('Request Reset','submit-pwd-reset'));
		$request->submit->addContent($this->getLoginMessages());

		return $request->close();
		
	}
	
	//overrride entity.listrowlink to limit editing to administrators or self edit
	protected function listRowLink(){

		if (($_SESSION['is-admin'] == 'yes') || ($_SESSION['user-id'] == $this->f->id->value)){
			$link = $this->links->itemViewEdit($this->f->loginName->value(),$this->f->id->value());
		} else {
			$link = $this->links->view($this->f->loginName->value(),$this->f->id->value());
		}
			return $link;
	}
		
	public function addForm($idParent = 0){
		if ($_SESSION['is-admin'] == 'yes'){
			$this->pageMode = 'ADD';
			$this->setDefaults();
			$form = $this->editForm();
		} else {
			$quickEdit = 'Please request Administrator assistance to add users';
		}
		return $form;
	}

	
	public function editForm(){
	
		if (($_SESSION['is-admin'] == 'yes') || ($_SESSION['user-id'] != $this->id)){
			$form = $this->secureEditForm();
		} else {
			$form = $this->display();
		}
		return $form;
	}
	
	protected function secureEditForm(){
		$this-> echoState(true,'secureEditForm');

		$contextMenu = $this->links->formatToggleLink('formOptional','+Options');		

		$this->edit = new _inputForm($this->pageSave, $this->titleEntity);
		$this->edit->open($this->entity,$this->pageMode,$contextMenu);
	
		if ($this->pageMode == 'ADD'){
			$this->f->loginName->setValidation(@$this->validationMessages['login']);			
			$this->edit->required->input($this->f->loginName);
		} else {
			$input = $this->f->loginName->inputHidden();
			$this->edit->required->addContent('Login name ['.$this->f->loginName->value().'] cannot be changed');
		}
		$this->f->loginPwd->setValidation(@$this->validationMessages['password']);
		$this->edit->required->inputPassword($this->f->pwd);
		$this->edit->required->inputPassword($this->f->pwdConfirm);
		

		$this->f->email->setvalidation(@$this->validationMessages['email']);
		$this->edit->required->input($this->f->email);
		$this->edit->optional->input($this->f->nameFirst);
		$this->edit->optional->input($this->f->nameLast);


		$m = new UserType;
		$select = $m->options($this->f->typeEntity->id->value(),$this->f->typeEntity->id->env->variable());
		$this->edit->optional->choice($this->f->type->id,$select);
		

		$this->edit->optional->input($this->f->focus);
		$this->edit->optional->input($this->f->interests);
	
		
		
		if ($_SESSION['is-admin'] == 'yes' && $_SESSION['user-id'] != $this->id){
			//if admin and not editing self allow setting admin
			//prevents admins from disabling their own accounts
			$this->edit->optional->input($this->f->isAdmin);
			$this->edit->optional->input($this->f->isActive);
			$this->edit->optional->input($this->f->mustUpdatePwd);
		} else {
			$this->edit->optional->inputHidden($this->f->isAdmin);
			$this->edit->optional->inputHidden($this->f->isActive);
			$this->edit->optional->inputHidden($this->f->mustUpdatePwd);
		}				
		
		$edit->hidden->addContent(getHiddenInput('mode', $this->pageMode));
		$edit->hidden->inputHidden($this->f->id);

		$edit->submit->addContent( getSaveChangesResetButtons());
		return $edit->close();
	}
	
	
	public function collectPostValues(){
		parent::collectPostValues();
		//get password for local validation
		$pwd = dbEscapeString($_POST['loginPwd']);
		$pwdConfirm = dbEscapeString($_POST['loginPwdConfirm']);
		//clear the password from post variables if canceling form post
		$_POST['loginPwd'] = 'password';
		$_POST['loginPwdConfirm'] = 'password';

		//validate login name
		if (($this->f->loginName->value() == '') || is_null($this->f->loginName->value())){
			$this->cancelPost('Login name cannot be blank','login');
		}
		//validate email address
		if (($this->f->email->value() != '') && (filter_var($this->f->email->value(), FILTER_VALIDATE_EMAIL) !== false)) {
    		// $email contains a valid email
		} else {
			if ($this->f->email->value() == ''){
				$validation = 'Email address cannot be blank';
			} else {
				$validation = 'Email address is not valid';
			}
			$this->cancelPost($validation,'email');
		}
		//validate password
		if (($pwd != '') && ($pwd == $pwdConfirm) && ($pwd != 'password')){
			$this->f->loginPwd->set($this->obfuscate($pwd, $this->f->loginName-value));
		} else {
			if ($pwd == '' || is_null($pwd) || is_null($pwdConfirm) || $pwdConfirm == ''){
				$validation = 'Password cannot be blank';
			} elseif ($pwd != $pwdConfirm){
				$validation = 'Passwords do not match';
			}
			$this->cancelPost($validation,'password'); 
		}
	}
	
	protected function cancelPost($message, $validation){
		//echo 'in cancel post:'.$message;
		//set validation message
		$this->validationMessages[$validation] = span($message,'highlight-validation');
		//display editing form with current validation state
		$this->printPage();
		die;
	}

	protected function saveUpdate(){
			
			$sql = " UPDATE users AS u ";
			$sql .= " SET ";
			$sql .= " u.name_first = '".$this->f->nameFirst->value()."', ";
			$sql .= " u.name_last = '".$this->f->nameLast->value()."', ";
			$sql .= " u.email = '".$this->f->email->value()."', ";
			$sql .= " u.focus = '".$this->f->focus->value()."', ";
			$sql .= " u.interests = '".$this->f->interests->value()."', ";
			$sql .= " u.login_name = '".$this->f->loginName->value."', ";
			$sql .= " u.login_pwd = '".$this->f->loginPwd->value()."', ";
			$sql .= " u.is_admin = '".$this->f->isAdmin->value()."', ";
			$sql .= " u.is_active = '".$this->f->isActive->value()."', ";
			$sql .= " u.must_update_pwd = '".$this->f->mustUpdatePwd->value()."', ";
			$sql .= " u.type_id = ".$this->f->type->id->value()." ";
			$sql .= " WHERE u.id = ".$this->f->id->value()."  ";			

			$result = dbRunSQL($sql);

			$this->mailUser('Your User Profile Has Been Updated');
			
			if ($this->f->loginName->value() == $_SESSION['login-name']){
				$this->setSecurity($this->f->loginName->value());
			}
	}
	
	protected function saveInsert(){
	
			$sql = " INSERT INTO users ";
			$sql .= " (name_first, ";
			$sql .= " name_last, ";
			$sql .= " email, ";
			$sql .= " focus, ";
			$sql .= " interests, ";
			$sql .= " login_name, ";
			$sql .= " login_pwd, ";
			$sql .= " is_admin, ";
			$sql .= " is_active, ";
			$sql .= " must_update_pwd, ";
			$sql .= " created, ";
			$sql .= " type_id) ";
			$sql .= " VALUES (";
			$sql .= " '".$this->f->nameFirst->value()."', ";
			$sql .= " '".$this->f->nameLast->value()."', ";
			$sql .= " '".$this->f->email->value()."', ";
			$sql .= " '".$this->f->focus->value()."', ";
			$sql .= " '".$this->f->interests->value()."', ";
			$sql .= " '".$this->f->loginName->value()."', ";
			$sql .= " '".$this->f->loginPwd->value()."', ";
			$sql .= " '".$this->f>isAdmin-value()."', ";
			$sql .= " '".$this->f->isActive>value()."', ";
			$sql .= " '".$this->f->mustUpdatePwd->value()."', ";
			$sql .= " CURRENT_TIMESTAMP, ";			
			$sql .= " ".$this->f->type->id->value().") ";
			
			$result = dbRunSQL($sql);

			$this->id = dbInsertedId();
	}
	
	
} 
?>
