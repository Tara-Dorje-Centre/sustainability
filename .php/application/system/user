<?php
namespace application\system;

class user extends \application\entity{
	public $validationMessages;
	
	
	public function __construct(){
		parent::__construct();
		$this->entity = 'user';
		$this->entityTitle = 'User Profile';

		$this->f = new forms\UserFields();
		$this->f->setEntity($this->entity);
		$this->sql = new sql\UserSQL();
		$this->links = new links\UserLinks();
		
	}
	
	public function getRequestArguments(){
		parent::getRequestArguments();
	
	}
	
	public function display(){
		$detail = parent::display();
		//allow admin to request password change
		if (($_SESSION['is-admin'] == 'yes') && ($_SESSION['user-id'] != $this->id)){		
			$detail .= $this->requestPasswordResetForm();
		}

		return $detail;
	}
	

	public function setUserType($id){
		$this->f->type->id->set($id);
	}
	
		
	protected function makePageTitle(){

		if ($this->pageMode != 'ADD'){
			$heading = $this->pageMode.' User Profile: '.$this->f->loginName->value();
			if (($_SESSION['user-id'] == $this->id) AND ($_SESSION['must-update-pwd'] == 'yes')){
				$heading .= '<br/>Please update your profile password.';
			}

		} else {
			$heading = 'Add User Profile';
		}

		$this->_pageTitle = $heading;
	}
	
	
	protected function makePageMenu(){
	
		$s = new \application\links\systemMenuLinks();
		$this->links->addLink($s->reference());

		if ($this->pageMode == 'VIEW'){
			if ($_SESSION['is-admin'] == 'yes' OR $_SESSION['user-id'] == $this->id){
				//user is admin or self, show edit link
				$this->links->addLink($this->links->edit('Edit Profile',$this->id));
			}
		} elseif ($this->pageMode == 'EDIT'){
			$this->links->addLink($this->links->view('View Profile',$this->id));
		}
		if ($_SESSION['is-admin'] == 'yes'){
			$this->links->addLink($this->links->add('Add Profile'));
		}
		$this->links->addLink($this->links->contextList('All Profiles'));
	
		$this->_pageMenu = $this->links->print();
	}
	
	public function getPageDetails(){			
		if ($_SESSION['is-admin'] == 'yes'){
			//is admin allow edit others and add users
		} else {
			//not admin allow edit self only
			if ($this->pageMode == 'ADD'){
				//non admin trying to add a user
				//revert to viewing self
				$this->id = $_SESSION['user-id'];
				$this->pageMode = 'VIEW';
				$this->setDetails();
			} elseif ($this->pageMode == 'EDIT' AND $_SESSION['user-id'] == $this->id){
				//editing self, ok
			} else {
				$this->pageMode = 'VIEW';
			}	 
		}

		if ($this->pageMode == 'EDIT' OR $this->pageMode == 'ADD'){
			$details = $this->editForm();
		} else {
			$details = $this->display();
		}
		return $details;
		
	}
	
	/*
	//use for admin password reset, needs button and form
	public function resetPassword($loginName, $loginEmail){
		
		//verify that login and email exist for an active account
		//if ($this->validateLoginAndEmail($loginName,$loginEmail) == true){
			//login and email are valid and account is active 
			$this->f->email->set($loginEmail);
		
			$newPass = $this->generatePassword();
			$newPassCrypt = $this->obfuscate($this->sql->getEscapeString($newPass),$loginName);
		
		
			$sql = $this->sql>updatePass($loginName, $newPassCrypt);
		
			$result = $this->sql->runStatement($sql);
			
			$links = new UserLinks;	
			$message = $_SESSION['site-title'].br();
			$message .= $links->formatHref($_SESSION['site-org'],$_SESSION['site-org-url']).br();
			$message .= "Profile password has been reset".br();
			$message .= "Login Name = ".$loginName.br();
			$message .= "New Password = ".$newPass.br();
			$message .= $links->formatHref($_SESSION['site-url'],$_SESSION['site-url']).br();
			$this->mailUser($message,'Password Reset');
			$_SESSION['login-messages'] = 'Profile password reset';
	
	
		} else {
			$_SESSION['login-messages'] = 'Active profile not found, contact an administrator';	
		}
	}
    */
    
    
    
    
	private function mailUser($message = '', $subject = 'User Notification'){

		\application\mailUser($message, $subject);
		
	}
	
	private function setSecurity($loginName){
		$sql = $this->sql->securityUser($loginName);

		$result = $this->sql->getResult($sql);
		if($result){
	  		while ($row = $result->fetch_assoc())
			{
				$_SESSION['user-id'] = $row["id"];
				$_SESSION['is-admin'] = $row["is_admin"];  
				$_SESSION['must-update-pwd'] = $row["must_update_pwd"];
			}
		$result->close();
		}
			
	}
	
	public function requestPasswordResetForm(){
		$entity = 'user-password-reset';
		
		$url = $this->links->request->getUrlEntitySave($this->f->id->value(),0,0);
	
		$request = new \application\forms\inputForm($url->print(), $this->entityTitle,$this->pageMode,$entity,false);
		
		$request->hidden->inputHidden($this->f->id);
		$request->hidden->inputHidden($this->f->email);	
		$request->hidden->inputHidden($this->f->loginName);

		$_submit = new \application\forms\submitButton('request-pwd-reset','Request Reset'); 
		$request->submit->addContent($_submit->button());	

		return $request->print();
	}
	
	//overrride entity.listrowlink to limit editing to administrators or self edit
	protected function listRowLink(){

		if (($_SESSION['is-admin'] == 'yes') OR ($_SESSION['user-id'] == $this->f->id->value())){
			$link = $this->links->viewEdit($this->f->loginName->value(),$this->f->id->value());
		} else {
			$link = $this->links->view($this->f->loginName->value(),$this->f->id->value())->print();
		}
			return $link;
	}
		
	public function addForm($idParent = 0){
		$form = '';
		if ($_SESSION['is-admin'] == 'yes'){
			$this->pageMode = 'ADD';
			$this->setDefaults();
			$form = $this->editForm();
		} else {
			$form = 'Please request Administrator assistance to add users';
		}
		return $form;
	}

	
	public function editForm(){
	
		if (($_SESSION['is-admin'] == 'yes') OR ($_SESSION['user-id'] == $this->id)){
			$form = $this->secureEditForm();
		} else {
			$form = $this->display();
		}
		return $form;
	}
	
	protected function secureEditForm(){
		$this-> echoState(true,'secureEditForm');

		$url = $this->links->request->getUrlEntitySave($this->f->id->value(),0,0);
	
		$this->edit = new \application\forms\inputForm($url->print(), $this->entityTitle,$this->pageMode,$this->entity,true);
		
		if ($this->pageMode == 'ADD'){
			$this->f->loginName->setValidation(@$this->validationMessages['login']);			
			$this->edit->required->input($this->f->loginName);
		} else {
			$this->edit->hidden->inputHidden($this->f->loginName);
			$this->edit->required->addContent('Login name ['.$this->f->loginName->value().'] cannot be changed');
		}
		
		$this->f->pwd->setValidation(@$this->validationMessages['password']);
		$this->edit->required->input($this->f->pwd);
		$this->edit->required->input($this->f->pwdConfirm);
		$this->edit->required->br();
	
		$this->f->email->setvalidation(@$this->validationMessages['email']);
		$this->edit->required->input($this->f->email);
		$this->edit->required->br();
		
		$this->edit->required->input($this->f->nameFirst);
		$this->edit->required->input($this->f->nameLast);


		$m = new UserType;
		$select = $m->options($this->f->type->id->value(),$this->f->type->id->env->variable());
		$this->edit->required->inputChoice($this->f->type->id,$select->print());
		$this->edit->required->hr();
	
		$this->edit->optional->input($this->f->focus);
		$this->edit->optional->input($this->f->interests);
		$this->edit->optional->hr();
		
		if ($_SESSION['is-admin'] == 'yes' AND $_SESSION['user-id'] != $this->id){
			//if admin and not editing self allow setting admin
			//prevents admins from disabling their own accounts
			$this->edit->optional->input($this->f->isAdmin);
			$this->edit->optional->input($this->f->isActive);
			$this->edit->optional->input($this->f->mustUpdatePwd);
		} else {
			$this->edit->optional->inputHidden($this->f->isAdmin);
			$this->edit->optional->inputHidden($this->f->isActive);
			$this->edit->optional->inputHidden($this->f->mustUpdatePwd);
		}		
		
		$this->edit->hidden->inputHidden($this->f->id);
		$this->edit->setRequestMode($this->pageMode);
		$this->edit->setSubmitButtons();
		
		return $this->edit->print();

	}
	
	private function requestPasswordReset($id){
	    $this->echoPrint(true, 'requesting password reset for id= '.$id, 'requestPasswordReset');
	    $sql = "UPDATE users u ";
	    $sql .= "SET u.must_update_pwd = 'yes', ";
	    $sql .= "u.updated = CURRENT_TIMESTAMP ";
	    $sql .= "WHERE u.id = ".$id;
	    
	    $result = $this->sql->runStatement($sql);
	}
	
	public function collectPostValues(){
	
		if (isset($_POST['request-pwd-reset'])) {
    		$this->echoPrint(true, 'PRESSED REQUEST PWD RESET', 'collectPostValues');
    		$id = $_POST['id'];
    		$this->requestPasswordReset($id);
		} else {
    		$this->echoPrint(true, 'PRESSED SUBMIT', 'collectPostValues');
	
			parent::collectPostValues();
		
			//get password for local validation
			$pwd = $this->sql->getEscapeString($_POST['login-pwd']);
			$pwdConfirm = $this->sql->getEscapeString($_POST['pwd-confirm']);
			//clear the password from post variables if canceling form post
			$_POST['login-pwd'] = 'password';
			$_POST['pwd-confirm'] = 'password';

			//validate login name
			if (($this->f->loginName->value() == '') || is_null($this->f->loginName->value())){
				$this->cancelPost('Login name cannot be blank','login');
			}
			//validate email address
			if (($this->f->email->value() != '') && (filter_var($this->f->email->value(), FILTER_VALIDATE_EMAIL) !== false)) {
    			// $email contains a valid email
			} else {
				if ($this->f->email->value() == ''){
					$validation = 'Email address cannot be blank';
				} else {
					$validation = 'Email address is not valid';
				}
				$this->cancelPost($validation,'email');
			}
			//validate password
			if (($pwd != '') && ($pwd == $pwdConfirm) && ($pwd != 'password')){
				$this->f->pwd->set($this->f->pwd->obfuscate($pwd, $this->f->loginName->value()));
			} else {
				if ($pwd == '' || is_null($pwd) || is_null($pwdConfirm) || $pwdConfirm == ''){
					$validation = 'Password cannot be blank';
				} elseif ($pwd != $pwdConfirm){
					$validation = 'Passwords do not match';
				}
				$this->cancelPost($validation,'password'); 
			}
		
		}
	}
	
	protected function cancelPost($message, $validation){
		$this->echoPrint(true, 'in cancel post:'.$message);
		//set validation message
		$s = new \html\_span('highlight-validation');
		$s->setContent($message);
		$this->validationMessages[$validation] = $s->print();

		//display editing form with current validation state
		$this->printPage();
		die;
	}

	protected function saveUpdate(){
			
			$sql = " UPDATE users AS u ";
			$sql .= " SET ";
			$sql .= " u.name_first = '".$this->f->nameFirst->value()."', ";
			$sql .= " u.name_last = '".$this->f->nameLast->value()."', ";
			$sql .= " u.email = '".$this->f->email->value()."', ";
			$sql .= " u.focus = '".$this->f->focus->value()."', ";
			$sql .= " u.interests = '".$this->f->interests->value()."', ";
			$sql .= " u.login_name = '".$this->f->loginName->value()."', ";
			$sql .= " u.login_pwd = '".$this->f->pwd->value()."', ";
			$sql .= " u.is_admin = '".$this->f->isAdmin->value()."', ";
			$sql .= " u.is_active = '".$this->f->isActive->value()."', ";
			$sql .= " u.updated = CURRENT_TIMESTAMP, ";
			$sql .= " u.must_update_pwd = 'no', ";
			$sql .= " u.type_id = ".$this->f->type->id->value()." ";
			$sql .= " WHERE u.id = ".$this->f->id->value()."  ";			

			$result = $this->sql->runStatement($sql);

			$this->mailUser('Your User Profile Has Been Updated');
			
			if ($this->f->loginName->value() == $_SESSION['login-name']){
				$this->setSecurity($this->f->loginName->value());
			}
	}
	
	protected function saveInsert(){
	
			$sql = " INSERT INTO users ";
			$sql .= " (name_first, ";
			$sql .= " name_last, ";
			$sql .= " email, ";
			$sql .= " focus, ";
			$sql .= " interests, ";
			$sql .= " login_name, ";
			$sql .= " login_pwd, ";
			$sql .= " is_admin, ";
			$sql .= " is_active, ";
			$sql .= " must_update_pwd, ";
			$sql .= " created, ";
			$sql .= " updated, ";
			$sql .= " type_id) ";
			$sql .= " VALUES (";
			$sql .= " '".$this->f->nameFirst->value()."', ";
			$sql .= " '".$this->f->nameLast->value()."', ";
			$sql .= " '".$this->f->email->value()."', ";
			$sql .= " '".$this->f->focus->value()."', ";
			$sql .= " '".$this->f->interests->value()."', ";
			$sql .= " '".$this->f->loginName->value()."', ";
			$sql .= " '".$this->f->pwd->value()."', ";
			$sql .= " '".$this->f->isAdmin->value()."', ";
			$sql .= " '".$this->f->isActive->value()."', ";
			$sql .= " '".$this->f->mustUpdatePwd->value()."', ";
			$sql .= " CURRENT_TIMESTAMP, ";		
			$sql .= " CURRENT_TIMESTAMP, ";			
			$sql .= " ".$this->f->type->id->value().") ";
			
			$result = $this->sql->runStatement($sql);

			$id = $this->sql->getInsertedId();
			$this->f->id->set($id);
			$this->id = $this->f->id->value();
			
	}
	
	
} 
?>
