<?php
abstract class _baseEntityLinks extends _links{
	protected $context = 'baseEntity';
	protected $pageList = 'list.php';
	protected $pageDetail = 'detail.php';
	
	public function __construct($menuType = 'DIV',$styleBase = 'menu'){
		parent::__construct($menuType,$styleBase);
	}
	
	protected function parameter($name, $value, $first = false){
		if ($first == true){
			$p = '?';
		} else {
			$p = '&';
		}
		$p .= $name.'='.$value;
		return $p;
	}
	
	protected function nonZeroParameter($name, $value, $first = false){

		if ($value != 0){
			$p  = $this->parameter($name, $value, $first);
		} else {
			$p = '';
		}
	
	}
	
	protected function urlBase($page = 'index.php', $scope = 'detail'){
		$link = $page;
		$link .= $this->parameter('context',$this->context,true);
		$link .= $this->parameter('scope', $scope);
		return $link;
	}
	
	public function urlList($idParent = 0){
		$link = $this->urlBase($this->pageList,'list');
		$link .= $this->nonZeroParameter('idParent',$idParent);
		return $link;
	}
	
	public function urlListByParent($idParent = 0){
		$link = $this->urlList($idParent);
		return $link;
	}
	
	public function urlDetail($pageAction = 'VIEW', $id = 0, $idParent = 0){
		$link = $this->urlBase($this->pageDetail,'detail');
		
		$link .= $this->parameter('pageAction',$pageAction);
		$link .= $this->nonzeroParameter('id',$id);
		$link .= $this->nonzeroParameter('idParent',$idParent);
		
		return $link;
	}	
	
	public function list($caption = 'List', idParent = 0){
		$link = $this->urlList($idParent);
		$href = $this->formatHref($caption,$link);
		return $href;	
	}	
	
	protected function detail($caption = 'View', $pageAction = 'VIEW', $id = 0,$idParent = 0){
		$link = $this->urlDetail($pageAction,$id,$idParent);
		$href = $this->formatHref($caption,$link);
		return $href;	
	}	

	public function add($caption = 'New', $idParent = 0){
		$l = $this->hrefDetail($caption,'ADD',0,$idParent);
		return $l;	
	}
	public function view($caption = 'View', $id = 0){
		$l = $this->hrefDetail($caption,'VIEW',$id);
		return $l;	
	}
	public function copy($caption = 'Copy', $id = 0){
		$l = $this->hrefDetail($caption,'COPY',$id);
		return $l;	
	}
	public function itemViewEdit($caption = 'View', $id = 0){
		
		if ($id != 0){
			$l = $this->view($caption,$id);
			$l .= $this->edit('[#]',$id);
		} else {
			$l = '';
		}
		return $l;
	}	
	
	public function toggleEdit($pageAction = 'VIEW', $id){
		if ($pageAction == 'VIEW'){
			$l = $this->edit('Edit',$id);
			$l .= $this->copy('Copy',$id);
		} else {
			$l = $this->view('View',$id);
		}
		return $l;
	}
	
	
	
	public function pagingLinksChildren($idParent, $found, $resultPage=1, $perPage=10){
		$l = $this->urlList($idParent).'&resultsPage=';
		$ls = $this->getPagedLinks($l, $found,$perPage,$resultPage);
		return $ls;
	}
	
	
	public function pagingLinks($found, $resultPage, $perPage){
		$l = $this->urlList(0).'?resultsPage=';
		$ls = $this->getPagedLinks($l, $found,$perPage,$resultPage);
		return $ls;
	}
	
}
?>
