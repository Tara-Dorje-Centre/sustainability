<?php 
class projectFields extends _entityFields{
/******
_entityFields    id, name, description, 
highlightStyle, created, updated
idType, idParent,

_entityTypeFields  notes, displayOrder
****/
	public $locationId = 0;
	    public $locationName;
   
    public $summary;
    public $started;
    public $pctDone = 0;	
    public $priority = 1;	
    public $goals;
    public $lessons;	 
	public $purpose;	
	public $showAlways = 'yes';
	
	public function __construct(){
		parent::__construct(true, true);
	}
	
	public function setRowValues($row){
		parent::setRowValues($row);
			
			
			$this->locationId = $row["location_id"];
			$this->locationName = ($row['location_name']);
			
			$this->summary = ($row["summary"]);
			$this->started = ($row["started"]);	
			$this->pctDone = $row["pct_done"];	
			$this->priority = $row["priority"];						
			$this->goals = ($row["goals"]);
			$this->lessons = ($row["lessons_learned"]);
			$this->purpose = ($row["purpose"]);		
			$this->showAlways = ($row["show_always"]);	
			
	}
	
	public function formatForDisplay(){
		parent::formatForDisplay();
	
		$this->summary = displayLines($this->summary);
		$this->goals = displayLines($this->goals);
		$this->lessons = displayLines($this->lessons);		
		$this->purpose = displayLines($this->purpose);		
		$this->started = getTimestampDate($this->started);
	
	}
	
	
	
	public function listHeading(){
		$heading = parent::listHeading();
		
		$heading = wrapTh('Location');
		$heading .= wrapTh('Priority');
		$heading .= wrapTh('%Done');
		$heading .= wrapTh('Notes');
		return $heading;
	}
	
	public function listDetail(){
		$detail = parent::listDetail();
		$detail .=  wrapTd($this->locationName);
		$detail .=  wrapTd($this->priority);
		$detail .=  wrapTd($this->pctDone);
		$detail .= wrapTd($this->description);

		return $detail;
	}
	
	public function displayDetail(){
		$detail = parent::displayDetail();

		$detail .= para('location','Location', $this->locationName);
		$detail .= para('priority', 'Priority', $this->priority);
		$detail .= para('started', 'Started', $this->started);
		$detail .= para('pct-done', '% Done', $this->pctDone);
		$detail .= para('purpose', 'Purpose', $this->purpose);
		$detail .= para('summary', 'Summary', $this->summary);
		$detail .= para('goals', 'Goals', $this->goals);
		$detail .= para('lessons', 'Lessons Learned', $this->lessons);
		
		return $detail;
	}

}

class summary{
	public $count = 0;
	public $estimated = 0;
	public $actual = 0;
	public $pctDone = 0;
	protected $info = '';
	
	public function setDisplay(){
	
	
	}
	
	public function display(){
		return $this->info;
	}
}

class summaryEffort extends summary{

	public function display(){

		$effort = openTable('hours-info','displayListTable');
		if ($this->count = 0){
			$item = wrapTh('No Tasks Created');
			$effort .= wrapTr($item);
		} else {
			if ($this->actual == 0){
				$item = wrapTh('No Activity History');
				$effort .= wrapTr($item);				
			} else {
				$heading = wrapTh('Tasks');
				$heading .= wrapTh('Estimated Hours');
				$heading .= wrapTh('Actual Hours');
				$heading .= wrapTh('% Done');
				$effort .= wrapTr($heading);
				$row = wrapTd($this->count);
				$row .= wrapTd($this->estimated);
				$row .= wrapTd($this->actual);
				$row .= wrapTd($this->pctDone);
				$effort .= wrapTr($row);
			}
		}
		$effort .= closeTable();
		return $effort;		
	}
	
} 

class summaryCost extends summary{
	public function display(){

		$costs = openTable('cost-info','displayListTable');
		
		if ($this->count > 0){

			$item = wrapTh('Items');
			$item = wrapTh('Actual');
			$item = wrapTh('Estimated');
		 	$costs .= wrapTr($item);
			$item = wrapTd($this->count);
			$item .= wrapTd($this->actual);
			$item .= wrapTd($this->estimated);
			$costs .= wrapTr($item);
		} else {
			$costs .= wrapTr(wrapTh('No Details'));
		}
		$costs .= closeTable();
		return $costs;
		
	}
}

class summaryProject{
	public $tasks;
	public $materials;
	public $receipts;
	public function __construct(){
		$this->tasks = new summaryEffort();
		$this->materials = new summaryCost();
		$this->receipts = new summaryCost();
	}
		
	public function display(){
	
		$effortAndCost = openTable('effort-and-cost','displayListTable');
		$row = wrapTd($this->tasks->display,30);
		$row .= wrapTd($this->materials->display,30);
		$row .= wrapTd($this->receipts->display,30);

		$effortAndCost .= wrapTr($row);
		$effortAndCost .= closeTable();
		$detail .= captionedParagraph('effort-and-cost','Time, Materials and Receipts',$effortAndCost);		
		return $detail;	
	}
}

class project extends _entity{
	protected $__MyClassName = 'Project';
	protected $_titleEntity = 'Project';
	public $totals;
	
	public $f;
	public $sql;
	public $links;
	

	public function __construct($mode = 'VIEW', $id = 0, $idParent = 0){
		parent::__construct($mode, $id, $idParent);
		
		$this->f = new projectFields;
		$this->sql = new projectSQL;
		$this->links = new projectLinks;
		$this->totals = new summaryProject;
	}
	
    public function setDetails(){
   		$this->echoState(true, 'setDetails');

		if ($this->id > 0){
		
			if ($this->pageMode == 'COPY'){
				$this->copyProject();
				$_SESSION['currentProjectId'] = $this->id;
			}

			$sql = $this->sql->info($this->id);
		
			$result = dbGetResult($sql);
			if($result){
			  	while ($row = $result->fetch_assoc())
				{	
					$this->f->setRowValues($row);
					
				}
				$result->close();
			}
		
			$this->setTaskSummary();
			
		}
	}	
	
	
	private function setMaterialSummary(){
	
	$this->echoValue(true, 'tasksCount', $this->tasksCount,'setMaterialSummary');
	
		$s = new MaterialSQL;
		$sql = $s->summaryProject($this->id, 'yes');

		$result = dbGetResult($sql);
		if($result){
	  	while ($row = $result->fetch_assoc())
		{	
			$this->totals->materials->count = $row["total_materials"];
			$this->totals->materials->actual = $row["sum_cost_actual"];
		}
		$result->close();
		}
		$this->echoValue(true, 'materialsCount', $this->totals->materials->count);

		//$this->setMaterialSummaryByType();	
	}
	

	private function setReceiptSummary(){
		$s = new ReceiptSQL;
		$sql = $s->summaryProject($this->id, 'yes');

		$result = dbGetResult($sql);

		if($result){
	  	while ($row = $result->fetch_assoc())
		{	
			$this->totals->receipts->count = $row["total_receipts"];
			$this->totals->receipts->actual = $row["sum_cost_actual"];
		}
		$result->close();
		}

		//$this->setReceiptSummaryByType();	
	}
	
	private function setReceiptSummaryByType(){

		$costs = openTable('receipt-info','displayListTable');
		
		if ($this->totals->receipts->count > 0){
			$heading = wrapTh('Receipt Type');
			$heading .= wrapTh('Received');
			$costs .= wrapTr($heading);
		
			$s = new ReceiptSQL;
			$sql = $s->summaryProjectReceiptype($this->id, 'yes');
			
			$result = dbGetResult($sql);
			if($result){
		  	while ($row = $result->fetch_assoc())
			{	
				$type = ($row["receipt_type"]);
				$costActual = $row["sum_cost_actual"];
				$item = wrapTd($type);
				$item .= wrapTd($costActual);
				$costs .= wrapTr($item);
			}
			$result->close();
			}
			
			$item = wrapTh('Totals');
			$item .= wrapTd($this->receiptsCost);
			$costs .= wrapTr($item);
		} else {
			$costs .= wrapTr(wrapTh('No Income Received'));
		}
		$costs .= closeTable();
		$this->receiptsSummary = $costs;
		
	}


	
	private function setTaskSummary(){
		$this->echoValue(true, 'tasksCount', $this->tasksCount, 'setTaskSummary');
		$s = new TaskSQL;
		$sql = $s->summaryProject($this->id);
		$result = dbGetResult($sql);
		if($result){
	  	while ($row = $result->fetch_assoc())
		{	
	//printLine('project.taskSummary in fetch row.total_tasks['.$row["total_tasks"].']');
			$this->totals->tasks->estimated = $row["sum_hours_estimated"];
			$this->totals->tasks->actual = $row["sum_hours_actual"];	
			$this->totals->tasks->pctDone = $row["overall_pct_done"];			
			$this->totals->tasks->count = $row["total_tasks"];	
		}
		$result->close();
		}

		//$this->echoValue(true, 'tasksCount', $this->tasksCount, 'setTaskSummary');
		
		
		if ($this->totals->tasks->count > 0){
			$this->setMaterialSummary();
			$this->setReceiptSummary();		
		}
		
	}
	
	protected function setPageTitle(){

		if ($this->pageMode != 'ADD'){
			$heading = $this->name;
		} else {
			$heading = 'Add New Project';
		}

		$this->_pageTitle = $heading;
	}
	
	
	protected function setPageMenu(){
		$menuType = 'LIST';
		$menuStyle = 'menu';
		
		//$this->links = new ProjectLinks($menuType,$menuStyle);
		$taskL = new TaskLinks($menuType,$menuStyle);		
		$activityL = new ActivityLinks($menuType, $menuStyle);
		$materialL = new MaterialLinks($menuType, $menuStyle);
		$receiptL = new ReceiptLinks($menuType, $menuStyle);
		
		$menu = $this->links->openMenu('section-heading-links');
		$menu .= $this->links->listingHref();
		$menu .= $this->links->resetMenu();

		if ($this->pageMode == 'VIEW'){
			$menu .= $this->links->detailEditHref($this->id);
			$menu .= $this->links->detailCopyHref($this->id);

		} elseif ($this->pageMode == 'EDIT'){
			$menu .= $this->links->detailViewHref($this->id);
		}

		if ($this->pageMode != 'ADD'){	
			$menu .= $this->links->resetMenu();
			$menu .= $activityL->linkProjectCalendar($this->id);
			$menu .= $activityL->linkProjectActivities($this->id);		
			if ($this->totals->materials->count > 0){
				$menu .= $this->links->resetMenu();		
				$menu .= $materialL->listingHref(-1,'ProjectMaterials',$this->id,'PROJECT','yes');
			}				
			if ($this->totals->receiptsCount > 0){
				$menu .= $this->links->resetMenu();		
				$menu .= $receiptL->listingHref(-1,'ProjectReceipts',$this->id,'PROJECT','yes');
			}				

			$menu .= $this->links->resetMenu();
			$menu .= $taskL->detailAddHref($this->id);
		}
		$menu .= $this->links->closeMenu();
		$this->_pageMenu = $menu;
	}
	
	
	
	public function display(){
		$detail = openDisplayDetails('entity', $this-> $_titleEntity.':  Details');
		$detail .= $this->f->displayDetail();
		$detail .= $this->totals->display();


		$tasks = new TaskList('VIEW', 0, $this->id);
		$tasks->setPaging($this->resultPage,10);
		$link = $this->links->detail('VIEW',$this->id);
		$detail .= $tasks->getListing($link);
		
		$detail .= closeDisplayDetails();
		return $detail;
	}
	
	public function options(
		$selectedValue = 0, 
		$idName = 'projectId', 
		$disabled = 'false',
		$showLink = true,
		$onChangeJS = NULL){
	
		$sql = $this->sql->options($selectedValue, $disabled);	
		$defaultValue = 0;
		$defaultCaption = '-select Project';
		$allOptions = getSelectOptionsSQL($sql,$selectedValue,$disabled,$defaultValue,$defaultCaption);		
		$select = getSelectList($idName,$allOptions,'none',$disabled,$onChangeJS);
		if ($showLink === true){
			//$l = new ProjectLinks;	
			$links =$ths->links->detailViewEditHref($selectedValue);
			$select .= $links;
		}
		return $select;
	}	
	
	public function optionsByType(
		$projectTypeId = '0',
		$selectedValue = '0', 
		$idName = 'projectId', 
		$disabled = 'false',
		$showLink = true,
		$onChangeJS = NULL){
	
		$sql = $this->sql->optionsByType($projectTypeId);
		$defaultValue = '0';
		$defaultCaption = '-select Project';
		$allOptions = getSelectOptionsSQL($sql,$selectedValue,$disabled,$defaultValue,$defaultCaption);			
		$select = getSelectList($idName,$allOptions,'none',$disabled,$onChangeJS);
		if ($showLink === true){
			//$l = new ProjectLinks;	
			$links =$this->links->detailViewEditHref($selectedValue);
			$select .= $links;
		}
		return $select;
	}	
	
	protected function setDefaults(){	
		global $sessionTime;
		$this->started = $sessionTime;	
		$this->locationId = '0';
		$this->typeId = '0';
		$this->priority = 1;
		$this->pctDone = '0';
	}
	
	public function editForm(){
	
	   		$this->echoState(true, 'editForm');
	   		
		if ($this->pageMode == 'ADD'){		
			$this->setDefaults();
			$legend = 'Add Project';
		} else {
			$legend = 'Edit Project';	
		}
		$entity = 'project';
		$c = new ProjectLinks;
		$contextMenu = $c->formatToggleLink('formOptional','+Options');
		$form = openEditForm($entity,$legend,'pr_Project_Save.php', $contextMenu);
		
		
		//start required fields
		$fields = inputFieldName($entity,$this->name,'name','Project');
		
		
		$pt = new ProjectType('OPTIONS');
		$select = $pt->options($this->typeId,'projectTypeId','false',false);
		$fields .= captionedInput('Project Type', $select);
		


		//end required fields
		$formRequired = $fields;

		//start optional fields
		$fields = inputFieldDescription($entity,$this->description,'description');

		$l = new Location('OPTIONS', $this->locationId,-1);
		$select = $l->options($this->locationId,'locationId','false',false);
		$fields .= captionedInput('Location', $select);


		$fields .= inputFieldTimestamp($entity, 'started', $this->started, 'Start Date'); 		

		$fields .= inputFieldNumber($entity,$this->priority,'priority','Priority');

		$fields .= inputFieldNumber($entity,$this->pctDone,'pctDone','% Done');

						
		$input = getSelectYesNo('showAlways', $this->showAlways);
		$fields .= captionedInput('Show in calendar', $input);


		$fields .= inputFieldDescription($entity,$this->purpose,'purpose','Purpose');
					
		$fields .= inputFieldComments($entity,$this->summary,'summary','Summary');
				
		
		
		//$input = getTextArea('projectGoals', $this->goals, 1000);
		//$form .= formInputRow($input, 'Goals');
		
		//$input = getTextArea('projectLessonsLearned', $this->lessons, 1000);
		//$form .= formInputRow($input, 'Lessons Learned');
		
		//end optional fields (hidden by default)
		$formOptional = $fields;
		
		
		$hidden = getHiddenInput('mode', $this->pageMode);
		$hidden .= getHiddenInput('parentId', $this->idParent);
		$hidden .= getHiddenInput('projectId', $this->id);
		$input = getSaveChangesResetButtons();
		$formSubmit = $hidden.$input;

		$form .= closeEditForm($entity,$formRequired,$formOptional,$formSubmit);		
		return $form;
	}
	
	public function collectPostValues(){
		$this->echoState(true, 'collectPostValues');
		$this->id = $_POST['projectId'];
		$this->parentId = $_POST['parentId'];
		$this->typeId = $_POST['projectTypeId'];
		$this->locationId = $_POST['locationId'];		
		$this->name = dbEscapeString($_POST['name']); 
		$this->description = dbEscapeString($_POST['description']); 
		//$this->goals = dbEscapeString($_POST['projectGoals']); 
		$this->summary = dbEscapeString($_POST['summary']); 
		//$this->lessons = dbEscapeString($_POST['projectLessonsLearned']); 
		$this->started = getTimestampPostValues('started');
		$this->priority = $_POST['priority']; 
		$this->pctDone = $_POST['pctDone']; 
		$this->purpose = dbEscapeString($_POST['purpose']); 
		$this->showAlways = $_POST['showAlways']; 
		
		$this->pageMode = $_POST['mode'];	
	}

    public function UpdateTaskSummary(){
		
		//refresh current project task summary values
		$this->setTaskSummary();
		if ($this->tasksCount > 0){
		
			$sql = " update projects p ";
			$sql .= " set p.pct_done = ".$this->tasksPctDone.", ";
			$sql .= " p.updated = CURRENT_TIMESTAMP, ";
			$sql .= " p.hours_estimated = ".$this->tasksHoursEstimated.",  ";
			$sql .= " p.hours_actual = ".$this->tasksHoursActual." ";
			$sql .= " where p.id = ".$this->id." ";
			
			$result = dbRunSQL($sql);
	
		}
	}


	protected function copyProject(){
		$sourceId = $this->id;
		$copyId = 0;
		
			$sql = $this->sql->copy($sourceId);
			
			$result = dbRunSQL($sql);
			$copyId = dbInsertedId();
			
			$sql = copyTasks($sourceId, $copyId);
			$result = dbRunSQL($sql);
		
			//reset page mode from COPY to EDIT
			//continue in setdetails using the copied id
			$this->setId($copyProjectId);
			$this->setPageMode('EDIT');
	}


	protected function saveUpdate(){
	
			$sql = " UPDATE projects AS p ";
			$sql .= " SET ";
			$sql .= " p.name = '".$this->name."', ";
			$sql .= " p.location_id = ".$this->locationId.", ";
			$sql .= " p.priority = ".$this->priority.", ";
			$sql .= " p.pct_done = ".$this->pctDone.", ";
			$sql .= " p.started = '".$this->started."', ";			
			$sql .= " p.updated = CURRENT_TIMESTAMP, ";
			$sql .= " p.description = '".$this->description."', ";
			$sql .= " p.show_always = '".$this->showAlways."', ";
			$sql .= " p.type_id = ".$this->typeId.", ";
			$sql .= " p.purpose = '".$this->purpose."', ";
			//$sql .= "`p`.`lessons_learned = '".$this->lessons."', ";
			$sql .= " p.summary = '".$this->summary."' ";
			$sql .= " WHERE p.id = ".$this->id."  ";			
			
			$result = dbRunSQL($sql);
			
	}
			
	protected function saveInsert(){
	
			$sql = " INSERT INTO projects ";
			$sql .= " (name, ";
			//$sql .= " parent_id, ";
			$sql .= " location_id, ";
			$sql .= " started, ";
			$sql .= " updated, ";
			$sql .= " description, ";
			$sql .= " summary, ";
			//$sql .= " lessons_learned, ";
			$sql .= " show_always, ";
			$sql .= " type_id, ";
			$sql .= " purpose) ";
			$sql .= " VALUES (";
			$sql .= "'".$this->name."', ";
			//$sql .= " ".$this->parentId.", ";
			$sql .= " ".$this->locationId.", ";
			$sql .= " '".$this->started."', ";
			$sql .= " CURRENT_TIMESTAMP, ";
			$sql .= "'".$this->description."', ";
			$sql .= "'".$this->summary."', ";
			//$sql .= "'".$this->lessons."', ";
			$sql .= "'".$this->showAlways."', ";
			$sql .= " ".$this->typeId.", ";
			$sql .= "'".$this->purpose."') ";
			
			$result = dbRunSQL($sql);
			
			$this->id = dbInsertedId();
	
	}
	
} 
?>
