<?php 

/*
class anyclassFields extends _entityFields{
//additional properties
 public $dateField;
 public $textField;
 public $numericField;
//expose primary fields
public function __construct(){
	$this->hasType = true;
	$this->hasProject = true;
$this->hasTask = true;
$this->hasActivity = false;
$this->hasCreated = true;
	$this->hasUpdated = true;
}
//set additional fields
public function setRow($row){
	parent::setRow();
 $this->dateField = $row["date_reported"];
 $this->textField= ($row["done_by"]);
 $this->numericField = $row["quantity"];	
}
//defaults for additional fields
public function defaults(){
	parent::defaults();
 $this->field = 1;
}
//format custom fields
public function format(){
	parent::format();
 $this->textField = formatText($this->notes);
 $this->dateField = formatDate($this->dateReported);
}
//display custom fields for VIEW
public function display(){
	$this->addContent(parent::display(),true);
	$this->detailPara('caption',$this->field);
	return $this->getContent();
}
//add custom columns
public function listHeading(){
	$this->addContent(parent::listHeading(),true);
	$this->listTh('caption');
	return $this->getContent();
}
public function listDetail(){
	$this->addContent(parent::listDetail(),true);
	$this->listTd($this->field);
	return $this->getContent();
}
//get edit form values
public function getPostVars(){
	parent::getPostVars();
 $this->textField = $this->postString('notes'); 
 $this->dateField = $this->postDate('dateReported');
 $this->numericField = $this->postVar('quantity'); 
}

}*/


interface IentityFields {
	public function __construct();
	public function setRow($row);
	public function format();
	public function defaults();
	public function listHeading();
	public function listDetail();
	public function display();
	public function getPostVars();
}
class field{

public $value;
public $type = 'NUMBER';
public $getRow = false;
public $getPost = false;
public $showList = false;
public $showDisplay = false;
public function __construct($type = 'ID'){

$this->type = $type;
}
public function useField($row = true, $post = true, $list = true, display = true){
	$this->getRow = $row;
	$this->getPost = $post;
	$this->showList = $list;
	$this->showDisplay = $display;
}


abstract class _entityFields extends _baseEntityFields implements IentityFields{

	public $id = 0;
	
	
	public $name;		
	

	public $hasDisplayOrder = false;
    public $listDisplayOrder = false;
	public $displayOrder = 0;

	//long text fields
	public $hasDescription = false;
    public $listDescription = false;
	public $description = '';

	public $hasNotes = false;
   	public $listNotes = false;
   	public $notes = '';
	 
	public $hasSummary = false;
   	public $listSummary = false;
   	public $summary = '';
   	
   	public $hasComments = false;
   	public $listComments = false;
   	public $comments = '';
   	
   	//userid fields
   	public $hasDoneBy = false;
    public $listDoneBy = false;
	public $doneBy = '';
	
	public $hasReviewedBy = false;
    public $listReviewedBy = false;
	public $reviewedBy = '';
	
	public $hasApprovedBy = false;
    public $listApprovedBy = false;
	public $approvedBy = '';
	
	//date fields
	public $hasStarted = false;
   	public $listStarted = false;
   	public $started;
	 
	public $hasReported = false;
   	public $listReported = false;
   	public $reported;
	 
    public $hasCreated = false;
    public $listCreated = false;
	public $created;
	
    public $hasUpdated = false;
    public $listUpdated = false;
    public $updated;
    
    public $hasReviewed = false;
    public $listReviewed = false;
	public $reviewed;
	
    
    public $hasHighlight = false;
    public $listHighlight = false;
    public $highlight = 'none';
	public $highlightStyle = 'none';
    
    public $hasType = false;
    public $listType = false;
	public $idType = 0;
	public $nameType;
	
	public $hasQuantityEstimated = false;
    public $listQuantityEstimated = false;
	public $quantityEstimated = 0;
	
   	public $hasQuantityActual = false;
    public $listQuantityActual = false;
	public $quantityActual = 0;
	
	public $hasUnits = false;
    public $listUnits = false;
	public $idUnits = 0;
	public $nameUnits;
	
	
	public $hasLocation = false;
	public $listLocation = false;
	public $idLocation = 0;
	public $nameLocation;
	 
    public $hasParent = false;
    public $listParent = false;
   	public $idParent = 0;
   	public $nameParent;
   	
   	public $hasProject = false;
   	public $listProject = false;
   	public $idProject = 0;
   	public $nameProject;
	
	public $hasTask = false;
   	public $listTask = false;
   	public $idTask = 0;
   	public $nameTask;
   	
	public $hasActivity = false;
   	public $listActivity = false;
   	public $idActivity = 0;
   	public $nameActivity;
	 
	
    abstract public function __construct();
    
    protected function reset(){
    
    	$this->id = 0;
		$this->name = '';
		
		if ($this->hasDescription == true){
			$this->description = '';
		}
		
		if ($this->hasComments == true){
			$this->comments = '';
		}
		
		if ($this->hasSummary == true){
			$this->summary = '';
		}
		
		if ($this->hasNotes == true){
			$this->notes = '';
		}
		
		if ($this->hasHighlight == true){
			$this->highlightStyle = 'none';
		}
		
		if ($this->hasCreated == true){
			$this->created = '';	
		}
		
		if ($this->hasUpdated == true){
			$this->updated = '';
		}
		
		if ($this->hasStarted == true){
			$this->started = '';	
		}
		
		if ($this->hasReported == true){
			$this->reported = '';
		}
		
		if ($this->hasReviewed == true){
			$this->reviewed = 'no';	
		}
		if ($this->hasApproved == true){
			$this->approved = 'no';
		}
		
		if ($this->hasType == true){
			$this->idType = 0;
			$this->nameType = '';
		}
		
		if ($this->hasParent == true){
			$this->idParent = 0;
			$this->nameParent = '';
		}
		
		if ($this->hasLocation == true){
			$this->idLocation = 0;
			$this->nameLocation = '';
		}
    
    	if ($this->hasProject == true){
			$this->idProject = 0;
			$this->nameProject = '';
		}
		
    	if ($this->hasTask == true){
			$this->idTask = 0;
			$this->nameTask = '';
		}
		
		   if ($this->hasActivity == true){
			$this->idActivity = 0;
			$this->nameActivity = '';
		}
		
		
    }
    
	public function setRow($row){
		$this->reset;
		$this->id = $row["id"];
		$this->name = ($row["name"]);
		
		if ($this->hasDescription == true){
			$this->description = ($row["description"]);
		}
		
		if ($this->hasNotes == true){
			$this->notes = ($row["notes"]);
		}
		
		if ($this->hasComments == true){
			$this->comments = ($row["comments"]);
		}
		
		if ($this->hasSummary == true){
			$this->summary = ($row["summary"]);
		}
		
		if ($this->hasHighlight == true){
			$this->highlightStyle = ($row["highlight_style"]);
		}
		
		if ($this->hasDisplayOrder == true){
			$this->displayOrder = ($row["display_order"]);
		}
		
		if ($this->hasStarted == true){
			$this->started = ($row["started"]);		
		}			
		if ($this->hasReported == true){
			$this->reported = ($row["reported"]);		
		}
		
		if ($this->hasReviewed == true){
			$this->reviewed = ($row["reviewed"]);		
		}			
		if ($this->hasApproved == true){
			$this->approved = ($row["approved"]);		
		}
		if ($this->hasCreated == true){
			$this->created = ($row["created"]);		
		}			
		if ($this->hasUpdated == true){
			$this->updated = ($row["updated"]);		
		}
		
		if ($this->hasType == true){
			$this->idType = ($row["type_id"]);
			$this->nameType = $row["type_name"];
		}
		if ($this->hasParent == true){
			$this->idParent = $row["parent_id"];
			$this->nameParent = $row["parent_name"];
		}
		if ($this->hasLocation == true){
			$this->idLocation = $row["location_id"];
			$this->nameLocation = ($row["location_name"]);
		}
		if ($this->hasProject == true){
			$this->idProject = $row["project_id"];
			$this->nameProject = $row["project_name"];
		}
		if ($this->hasTask == true){
			$this->idTask = $row["task_id"];
			$this->nameTask = $row["task_name"];
		}
		
		if ($this->hasActivity == true){
			$this->idActivity = $row["activity_id"];
			$this->nameActivity = $row["activity_name"];
		}
	}
	
	public function defaults(){
		$this->reset;
		//set doneby
		//set started or reported
		
	}
	
	
	public function format(){
		$this->name = $this->formatText($this->name,true);
		$this->description = $this->formatText($this->description,$this->hasDescription);
		$this->notes = $this->formatText($this->notes,$this->hasNotes);
		$this->summary = $this->formatText($this->summary,$this->hasSummary);
		$this->comments = $this->formatText($this->comments,$this->hasComments);
		$this->created = $this->formatDate($this->created,$this->hasCreated);
		$this->updated = $this->formatDate($this->updated,$this->hasUpdated);
		$this->started = $this->formatDate($this->started,$this->hasStarted);
		$this->reported = $this->formatDate($this->reported,$this->hasReported);
		$this->reviewed = $this->formatDate($this->reviewed,$this->hasReviewed);
		$this->approved = $this->formatDate($this->approved,$this->hasApproved);
	}
	
	public function listHeading(){
		//$this->resetContent(true);
		$this->listTh('Id',true,true);
		$this->listTh('Order', listDisplayOrder);
		$this->listTh('Name',true);
		
		$this->listTh('Description',$this->listDescription);
		$this->listTh('Notes',$this->listNotes);
		$this->listTh('Summary',$this->listSummary);
		$this->listTh('Comments',$this->listComments);
		
		$this->listTh('Type',$this->listType);
		$this->listTh('Location',$this->listLocation);
		
		$this->listTh('Project',$this->listProject);
		$this->listTh('Task',$this->listTask);
		$this->listTh('Activity',$this->listActivity);
		
		$this->listTh('Parent',$this->listParent);
		
		$this->listTh('Created',$this->listCreated);
		$this->listTh('Updated',$this->listUpdated);
		$this->listTh('Started',$this->listStarted);
		$this->listTh('Reported',$this->listReported);
		$this->listTh('Reviewed',$this->listReviewed);
		$this->listTh('Approved',$this->listApproved);
		
		$this->listTh('Highlight',$this->listHighlight);
		return $this->getContent();
	}
	
	public function listDetail(){
		$this->format();
		
		//$this->resetContent(true);
		$this->listTd($this->id,true,true);
		$this->listTd($this->displayOrder,$this->listDisplayOrder);
		$this->listTd($this->name,true);
		
		$this->listTd($this->description,$this->listDescription);
		$this->listTd($this->notes,$this->listNotes);
		$this->listTd($this->comments,$this->listComments);
		$this->listTd($this->summary,$this->listSummary);
		
		
		
		$this->listTd($this->nameType,$this->listType);
		$this->listTd($this->nameLocation,$this->listLocation);
		
		$this->listTd($this->nameProject,$this->listProject);
		$this->listTd($this->nameTask,$this->listTask);
		$this->listTd($this->nameActivity,$this->listActivity);
				
		$this->listTd($this->nameParent,$this->listParent);
		
		$this->listTd($this->created,$this->listCreated);
		$this->listTd($this->updated,$this->listUpdated);
		$this->listTd($this->started,$this->listStarted);
		$this->listTd($this->reported,$this->listReported);
		$this->listTd($this->reviewed,$this->listReviewed);
		$this->listTd($this->approved,$this->listApproved);
		
		$this->listTd($this->highlightStyle,$this->listHighlight);
		return $this->getContent();

	}

	public function display(){
		$this->format();
		
		$this->resetContent(true);
		$this->detailPara('Order',$this->displayOrder,$this->hasDisplayOrder);
		$this->detailPara('Id',$this->id,true);
		$this->detailPara('Name',$this->name,true);
		
		$this->detailPara('Description',$this->description,$this->hasDescription);
		$this->detailPara('Summary',$this->summary,$this->hasSummary);
		$this->detailPara('Notes',$this->notes,$this->hasNotes);
		$this->detailPara('Comments',$this->comments,$this->hasComments);
		
		$this->detailPara('Type',$this->nameType,$this->hasType);
		$this->detailPara('Location',$this->nameLocation,$this->hasLocation);
		
		$this->detailPara('Project',$this->nameProject,$this->hasProject);
		$this->detailPara('Task',$this->nameTask,$this->hasTask);
		$this->detailPara('Activity',$this->nameActivity,$this->hasActivity);
		
		
		$this->detailPara('Parent',$this->nameParent,$this->hasParent);
		
		$this->detailPara('Created',$this->created,$this->hasCreated);
		$this->detailPara('Updated',$this->updated,$this->hasUpdated);
		
		$this->detailPara('Started',$this->started,$this->hasStarted);
		$this->detailPara('Reported',$this->reported,$this->hasReported);
		$this->detailPara('Reviewed',$this->reviewed,$this->hasReviewed);
		$this->detailPara('Approved',$this->approved,$this->hasApproved);
		
		$this->detailPara('Highlight',$this->highlightStyle,$this->hasHighlight);
		return $this->getContent();
		
	}
	

	
	public function getPostVars(){
	
		$this->id = $this->postVar('id',0);
		$this->name = $this->postString('name');
		
		if ($this->hasDisplayOrder == true){
			$this->displayOrder = $this->postString('displayOrder');
		}
		
		if ($this->hasDescription == true){
			$this->description = $this->postString('description');
		}
		
		if ($this->hasNotes == true){
			$this->notes = $this->postString('notes');
		}
		
		if ($this->hasComments == true){
			$this->comments = $this->postString('comments');
		}
		
		if ($this->hasSummary == true){
			$this->summary = $this->postString('summary');
		}
		if ($this->hasStarted == true){
			$this->started = $this->postDate('started');
		}
		
		if ($this->hasReported == true){
			$this->reported = $this->postDate('reported');
		}
		
		if ($this->hasReviewed == true){
			$this->reviewed = $this->postDate('reviewed');
		}
		
		if ($this->hasApproved == true){
			$this->approved = $this->postDate('approved');
		}
		
		if ($this->hasHighlight == true){
			$this->highlightStyle = $this->postString('highlightStyle');
		}
		if ($this->hasType == true){
		$this->idType = $this->postVar('idType',0);
		}
		if ($this->hasLocation == true){
		$this->idLocation = $this->postVar('idLocation',0);
		}
		if ($this->hasParent == true){
		$this->idParent = $this->postVar('idParent',0);
		}
		if ($this->hasProject == true){
		$this->idProject = $this->postVar('idProject',0);
		}
		if ($this->hasTask == true){
		$this->idTask = $this->postVar('idTask',0);
		}
		if ($this->hasActivity == true){
		$this->idActivity = $this->postVar('idActivity',0);
		}
		
		
		
				
	}
}

abstract class _entity extends _baseEntity{

	protected $__MyClassName = '__Entity';
	protected $_titleEntity = 'Entity';
	protected $pageSave = 'save.php';
	
  	public $f;
    public $sql;
	public $links;
 
 
 	public function __construct($mode = 'VIEW', $id = 0, $idParent = 0){
		parent::__construct($mode, $id, $idParent);
		//$this->setPageSave();
		//$this->setEntityTitle();
		$this->setHelperClasses();
	}
	/* next review cycle
	abstract protected function setPageSave();
	abstract protected function setEntityTitle();
	abstract protected function afterConstruct();*/
	abstract protected function setHelperClasses();
	abstract protected function beforeSetDetails();
	abstract protected function afterSetDetails();
	abstract protected function afterDisplay();
	abstract protected function setPageMenu();
	abstract protected function afterSetDefaults();
	abstract protected function editForm();
	abstract protected function afterCollectPostValues();
		
	
	public function setDetails(){
		$this->beforeSetDetails();

		if ($this->id > 0){
			$sql = $this->sql->info($this->id);
			$result = dbGetResult($sql);
			if($result){
				while ($row = $result->fetch_assoc())
				{	
					$this->f->setRow($row);
				}
				$result->close();
			}
			$this->synchIds();
		}
		$this->afterSetDetails();
	}	
	
	public function options(
		$selectedId = 0, 
		$idName = 'entityTypeId', 
		$disabled = 'false', 
		$showLink = true){

		$sql = $this->sql->options($selectedId, $disabled);
		$defaultValue = 0;
		$defaultCaption = '-select '.$this->_titleEntity;
		$allOptions = getSelectOptionsSQL($sql,$selectedId,$disabled,$defaultValue,$defaultCaption);		

		$select = getSelectList($idName,$allOptions,'none',$disabled );
		$select.= $this->optionsLink($showLink, $selectedId);
		
		return $select;
	}	
	
	protected function optionsLink($showLink = true, $selectedId = 0){
		if ($showLink == true){
			$links =$this->links->view('View',$selectedId);
		} else {
			$links = '';
		}
		return $links;
	}
	
	public function listHeading(){
		$heading = wrapTh($this->_titleEntity);
		$heading .= $this->f->listHeading();
		$list = wrapTr($heading);
		return $list;
	}
	
	protected function listRowLink(){
		$link = $this->links->itemViewEdit($this->f->name,$this->f->id);
		return $link;
	}
	
	protected function listRowFormat(){
		$detail = wrapTd($this->listRowLink());
		$detail .= $this->f->listDetail();		
		$listRow = wrapTr($detail,$this->f->highlightStyle);
		return $listRow;
	}
	
	public function listRow($row){
		$this->f->setRow($row);
		return $this->listRowFormat();
	}

	protected function display(){
		$detail = openDisplayDetails('entity', $this->_titleEntity.':  Details');
		$detail .= $this->f->display();
		$detail .= $this->afterDisplay();
		$detail .= closeDisplayDetails();
		return $detail;
	}
	
	protected function setPageTitle(){
		$heading = $this->pageMode.':  '.$this->_titleEntity;
		$this->_pageTitle = $heading;
	}
	
	protected function setDefaults(){
		if ($this->pageMode == 'ADD'){
	 		$this->f->defaults();
	 	}
	 	$this->afterSetDefaults();
	}

	public function addForm($idParent = 0){
		$this->pageMode = 'ADD';
		$this->setDefaults();
		$this->f->idParent = $idParent;
		return $this->editForm();
	}

	public function collectPostValues(){
		$this->pageMode = $_POST['mode'];	
		$this->f->getPostVars();
	//	$this->synchIds();
		$this->afterCollectPostValues();
		$this->echoState(true,'collectPostValues');
	}
				
	protected function synchIds(){
		$this->id = $this->f->id;
		$this->idParent = $this->f->idParent;
	}
	
	public function printPage(){
		$this->echoState(true, 'printPage');
		$heading = $this->getPageHeading();
		$details = $this->getPageDetails();
		$site = new _SiteTemplate();
		$site->setSiteTemplateDetails($heading, $details);
		$site->printSite();
	}
	
	protected function getPageHeading(){
		$this->setPageTitle();
		$this->setPageMenu();
		
		$heading = openDiv('section-title');
		$heading .= $this->_pageTitle;
		$heading .= closeDiv();		
		$heading = openDiv('section-menu');
		$heading .= $this->_pageMenu;
		$heading .= closeDiv();		
		
		return $heading;
	}
	
	protected function getPageDetails(){	
	//case statement
		if ($this->pageMode == 'VIEW'){
			$details = $this->display();
		} else {
		
			if ($this->pageMode == 'EDIT'){
				$details = $this->editForm();
			} else {
				$details = $this->addForm();
			}
			
		}
			
		return $details;
	}
	
	protected function copy(){
		$this->echoState(true, 'copy');
		printLine('__Entity.copy not overridden');
	}
	
	protected function saveUpdate(){
		$this->echoState(true, 'saveUpdate');
		printLine('__Entity.saveUpdate not overridden in child');
	}
	
	protected function saveInsert(){
		$this->echoState(true, 'saveInsert');
		printLine ('__Entity.saveInsert not overridden in child');
	}
	
	public function saveChanges(){
		$this->echoState(true, 'saveChanges');
		
		if ($this->pageMode == 'EDIT'){
			$this->saveUpdate();
		} else {
			$this->saveInsert();
		}
	}
	
	
}


?>
