<?php 

abstract class _entityFields extends _baseEntityFields{

	/******
	 _entityFields    id, name, description, 
	 highlightStyle, created, updated
	 idType, idParent, idProject,idTask
	 ****/

	public $id = 0;
	public $name;		
	public $description;
	
    public $hasCreated = false;
    public $listCreated = false;
	public $created;
    public $hasUpdated = false;
    public $listUpdated = false;
    public $updated;
    
    public $hasHighlight = false;
    public $listHighlight = false;
	public $highlightStyle = 'none';
    
    public $hasType = false;
    public $listType = false;
	public $idType = 0;
	public $nameType;
	
	public $hasLocation = false;
	public $listLocation = false;
	public $idLocation;
	public $nameLocation;
	 
    public $hasParent = false;
    public $listParent = false;
   	public $idParent = 0;
   	public $nameParent;
   	
   	public $hasProject = false;
   	public $listProject = false;
   	public $idProject = 0;
   	public $nameProject;
	
	public $hasTask = false;
   	public $listTask = false;
   	public $idTask = 0;
   	public $nameTask;
	 
    abstract public function __construct();
    
    protected function reset(){
    
    	$this->id = 0;
		$this->name = '';
		$this->description ='';
		
		if ($this->hasHighlight == true){
			$this->highlightStyle = 'none';
		}
		
		$this->created = '';	
		$this->updated = '';
		
		if ($this->hasType == true){
			$this->idType = 0;
			$this->nameType = '';
		}
		if ($this->hasParent == true){
			$this->idParent = 0;
			$this->nameParent = '';
		}
		
		if ($this->hasLocation == true){
			$this->idLocation = 0;
			$this->nameLocation = '';
		}
    
    	if ($this->hasProject == true){
			$this->idProject = 0;
			$this->nameProject = '';
		}
		
    	if ($this->hasTask == true){
			$this->idTask = 0;
			$this->nameTask = '';
		}
    }
    
	public function setRowValues($row){
		$this->reset;
		$this->id = $row["id"];
		$this->name = ($row["name"]);
		$this->description = ($row["description"]);
		if ($this->hasHighlight == true){
			$this->highlightStyle = ($row["highlight_style"]);
		}
		
		if ($this->hasCreated == true){
			$this->created = ($row["created"]);		
		}			
		if ($this->hasUpdated == true){
			$this->updated = ($row["updated"]);		
		}
		
		if ($this->hasType == true){
			$this->idType = ($row["type_id"]);
			$this->nameType = $row["type_name"];
		}
		if ($this->hasParent == true){
			$this->idParent = $row["parent_id"];
			$this->nameParent = $row["parent_name"];
		}
		
		if ($this->hasProject == true){
			$this->idProject = $row["project_id"];
			$this->nameProject = $row["project_name"];
		}
					
		if ($this->hasLocation == true){
			$this->idLocation = $row["location_id"];
			$this->nameLocation = ($row["location_name"]);
		}
			
		if ($this->hasTask == true){
			$this->idTask = $row["task_id"];
			$this->nameTask = $row["task_name"];
		}
		
		
	}
	
	public function setDefaults(){
		$this->reset;
		
	}
	
	protected function formatForDisplay(){
		$this->name = displayLines($this->name);
		$this->description = displayLines($this->description);
		if ($this->hasCreated == true){
			$this->created = getTimestampDate($this->created);
		}
		if ($this->hasUpdated == true){
			$this->updated = getTimestampDate($this->updated);
		}
	}
	
	public function listHeading(){
		$this->resetContent;
		$this->listTh('Id',true);
		$this->listTh('Name',true);
		$this->listTh('Description',true);
		
		$this->listTh('Type',$this->listType);
		$this->listTh('Location',$this->listLocation);
		$this->listTh('Project',$this->listProject);
		$this->listTh('Task',$this->listTask);
		$this->listTh('Parent',$this->listParent);
		$this->listTh('Created',$this->listCreated);
		$this->listTh('Updated',$this->listUpdated);
		$this->listTh('Highlight',$this->listHighlight);
		return $this->getContent();
	}
	
	public function listDetail(){
		$this->formatForDisplay();
		
		$this->resetContent;
		$this->listTd($this->id,true);
		$this->listTd($this->name,true);
		$this->listTd($this->description,true);
		
		$this->listTd($this->nameType,$this->listType);
		$this->listTd($this->nameLocation,$this->listLocation);
		$this->listTd($this->nameProject,$this->listProject);
		$this->listTd($this->nameTask,$this->listTask);
		$this->listTd($this->nameParent,$this->listParent);
		$this->listTd($this->created,$this->listCreated);
		$this->listTd($this->updated,$this->listUpdated);
		$this->listTd($this->highlightStyle,$this->listHighlight);
		return $this->getContent();

	}

	public function displayDetail(){
		$this->formatForDisplay();
		
		$this->resetContent;
		$this->detailPara('Id',$this->id,true);
		$this->detailPara('Name',$this->name,true);
		$this->detailPara('Description',$this->description,true);
		
		$this->detailPara('Type',$this->nameType,$this->listType);
		$this->detailPara('Location',$this->nameLocation,$this->listLocation);
		$this->detailPara('Project',$this->nameProject,$this->listProject);
		$this->detailPara('Task',$this->nameTask,$this->listTask);
		$this->detailPara('Parent',$this->nameParent,$this->listParent);
		$this->detailPara('Created',$this->created,$this->listCreated);
		$this->detailPara('Updated',$this->updated,$this->listUpdated);
		$this->detailPara('Highlight',$this->highlightStyle,$this->listHighlight);
		return $this->getContent();
		
	
	}
	
	protected function getPostVariables(){
	$this->id = $this->postVariable('id',0);
	}
}

abstract class _entity extends _baseEntity{
/*
	public const VIEW = 'VIEW';
	public const EDIT = 'EDIT';
	public const ADD = 'ADD';
	public const COPY = 'COPY';
	public const FETCH = 'FETCH';
	public const OPTIONS = 'OPTIONS';
	public const COUNT = 'COUNT';
	public const LIST = 'LIST';
	public const SUMMARY= 'SUMMARY';
		*/
	protected $__MyClassName = '__Entity';
	protected $_titleEntity = 'Entity';
	protected $pageSave = '[entity]Save.php';
	
  	public $f;
    public $sql;
	public $links;
 
 
 	public function __construct($mode = 'VIEW', $id = 0, $idParent = 0){
		parent::__construct($mode, $id, $idParent);
		$this->setHelperClasses();
	
	}
	
	abstract protected function setHelperClasses();
	
	
	public function setDetails(){
		if ($this->id > 0){
			$sql = $this->sql->info($this->id);
			$result = dbGetResult($sql);
			if($result){
				while ($row = $result->fetch_assoc())
				{	
					$this->setRowValues($row);
				}
				$result->close();
			}
		}
	}	
	
	
	protected function setRowValues($row){
		$this->f->setRowValues($row);
	
	}
	
	public function options(
		$selectedId = 0, 
		$idName = 'entityTypeId', 
		$disabled = 'false', 
		$showLink = true){

		$sql = $this->sql->options($selectedId, $disabled);
		$defaultValue = 0;
		$defaultCaption = '-select '.$this->_titleEntity;
		$allOptions = getSelectOptionsSQL($sql,$selectedId,$disabled,$defaultValue,$defaultCaption);		

		$select = getSelectList($idName,$allOptions,'none',$disabled );
		$select.= $this->optionsLink($showLink, $selectedId);
		
		return $select;
	}	
	
	protected function optionsLink($showLink = true, $selectedId = 0){
		if ($showLink == true){
			$links =$this->links->view('View',$selectedId);
		} else {
			$links = '';
		}
		return $links;
	}
    
	
	public function listHeading(){
		$heading = wrapTh($this->_titleEntity);
		$heading .= $this->f->listHeading();
		$list = wrapTr($heading);
		return $list;
	}
	
	protected function listRowLink(){
		$link = $this->links->itemViewEdit($this->f->name,$this->f->id);
		return $link;
	}
	
	public function listRowFormat(){
		$detail = wrapTd($this->listRowLink());
		$detail .= $this->f->listDetail();		
		$listRow = wrapTr($detail,$this->f->highlightStyle);
		return $listRow;
	}
	
	protected function display(){
	$close = true;//){
		$detail = openDisplayDetails('entity', $this->_titleEntity.':  Details');
		$detail .= $this->f->displayDetail();
		if ($close == true){
			$detail .= closeDisplayDetails();
		}
		return $detail;
	}
	
	
	protected function setPageTitle(){
		$heading = $this->pageMode.':  '.$this->_titleEntity;
		$this->_pageTitle = $heading;
	}
	
	abstract protected function setPageMenu();

	
	protected function setDefaults(){
		if ($this->pageMode == 'ADD'){
	 		$this->f->setDefaults();
	 	}
	}
	
	public function addForm(){
		$this->pageMode = 'ADD';
		$this->setDefaults();
		return $this->editForm();
	}
	
	abstract protected function editForm();
	
	
	public function printPage(){
		$this->echoState(true, 'printPage');
		$heading = $this->getPageHeading();
		$details = $this->getPageDetails();
		$site = new _SiteTemplate;
		$site->setSiteTemplateDetails($heading, $details);
		$site->printSite();
	}
	
	protected function getPageHeading(){
		$this->setPageTitle();
		$this->setPageMenu();
		
		$heading = openDiv('section-heading-title');
		$heading .= $this->_pageTitle;
		$heading .= closeDiv();		
		
		$heading .= $this->_pageMenu;
		return $heading;
	}
	
	protected function getPageDetails(){	
		if ($this->pageMode == 'VIEW'){
			$details = $this->display();
		} else {
		
			if ($this->pageMode == 'EDIT'){
				$details = $this->editForm();
			} else {
				$details = $this->addForm();
			}
			
		}
			
		return $details;
	}
	
	protected function copy(){
		$this->echoState(true, 'copy');
		printLine('__Entity.copy not overridden');
	}
	
	protected function saveUpdate(){
		$this->echoState(true, 'saveUpdate');
		printLine('__Entity.saveUpdate not overridden in child');
	}
	
	protected function saveInsert(){
		$this->echoState(true, 'saveInsert');
		printLine ('__Entity.saveInsert not overridden in child');
	}
	
	public function saveChanges(){
		$this->echoState(true, 'saveChanges');
		
		if ($this->pageMode == 'EDIT'){
			$this->saveUpdate();
		} else {
			$this->saveInsert();
		}
	}
	
	
}


?>
