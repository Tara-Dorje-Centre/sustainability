<?php 

class _entityFields{

	/******
	 _entityFields    id, name, description, 
	 highlightStyle, created, updated
	 idType, idParent,
	 ****/

	public $id;	
	public $name;		
	public $description;
	public $idParent;
	public $nameParent;
	public $idType;
	public $nameType;
	public $highlightStyle = 'none';
	public $created;
    public $updated;
    
    protected $hasType = false;
    protected $hasParent = false;
    
    public function __construct($hasType = false, $hasParent = false){
    	$this->hasType = $hasType;
    	$this->hasParent = $hasParent;
    }
    
    protected function reset(){
    
    	$this->id = 0;
		$this->name = '';
		$this->description ='';
		$this->highlightStyle = 'none';
		$this->created = '';	
		$this->updated = '';
		if ($this->hasType == true){
			$this->idType = 0;
			$this->nameType = '';
		}
		if ($this->hasParent == true){
			$this->idParent = 0;
			$this->nameParent = '';
		}
    
    }
    
	public function setRowValues($row){
		$this->reset;
		$this->id = $row["id"];
		$this->name = ($row["name"]);
		$this->description = ($row["description"]);
		$this->highlightStyle = ($row["highlight_style"]);
		$this->created = ($row["created"]);			
		$this->updated = ($row["updated"]);		
		if ($this->hasType == true){
			$this->idType = ($row["type_id"]);
			$this->nameType = $row["type_name"];
		}
		if ($this->hasParent == true){
			$this->idParent = $row["parent_id"];
			$this->nameParent = $row["parent_name"];
		}
		
		
	}
	
	public function setDefaultValues(){
		$this->reset;
		$this->id = 0;
	
	}
	
	protected function formatForDisplay(){
		$this->name = displayLines($this->name);
		$this->description = displayLines($this->description);
		$this->created = getTimestampDate($this->created);
		$this->updated = getTimestampDate($this->updated);
	}
	
	
	public function listHeading(){
		$heading = wrapTh('#Name');
		$heading .= wrapTh('Description');
		$heading .= wrapTh('Highlight Style');
		if ($this->hasType == true){
			$heading .= wrapTh('Type');
		}
		if ($this->hasParent == true){
			$heading .= wrapTh('Parent');
		}
		return $heading;
	}
	
	public function listDetail(){
		$this->formatForDisplay();
		$detail = wrapTd($this->name);
		$detail .=  wrapTd($this->description);			
		$detail .= wrapTd($this->highlightStyle);		
		if ($this->hasType == true){
			$detail .=  wrapTd($this->nameType);			
		}
		if ($this->hasParent == true){
			$detail .=  wrapTd($this->nameParent);			
		}
		return $detail;
	}
	
	public function displayDetail(){
		$this->formatForDisplay();
		$detail = para('id', 'Id', $this->id);
		$detail .= para('name', 'Name', $this->name);
		$detail .= para('description', 'Description', $this->description);
		$detail .= para('created', 'Created', $this->created);
		$detail .= para('updated', 'Updated', $this->updated);
		$detail .= para('highlight-style', 'Highlight', $this->highlightStyle);
		if ($this->hasType == true){
			$detail .= para('type', 'Type', $this->nameType);
		}
		if ($this->hasParent == true){
			$detail .= para('parent', 'Parent', $this->nameParent);
		}
		return $detail;
	}
}

class _entity extends _baseEntity{
	protected $__MyClassName = '__Entity';
	protected $_titleEntity = 'Entity';
	protected $pageSave = '[entity]Save.php';
	
  	public $f;
    public $sql;
	public $links;
 
 
 	public function __construct($mode = 'VIEW', $id = 0, $idParent = 0){
		parent::__construct($mode, $id, $idParent);
		$this->f = new _entityFields();
		$this->sql = new _entitySQL();
		$this->links = new _entityLinks();
	}
	
	public function setDetails(){
		if ($this->id > 0){
			$sql = $this->sql->info($this->id);
			$result = dbGetResult($sql);
			if($result){
				while ($row = $result->fetch_assoc())
				{	
					$this->f->setRowValues($row);
				}
				$result->close();
			}
		}
	}	
	
	
	public function options(
		$selectedId = 0, 
		$idName = 'entityTypeId', 
		$disabled = 'false', 
		$showLink = true){

		$sql = $this->sql->options($selectedId, $disabled);
		$defaultValue = 0;
		$defaultCaption = '-select '.$this->$_titleEntity;
		$allOptions = getSelectOptionsSQL($sql,$selectedId,$disabled,$defaultValue,$defaultCaption);		

		$select = getSelectList($idName,$allOptions,'none',$disabled );
		$select.= $this->optionsLink($showLink, $selectedId);
		
		return $select;
	}	
	
	protected function optionsLink($showLink = true, $selectedId = 0){
		if ($showLink == true){
			$links =$this->links->detailViewEditHref($selectedId);
		} else {
			$links = '';
		}
		return $links;
	}
    
	
	public function listHeading(){
		$heading = wrapTh($this->_titleEntity);
		$heading .= $this->f->listHeading();
		$list = wrapTr($heading);
		return $list;
	}
	
	protected function listRowLink(){
		$link = $this->links->detailViewEditHref($this->f->id,$this->f->name);
		return $link;
	}
	
	public function listRowFormat(){
		$detail = wrapTd($this->listRowLink());
		$detail .= $this->f->listDetail();		
		$listRow = wrapTr($detail,$this->f->highlightStyle);
		return $listRow;
	}
	
	public function display(){
		$detail = openDisplayDetails('entity', $this->_titleEntity.':  Details');
		$detail .= $this->f->displayDetail();
		$detail .= closeDisplayDetails();
		return $detail;
	}
	
	
	protected function setPageTitle(){
		$heading = $this->pageMode.':  '.$this->_titleEntity;
		$this->_pageTitle = $heading;
	}
	
	protected function setPageMenu(){
		$this->_pageMenu = 'entity._pageMenu not set.';
	}
	
	protected function setDefaults(){
	 	$this->f->setDefaults();
	}
	
	public function addForm(){
		$this->pageMode = ADD;
		return $this->editForm();
	}
	
	public function editForm(){
		$this->echoState(true, 'editForm');
		$this->setDefaults();

		return ('__Entity.editForm not overridden in child');
	}
	
	public function printPage(){
		$this->echoState(true, 'printPage');
		$heading = $this->getPageHeading();
		$details = $this->getPageDetails();
		$site = new _SiteTemplate;
		$site->setSiteTemplateDetails($heading, $details);
		$site->printSite();
	}
	
	protected function getPageHeading(){
		$this->setPageTitle();
		$this->setPageMenu();
		
		$heading = openDiv('section-heading-title');
		$heading .= $this->_pageTitle;
		$heading .= closeDiv();		
		
		$heading .= $this->_pageMenu;
		return $heading;
	}
	
	protected function getPageDetails(){			
		if ($this->pageMode == 'EDIT' or $this->pageMode == 'ADD'){
			$details = $this->editForm();
		} else {
			$details = $this->display();
		}
		return $details;
	}
	
	protected function copy(){
		$this->echoState(true, 'copy');
		printLine('__Entity.copy not overridden');
	}
	
	protected function saveUpdate(){
		$this->echoState(true, 'saveUpdate');
		printLine('__Entity.saveUpdate not overridden in child');
	}
	
	protected function saveInsert(){
		$this->echoState(true, 'saveInsert');
		printLine ('__Entity.saveInsert not overridden in child');
	}
	
	public function saveChanges(){
		$this->echoState(true, 'saveChanges');
		
		if ($this->pageMode == 'EDIT'){
			$this->saveUpdate();
		} else {
			$this->saveInsert();
		}
	}
	
	
}

class _baseEntity extends _echo {
	protected $__MyClassName = '__baseEntity.';
	protected $_titleEntity = '__baseEntity';

	public const VIEW = 'VIEW';
	public const EDIT = 'EDIT';
	public const ADD = 'ADD';
	public const COPY = 'COPY';
	public const FETCH = 'FETCH';
	public const OPTIONS = 'OPTIONS';
	public const COUNT = 'COUNT';
	public const LIST = 'LIST';
	public const SUMMARY= 'SUMMARY';
		
    public $pageMode = 'VIEW';
	public $id = 0;
	public $idParent = 0;

	protected $isPagingSet = false;
	public $resultPage = 1;
	public $perPage = 10;
	 
	protected $isCalendarSet = false;
	public $month = -1;
	public $year = -1;
	public $showCalendar = 'NO';
	
	public $prevCalendarLink = '';
	public $nextCalendarLink = '';
	
	public $countAll = 0;
	public $countChildren = 0;
	public $isCountSet = false;
	
	protected $_pageTitle = 'entity.pageTitle';
	protected $_pageMenu = 'entity.pageMenu';
	
	protected function echoState($show = true, $f = '-use-current-', $c= '-use-current-'){
		if ($show == true){
			$this->echoState_ids($show, $f, $c);
			$this->echoState_paging($show, $f, $c);
			$this->echoState_calendar($show, $f, $c);
			$this->echoState_count($show, $f, $c);
		}
	}
	
	protected function echoState_ids($show = true, $f = '-use-current-', $c= '-use-current-'){
		$this->echoLocale($f, $c);
		$s = $show;
		$this->echoValue($s, 'id', $this->id);
		$this->echoValue($s, 'idParent', $this->idParent);
		$this->echoValue($s, 'pageMode', $this->pageMode);
	}
	
	protected function echoState_calendar($show = true, $f = '-use-current-', $c= '-use-current-'){

		if ($this->isCalendarSet == true){
			$s = $show;
			$this->echoLocale($f, $c);
			$this->echoValue($s, 'month', $this->month);
			$this->echoValue($s, 'year', $this->year);
			$this->echoValue($s, 'showCalendar', $this->showCalendar);
		}
	}
	
	protected function echoState_count($show = true, $f = '-use-current-', $c= '-use-current-'){

		if ($this->isCountSet == true){
			$s = $show;
			$this->echoLocale($f, $c);
			$this->echoValue($s, 'count', $this->count);
			$this->echoValue($s, 'countChilden', $this->countChildren);
		}
	}
	
	
	protected function echoState_paging($show = true, $f = '-use-current-', $c= '-use-current-'){

		if ($this->isPagingSet == true){
			$s = $show;
			$this->echoLocale($f, $c);
			$this->echoValue($s, 'resultPage', $this->resultPage);
			$this->echoValue($s, 'perPage', $this->perPage);
		}
	}
    
	public function __construct($mode = 'VIEW', $id = 0, $idParent = 0, $page = 1, $rows = 10, $year = -1, $month = -1, $calendar = 'NO'){
		$this->setIdentifiers($mode, $id, $idParent);
		$this->setPaging($page, $rows, $calendar);
		$this->setCalendar($year, $month, $calendar);
		//$this->echoState(true);
	}


	public function setPaging($page = 1, $perPage = 10){
		$this->resultPage = $page;
		$this->perPage = $perPage;
		
		$this->isPagingSet = true;
		$this->echoState_paging(true, 'setPaging');
	 }
	 
	public function setCalendar($year = -1, $month = -1, $show = 'NO'){
		$this->showCalendar = $show;
	
		 if ($year != 0 && $year != -1){
		 	$this->year = $year;
		 	$this->month = $month;
		 } else {
		 //dates not set, use current month and year
		 	global $sessionTime;
		 	$this->year = getTimestampYear($sessionTime);
		 	$this->month = getTimestampMonth($sessionTime);
		 }
		 
		$this->isCalendarSet = true;
		$this->echoState_calendar(true, 'setCalendar');
	}
	
	protected function setCounts($count = 0, $countChildren = 0){
		$this->countAll = $count;
		$this->countChildren = $countChildren;
		
		$this->isCountSet = true;
		$this->echoState_count(true, 'setCount');
	}
	
	public function setIdentifiers($mode, $id = 0, $idParent = 0){
		$this->pageMode = $mode;
		$this->id = $id;
		$this->idParent = $idParent;
		$this->echoState_ids(true, 'setIdentifiers');
	}


	
}

?>
